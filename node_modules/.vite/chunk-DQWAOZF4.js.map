{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid-styles.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid-a11y-mixin.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/array-data-provider.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid-array-data-provider-mixin.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid-column-reordering-mixin.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid-column-resizing-mixin.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid-drag-and-drop-mixin.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid-dynamic-columns-mixin.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid-event-context-mixin.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid-filter-mixin.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid-keyboard-navigation-mixin.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid-row-details-mixin.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid-scroll-mixin.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid-selection-mixin.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid-sort-mixin.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid-styling-mixin.js", "../.pnpm/@vaadin/grid@22.0.2/node_modules/@vaadin/grid/src/vaadin-grid.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-grid',\n  css`\n    @keyframes vaadin-grid-appear {\n      to {\n        opacity: 1;\n      }\n    }\n\n    :host {\n      display: block;\n      animation: 1ms vaadin-grid-appear;\n      height: 400px;\n      flex: 1 1 auto;\n      align-self: stretch;\n      position: relative;\n    }\n\n    :host([hidden]) {\n      display: none !important;\n    }\n\n    #scroller {\n      display: block;\n      transform: translateY(0);\n      width: auto;\n      height: auto;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n    }\n\n    :host([all-rows-visible]) {\n      height: auto;\n      align-self: flex-start;\n      flex-grow: 0;\n      width: 100%;\n    }\n\n    :host([all-rows-visible]) #scroller {\n      width: 100%;\n      height: 100%;\n      position: relative;\n    }\n\n    :host([all-rows-visible]) #items {\n      min-height: 1px;\n    }\n\n    #table {\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n      height: 100%;\n      overflow: auto;\n      position: relative;\n      outline: none;\n      /* Workaround for a Desktop Safari bug: new stacking context here prevents the scrollbar from getting hidden */\n      z-index: 0;\n    }\n\n    #header,\n    #footer {\n      transform: translateX(var(--_grid-horizontal-scroll-position));\n      display: block;\n      position: -webkit-sticky;\n      position: sticky;\n      left: 0;\n      overflow: visible;\n      width: 100%;\n      z-index: 1;\n    }\n\n    #header {\n      top: 0;\n    }\n\n    th {\n      text-align: inherit;\n    }\n\n    /* Safari doesn't work with \"inherit\" */\n    [safari] th {\n      text-align: initial;\n    }\n\n    #footer {\n      bottom: 0;\n    }\n\n    #items {\n      transform: translateX(var(--_grid-horizontal-scroll-position));\n      flex-grow: 1;\n      flex-shrink: 0;\n      display: block;\n      position: -webkit-sticky;\n      position: sticky;\n      width: 100%;\n      left: 0;\n      overflow: visible;\n    }\n\n    [part~='row'] {\n      display: flex;\n      width: 100%;\n      box-sizing: border-box;\n      margin: 0;\n    }\n\n    [part~='row'][loading] [part~='body-cell'] ::slotted(vaadin-grid-cell-content) {\n      opacity: 0;\n    }\n\n    #items [part~='row'] {\n      position: absolute;\n    }\n\n    #items [part~='row']:empty {\n      height: 100%;\n    }\n\n    [part~='cell']:not([part~='details-cell']) {\n      flex-shrink: 0;\n      flex-grow: 1;\n      box-sizing: border-box;\n      display: flex;\n      width: 100%;\n      position: relative;\n      align-items: center;\n      padding: 0;\n      white-space: nowrap;\n    }\n\n    [part~='details-cell'] {\n      position: absolute;\n      bottom: 0;\n      width: 100%;\n      box-sizing: border-box;\n      padding: 0;\n    }\n\n    [part~='cell'] ::slotted(vaadin-grid-cell-content) {\n      display: block;\n      width: 100%;\n      box-sizing: border-box;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n\n    [hidden] {\n      display: none !important;\n    }\n\n    [frozen] {\n      z-index: 2;\n      transform: translateX(calc(-1 * var(--_grid-horizontal-scroll-position)));\n      will-change: transform;\n    }\n\n    [no-scrollbars][safari] #table,\n    [no-scrollbars][firefox] #table {\n      overflow: hidden;\n    }\n\n    /* Reordering styles */\n    :host([reordering]) [part~='cell'] ::slotted(vaadin-grid-cell-content),\n    :host([reordering]) [part~='resize-handle'],\n    #scroller[no-content-pointer-events] [part~='cell'] ::slotted(vaadin-grid-cell-content) {\n      pointer-events: none;\n    }\n\n    [part~='reorder-ghost'] {\n      visibility: hidden;\n      position: fixed;\n      pointer-events: none;\n      opacity: 0.5;\n\n      /* Prevent overflowing the grid in Firefox */\n      top: 0;\n      left: 0;\n    }\n\n    :host([reordering]) {\n      -moz-user-select: none;\n      -webkit-user-select: none;\n      user-select: none;\n    }\n\n    /* Resizing styles */\n    [part~='resize-handle'] {\n      position: absolute;\n      top: 0;\n      right: 0;\n      height: 100%;\n      cursor: col-resize;\n      z-index: 1;\n    }\n\n    [part~='resize-handle']::before {\n      position: absolute;\n      content: '';\n      height: 100%;\n      width: 35px;\n      transform: translateX(-50%);\n    }\n\n    [last-column] [part~='resize-handle']::before,\n    [last-frozen] [part~='resize-handle']::before {\n      width: 18px;\n      transform: none;\n      right: 0;\n    }\n\n    #scroller[column-resizing] {\n      -ms-user-select: none;\n      -moz-user-select: none;\n      -webkit-user-select: none;\n      user-select: none;\n    }\n\n    /* Sizer styles */\n    #sizer {\n      display: flex;\n      position: absolute;\n      visibility: hidden;\n    }\n\n    #sizer [part~='details-cell'] {\n      display: none !important;\n    }\n\n    #sizer [part~='cell'][hidden] {\n      display: none !important;\n    }\n\n    #sizer [part~='cell'] {\n      display: block;\n      flex-shrink: 0;\n      line-height: 0;\n      height: 0 !important;\n      min-height: 0 !important;\n      max-height: 0 !important;\n      padding: 0 !important;\n      border: none !important;\n    }\n\n    #sizer [part~='cell']::before {\n      content: '-';\n    }\n\n    #sizer [part~='cell'] ::slotted(vaadin-grid-cell-content) {\n      display: none !important;\n    }\n\n    /* RTL specific styles */\n\n    :host([dir='rtl']) *:is(#items, #header, #footer, [frozen]) {\n      transform: none;\n    }\n\n    :host([dir='rtl']) #items,\n    :host([dir='rtl']) #header,\n    :host([dir='rtl']) #footer {\n      left: auto;\n    }\n\n    :host([dir='rtl']) [part~='reorder-ghost'] {\n      left: auto;\n      right: 0;\n    }\n\n    :host([dir='rtl']) [part~='resize-handle'] {\n      left: 0;\n      right: auto;\n    }\n\n    :host([dir='rtl']) [part~='resize-handle']::before {\n      transform: translateX(50%);\n    }\n\n    :host([dir='rtl']) [last-column] [part~='resize-handle']::before,\n    :host([dir='rtl']) [last-frozen] [part~='resize-handle']::before {\n      left: 0;\n      right: auto;\n    }\n  `,\n  { moduleId: 'vaadin-grid-styles' }\n);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @polymerMixin\n */\nexport const A11yMixin = (superClass) =>\n  class A11yMixin extends superClass {\n    static get observers() {\n      return ['_a11yUpdateGridSize(size, _columnTree, _columnTree.*)'];\n    }\n\n    /** @private */\n    _a11yGetHeaderRowCount(_columnTree) {\n      return _columnTree.filter((level) => level.some((col) => col.headerRenderer || col.path || col.header)).length;\n    }\n\n    /** @private */\n    _a11yGetFooterRowCount(_columnTree) {\n      return _columnTree.filter((level) => level.some((col) => col.headerRenderer)).length;\n    }\n\n    /** @private */\n    _a11yUpdateGridSize(size, _columnTree) {\n      if (size === undefined || _columnTree === undefined) {\n        return;\n      }\n\n      const bodyColumns = _columnTree[_columnTree.length - 1];\n      this.$.table.setAttribute(\n        'aria-rowcount',\n        size + this._a11yGetHeaderRowCount(_columnTree) + this._a11yGetFooterRowCount(_columnTree)\n      );\n      this.$.table.setAttribute('aria-colcount', (bodyColumns && bodyColumns.length) || 0);\n\n      this._a11yUpdateHeaderRows();\n      this._a11yUpdateFooterRows();\n    }\n\n    /** @protected */\n    _a11yUpdateHeaderRows() {\n      Array.from(this.$.header.children).forEach((headerRow, index) =>\n        headerRow.setAttribute('aria-rowindex', index + 1)\n      );\n    }\n\n    /** @protected */\n    _a11yUpdateFooterRows() {\n      Array.from(this.$.footer.children).forEach((footerRow, index) =>\n        footerRow.setAttribute('aria-rowindex', this._a11yGetHeaderRowCount(this._columnTree) + this.size + index + 1)\n      );\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {number} index\n     * @protected\n     */\n    _a11yUpdateRowRowindex(row, index) {\n      row.setAttribute('aria-rowindex', index + this._a11yGetHeaderRowCount(this._columnTree) + 1);\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {boolean} selected\n     * @protected\n     */\n    _a11yUpdateRowSelected(row, selected) {\n      // Jaws reads selection only for rows, NVDA only for cells\n      row.setAttribute('aria-selected', Boolean(selected));\n      Array.from(row.children).forEach((cell) => cell.setAttribute('aria-selected', Boolean(selected)));\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @protected\n     */\n    _a11yUpdateRowExpanded(row) {\n      if (this.__isRowExpandable(row)) {\n        row.setAttribute('aria-expanded', 'false');\n      } else if (this.__isRowCollapsible(row)) {\n        row.setAttribute('aria-expanded', 'true');\n      } else {\n        row.removeAttribute('aria-expanded');\n      }\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {number} level\n     * @protected\n     */\n    _a11yUpdateRowLevel(row, level) {\n      row.setAttribute('aria-level', level + 1);\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {boolean} detailsOpened\n     * @protected\n     */\n    _a11yUpdateRowDetailsOpened(row, detailsOpened) {\n      const detailsCell = row.querySelector('[part~=details-cell]');\n\n      Array.from(row.children).forEach((cell) => {\n        if (detailsCell) {\n          cell.setAttribute('aria-expanded', detailsOpened);\n        } else {\n          cell.removeAttribute('aria-expanded');\n        }\n      });\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {!HTMLElement} detailsCell\n     * @protected\n     */\n    _a11ySetRowDetailsCell(row, detailsCell) {\n      Array.from(row.children).forEach((cell) => {\n        if (cell !== detailsCell) {\n          cell.setAttribute('aria-controls', detailsCell.id);\n        }\n      });\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {number} colspan\n     * @protected\n     */\n    _a11yUpdateCellColspan(cell, colspan) {\n      cell.setAttribute('aria-colspan', Number(colspan));\n    }\n\n    /** @protected */\n    _a11yUpdateSorters() {\n      Array.from(this.querySelectorAll('vaadin-grid-sorter')).forEach((sorter) => {\n        let cellContent = sorter.parentNode;\n        while (cellContent && cellContent.localName !== 'vaadin-grid-cell-content') {\n          cellContent = cellContent.parentNode;\n        }\n        if (cellContent && cellContent.assignedSlot) {\n          const cell = cellContent.assignedSlot.parentNode;\n          cell.setAttribute(\n            'aria-sort',\n            {\n              asc: 'ascending',\n              desc: 'descending'\n            }[String(sorter.direction)] || 'none'\n          );\n        }\n      });\n    }\n  };\n", "/**\n * Returns a sub-property of an object\n *\n * @param {string} path dot-separated path to the sub property\n * @param {*} object\n * @returns {*}\n */\nfunction get(path, object) {\n  return path.split('.').reduce((obj, property) => obj[property], object);\n}\n\n/**\n * Check array of filters/sorters for paths validity, console.warn invalid items\n * @param {!Array<!GridFilterDefinition | !GridSorterDefinition>} arrayToCheck The array of filters/sorters to check\n * @param {string} action The name of action to include in warning (filtering, sorting)\n * @param {!Array<!GridItem>} items\n */\nfunction checkPaths(arrayToCheck, action, items) {\n  if (items.length === 0) {\n    return false;\n  }\n\n  let result = true;\n\n  for (let i in arrayToCheck) {\n    const path = arrayToCheck[i].path;\n\n    // skip simple paths\n    if (!path || path.indexOf('.') === -1) {\n      continue;\n    }\n\n    const parentProperty = path.replace(/\\.[^.]*$/, ''); // a.b.c -> a.b\n    if (get(parentProperty, items[0]) === undefined) {\n      console.warn(`Path \"${path}\" used for ${action} does not exist in all of the items, ${action} is disabled.`);\n      result = false;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Sorts the given array of items based on the sorting rules and returns the result.\n *\n * @param {Array<any>} items\n * @param {Array<GridSorterDefinition>} items\n * @return {Array<any>}\n */\nfunction multiSort(items, sortOrders) {\n  return items.sort((a, b) => {\n    return sortOrders\n      .map((sortOrder) => {\n        if (sortOrder.direction === 'asc') {\n          return compare(get(sortOrder.path, a), get(sortOrder.path, b));\n        } else if (sortOrder.direction === 'desc') {\n          return compare(get(sortOrder.path, b), get(sortOrder.path, a));\n        }\n        return 0;\n      })\n      .reduce((p, n) => {\n        return p !== 0 ? p : n;\n      }, 0);\n  });\n}\n\n/**\n * @param {unknown} value\n * @return {string}\n */\nfunction normalizeEmptyValue(value) {\n  if ([undefined, null].indexOf(value) >= 0) {\n    return '';\n  } else if (isNaN(value)) {\n    return value.toString();\n  } else {\n    return value;\n  }\n}\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n * @return {number}\n */\nfunction compare(a, b) {\n  a = normalizeEmptyValue(a);\n  b = normalizeEmptyValue(b);\n\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\n/**\n * @param {!Array<!GridItem>} items\n * @return {!Array<!GridItem>}\n */\nfunction filter(items, filters) {\n  return items.filter((item) => {\n    return filters.every((filter) => {\n      const value = normalizeEmptyValue(get(filter.path, item));\n      const filterValueLowercase = normalizeEmptyValue(filter.value).toString().toLowerCase();\n      return value.toString().toLowerCase().includes(filterValueLowercase);\n    });\n  });\n}\n\n/**\n * WARNING: This API is still intended for internal purposes only and\n * may change any time.\n *\n * Creates a new grid compatible data provider that serves the items\n * from the given array as data when requested by the grid.\n *\n * @param {Array<any>} items\n * @return {GridDataProvider<any>}\n */\nexport const createArrayDataProvider = (allItems) => {\n  return (params, callback) => {\n    let items = allItems ? [...allItems] : [];\n\n    if (params.filters && checkPaths(params.filters, 'filtering', items)) {\n      items = filter(items, params.filters);\n    }\n\n    if (\n      Array.isArray(params.sortOrders) &&\n      params.sortOrders.length &&\n      checkPaths(params.sortOrders, 'sorting', items)\n    ) {\n      items = multiSort(items, params.sortOrders);\n    }\n\n    const count = Math.min(items.length, params.pageSize);\n    const start = params.page * count;\n    const end = start + count;\n    const slice = items.slice(start, end);\n    callback(slice, items.length);\n  };\n};\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { createArrayDataProvider } from './array-data-provider.js';\n\n/**\n * @polymerMixin\n */\nexport const ArrayDataProviderMixin = (superClass) =>\n  class ArrayDataProviderMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * An array containing the items which will be passed to renderer functions.\n         *\n         * @type {Array<!GridItem> | undefined}\n         */\n        items: Array\n      };\n    }\n\n    static get observers() {\n      return ['__dataProviderOrItemsChanged(dataProvider, items, isAttached, items.*, _filters, _sorters)'];\n    }\n\n    /** @private */\n    __setArrayDataProvider(items) {\n      const arrayDataProvider = createArrayDataProvider(this.items, {});\n      arrayDataProvider.__items = items;\n      this.setProperties({\n        _arrayDataProvider: arrayDataProvider,\n        size: items.length,\n        dataProvider: arrayDataProvider\n      });\n    }\n\n    /** @private */\n    __dataProviderOrItemsChanged(dataProvider, items, isAttached) {\n      if (!isAttached) {\n        return;\n      }\n\n      if (this._arrayDataProvider) {\n        // Has an items array data provider beforehand\n\n        if (dataProvider !== this._arrayDataProvider) {\n          // A custom data provider was set externally\n          this.setProperties({\n            _arrayDataProvider: undefined,\n            items: undefined\n          });\n        } else if (!items) {\n          // The items array was unset\n          this.setProperties({\n            _arrayDataProvider: undefined,\n            dataProvider: undefined,\n            size: 0\n          });\n          this.clearCache();\n        } else if (this._arrayDataProvider.__items === items) {\n          // The items array was modified\n          this.clearCache();\n          this.size = this._effectiveSize;\n        } else {\n          // The items array was replaced\n          this.__setArrayDataProvider(items);\n        }\n      } else if (items) {\n        // There was no array data provider before items was set\n        this.__setArrayDataProvider(items);\n      }\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { GestureEventListeners } from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';\nimport { addListener } from '@polymer/polymer/lib/utils/gestures.js';\nimport { updateColumnOrders } from './vaadin-grid-helpers.js';\n\n/**\n * @polymerMixin\n */\nexport const ColumnReorderingMixin = (superClass) =>\n  class ColumnReorderingMixin extends GestureEventListeners(superClass) {\n    static get properties() {\n      return {\n        /**\n         * Set to true to allow column reordering.\n         * @attr {boolean} column-reordering-allowed\n         * @type {boolean}\n         */\n        columnReorderingAllowed: {\n          type: Boolean,\n          value: false\n        },\n\n        /** @private */\n        _orderBaseScope: {\n          type: Number,\n          value: 10000000\n        }\n      };\n    }\n\n    static get observers() {\n      return ['_updateOrders(_columnTree, _columnTree.*)'];\n    }\n\n    ready() {\n      super.ready();\n      addListener(this, 'track', this._onTrackEvent);\n      this._reorderGhost = this.shadowRoot.querySelector('[part=\"reorder-ghost\"]');\n\n      this.addEventListener('touchstart', this._onTouchStart.bind(this));\n      this.addEventListener('touchmove', this._onTouchMove.bind(this));\n      this.addEventListener('touchend', this._onTouchEnd.bind(this));\n      this.addEventListener('contextmenu', this._onContextMenu.bind(this));\n    }\n\n    /** @private */\n    _onContextMenu(e) {\n      if (this.hasAttribute('reordering')) {\n        e.preventDefault();\n      }\n    }\n\n    /** @private */\n    _onTouchStart(e) {\n      // Touch event, delay activation by 100ms\n      this._startTouchReorderTimeout = setTimeout(() => {\n        this._onTrackStart({\n          detail: {\n            x: e.touches[0].clientX,\n            y: e.touches[0].clientY\n          }\n        });\n      }, 100);\n    }\n\n    /** @private */\n    _onTouchMove(e) {\n      if (this._draggedColumn) {\n        e.preventDefault();\n      }\n      clearTimeout(this._startTouchReorderTimeout);\n    }\n\n    /** @private */\n    _onTouchEnd() {\n      clearTimeout(this._startTouchReorderTimeout);\n      this._onTrackEnd();\n    }\n\n    /** @private */\n    _onTrackEvent(e) {\n      if (e.detail.state === 'start') {\n        const path = e.composedPath();\n        const headerCell = path[path.indexOf(this.$.header) - 2];\n        if (!headerCell || !headerCell._content) {\n          // Not a header column\n          return;\n        }\n\n        if (headerCell._content.contains(this.getRootNode().activeElement)) {\n          // Something was focused inside the cell\n          return;\n        }\n\n        if (this.$.scroller.hasAttribute('column-resizing')) {\n          // Resizing is in progress\n          return;\n        }\n\n        if (!this._touchDevice) {\n          // Not a touch device\n          this._onTrackStart(e);\n        }\n      } else if (e.detail.state === 'track') {\n        this._onTrack(e);\n      } else if (e.detail.state === 'end') {\n        this._onTrackEnd(e);\n      }\n    }\n\n    /** @private */\n    _onTrackStart(e) {\n      if (!this.columnReorderingAllowed) {\n        return;\n      }\n\n      // Cancel reordering if there are draggable nodes on the event path\n      const path = e.composedPath && e.composedPath();\n      if (path && path.filter((node) => node.hasAttribute && node.hasAttribute('draggable'))[0]) {\n        return;\n      }\n\n      const headerCell = this._cellFromPoint(e.detail.x, e.detail.y);\n      if (!headerCell || headerCell.getAttribute('part').indexOf('header-cell') === -1) {\n        return;\n      }\n\n      this.toggleAttribute('reordering', true);\n      this._draggedColumn = headerCell._column;\n      while (this._draggedColumn.parentElement.childElementCount === 1) {\n        // This is the only column in the group, drag the whole group instead\n        this._draggedColumn = this._draggedColumn.parentElement;\n      }\n      this._setSiblingsReorderStatus(this._draggedColumn, 'allowed');\n      this._draggedColumn._reorderStatus = 'dragging';\n\n      this._updateGhost(headerCell);\n      this._reorderGhost.style.visibility = 'visible';\n      this._updateGhostPosition(e.detail.x, this._touchDevice ? e.detail.y - 50 : e.detail.y);\n      this._autoScroller();\n    }\n\n    /** @private */\n    _onTrack(e) {\n      if (!this._draggedColumn) {\n        // Reordering didn\u2019t start. Skip this event.\n        return;\n      }\n\n      const targetCell = this._cellFromPoint(e.detail.x, e.detail.y);\n      if (!targetCell) {\n        return;\n      }\n\n      const targetColumn = this._getTargetColumn(targetCell, this._draggedColumn);\n      if (\n        this._isSwapAllowed(this._draggedColumn, targetColumn) &&\n        this._isSwappableByPosition(targetColumn, e.detail.x)\n      ) {\n        this._swapColumnOrders(this._draggedColumn, targetColumn);\n      }\n\n      this._updateGhostPosition(e.detail.x, this._touchDevice ? e.detail.y - 50 : e.detail.y);\n      this._lastDragClientX = e.detail.x;\n    }\n\n    /** @private */\n    _onTrackEnd() {\n      if (!this._draggedColumn) {\n        // Reordering didn\u2019t start. Skip this event.\n        return;\n      }\n\n      this.toggleAttribute('reordering', false);\n      this._draggedColumn._reorderStatus = '';\n      this._setSiblingsReorderStatus(this._draggedColumn, '');\n      this._draggedColumn = null;\n      this._lastDragClientX = null;\n      this._reorderGhost.style.visibility = 'hidden';\n\n      this.dispatchEvent(\n        new CustomEvent('column-reorder', {\n          detail: {\n            columns: this._getColumnsInOrder()\n          }\n        })\n      );\n    }\n\n    /**\n     * @return {!Array<!GridColumn>}\n     * @protected\n     */\n    _getColumnsInOrder() {\n      return this._columnTree\n        .slice(0)\n        .pop()\n        .filter((c) => !c.hidden)\n        .sort((b, a) => b._order - a._order);\n    }\n\n    /**\n     * @param {number} x\n     * @param {number} y\n     * @return {HTMLElement | undefined}\n     * @protected\n     */\n    _cellFromPoint(x, y) {\n      x = x || 0;\n      y = y || 0;\n      if (!this._draggedColumn) {\n        this.$.scroller.toggleAttribute('no-content-pointer-events', true);\n      }\n      const cell = this.shadowRoot.elementFromPoint(x, y);\n      this.$.scroller.toggleAttribute('no-content-pointer-events', false);\n\n      // Make sure the element is actually a cell\n      if (cell && cell._column) {\n        return cell;\n      }\n    }\n\n    /**\n     * @param {number} eventClientX\n     * @param {number} eventClientY\n     * @protected\n     */\n    _updateGhostPosition(eventClientX, eventClientY) {\n      const ghostRect = this._reorderGhost.getBoundingClientRect();\n      // // This is where we want to position the ghost\n      const targetLeft = eventClientX - ghostRect.width / 2;\n      const targetTop = eventClientY - ghostRect.height / 2;\n      // Current position\n      const _left = parseInt(this._reorderGhost._left || 0);\n      const _top = parseInt(this._reorderGhost._top || 0);\n      // Reposition the ghost\n      this._reorderGhost._left = _left - (ghostRect.left - targetLeft);\n      this._reorderGhost._top = _top - (ghostRect.top - targetTop);\n      this._reorderGhost.style.transform = `translate(${this._reorderGhost._left}px, ${this._reorderGhost._top}px)`;\n    }\n\n    /**\n     * @param {!HTMLElement} cell\n     * @return {!HTMLElement}\n     * @protected\n     */\n    _updateGhost(cell) {\n      const ghost = this._reorderGhost;\n      ghost.textContent = cell._content.innerText;\n      const style = window.getComputedStyle(cell);\n      [\n        'boxSizing',\n        'display',\n        'width',\n        'height',\n        'background',\n        'alignItems',\n        'padding',\n        'border',\n        'flex-direction',\n        'overflow'\n      ].forEach((propertyName) => (ghost.style[propertyName] = style[propertyName]));\n      return ghost;\n    }\n\n    /** @private */\n    _updateOrders(columnTree, splices) {\n      if (columnTree === undefined || splices === undefined) {\n        return;\n      }\n\n      // Reset all column orders\n      columnTree[0].forEach((column) => (column._order = 0));\n      // Set order numbers to top-level columns\n      updateColumnOrders(columnTree[0], this._orderBaseScope, 0);\n    }\n\n    /**\n     * @param {!GridColumn} column\n     * @param {string} status\n     * @protected\n     */\n    _setSiblingsReorderStatus(column, status) {\n      Array.from(column.parentNode.children)\n        .filter((child) => /column/.test(child.localName) && this._isSwapAllowed(child, column))\n        .forEach((sibling) => (sibling._reorderStatus = status));\n    }\n\n    /** @protected */\n    _autoScroller() {\n      if (this._lastDragClientX) {\n        const rightDiff = this._lastDragClientX - this.getBoundingClientRect().right + 50;\n        const leftDiff = this.getBoundingClientRect().left - this._lastDragClientX + 50;\n\n        if (rightDiff > 0) {\n          this.$.table.scrollLeft += rightDiff / 10;\n        } else if (leftDiff > 0) {\n          this.$.table.scrollLeft -= leftDiff / 10;\n        }\n      }\n\n      if (this._draggedColumn) {\n        setTimeout(() => this._autoScroller(), 10);\n      }\n    }\n\n    /**\n     * @param {GridColumn | undefined} column1\n     * @param {GridColumn | undefined} column2\n     * @return {boolean | undefined}\n     * @protected\n     */\n    _isSwapAllowed(column1, column2) {\n      if (column1 && column2) {\n        const differentColumns = column1 !== column2;\n        const sameParent = column1.parentElement === column2.parentElement;\n        const sameFrozen = column1.frozen === column2.frozen;\n        return differentColumns && sameParent && sameFrozen;\n      }\n    }\n\n    /**\n     * @param {!GridColumn} targetColumn\n     * @param {number} clientX\n     * @return {boolean}\n     * @protected\n     */\n    _isSwappableByPosition(targetColumn, clientX) {\n      const targetCell = Array.from(this.$.header.querySelectorAll('tr:not([hidden]) [part~=\"cell\"]')).filter((cell) =>\n        targetColumn.contains(cell._column)\n      )[0];\n      const sourceCellRect = this.$.header\n        .querySelector('tr:not([hidden]) [reorder-status=dragging]')\n        .getBoundingClientRect();\n      const targetRect = targetCell.getBoundingClientRect();\n      if (targetRect.left > sourceCellRect.left) {\n        return clientX > targetRect.right - sourceCellRect.width;\n      } else {\n        return clientX < targetRect.left + sourceCellRect.width;\n      }\n    }\n\n    /**\n     * @param {!GridColumn} column1\n     * @param {!GridColumn} column2\n     * @protected\n     */\n    _swapColumnOrders(column1, column2) {\n      const _order = column1._order;\n      column1._order = column2._order;\n      column2._order = _order;\n      this._updateLastFrozen();\n      this._updateFirstAndLastColumn();\n    }\n\n    /**\n     * @param {HTMLElement | undefined} targetCell\n     * @param {GridColumn} draggedColumn\n     * @return {GridColumn | undefined}\n     * @protected\n     */\n    _getTargetColumn(targetCell, draggedColumn) {\n      if (targetCell && draggedColumn) {\n        let candidate = targetCell._column;\n        while (candidate.parentElement !== draggedColumn.parentElement && candidate !== this) {\n          candidate = candidate.parentElement;\n        }\n        if (candidate.parentElement === draggedColumn.parentElement) {\n          return candidate;\n        } else {\n          return targetCell._column;\n        }\n      }\n    }\n\n    /**\n     * Fired when the columns in the grid are reordered.\n     *\n     * @event column-reorder\n     * @param {Object} detail\n     * @param {Object} detail.columns the columns in the new order\n     */\n  };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { GestureEventListeners } from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';\nimport { addListener } from '@polymer/polymer/lib/utils/gestures.js';\n\n/**\n * @polymerMixin\n */\nexport const ColumnResizingMixin = (superClass) =>\n  class ColumnResizingMixin extends GestureEventListeners(superClass) {\n    ready() {\n      super.ready();\n      const scroller = this.$.scroller;\n      addListener(scroller, 'track', this._onHeaderTrack.bind(this));\n\n      // Disallow scrolling while resizing\n      scroller.addEventListener('touchmove', (e) => scroller.hasAttribute('column-resizing') && e.preventDefault());\n\n      // Disable contextmenu on any resize separator.\n      scroller.addEventListener(\n        'contextmenu',\n        (e) => e.target.getAttribute('part') == 'resize-handle' && e.preventDefault()\n      );\n\n      // Disable native cell focus when resizing\n      scroller.addEventListener(\n        'mousedown',\n        (e) => e.target.getAttribute('part') === 'resize-handle' && e.preventDefault()\n      );\n    }\n\n    /** @private */\n    _onHeaderTrack(e) {\n      const handle = e.target;\n      if (handle.getAttribute('part') === 'resize-handle') {\n        const cell = handle.parentElement;\n        let column = cell._column;\n\n        this.$.scroller.toggleAttribute('column-resizing', true);\n\n        // Get the target column to resize\n        while (column.localName === 'vaadin-grid-column-group') {\n          column = Array.prototype.slice\n            .call(column._childColumns, 0)\n            .sort(function (a, b) {\n              return a._order - b._order;\n            })\n            .filter(function (column) {\n              return !column.hidden;\n            })\n            .pop();\n        }\n\n        const columnRowCells = Array.from(this.$.header.querySelectorAll('[part~=\"row\"]:last-child [part~=\"cell\"]'));\n        const targetCell = columnRowCells.filter((cell) => cell._column === column)[0];\n        // Resize the target column\n        if (targetCell.offsetWidth) {\n          const style = window.getComputedStyle(targetCell);\n          const minWidth =\n            10 +\n            parseInt(style.paddingLeft) +\n            parseInt(style.paddingRight) +\n            parseInt(style.borderLeftWidth) +\n            parseInt(style.borderRightWidth) +\n            parseInt(style.marginLeft) +\n            parseInt(style.marginRight);\n          const maxWidth =\n            targetCell.offsetWidth +\n            (this.__isRTL\n              ? targetCell.getBoundingClientRect().left - e.detail.x\n              : e.detail.x - targetCell.getBoundingClientRect().right);\n          column.width = Math.max(minWidth, maxWidth) + 'px';\n          column.flexGrow = 0;\n        }\n        // Fix width and flex-grow for all preceding columns\n        columnRowCells\n          .sort(function (a, b) {\n            return a._column._order - b._column._order;\n          })\n          .forEach(function (cell, index, array) {\n            if (index < array.indexOf(targetCell)) {\n              cell._column.width = cell.offsetWidth + 'px';\n              cell._column.flexGrow = 0;\n            }\n          });\n\n        if (e.detail.state === 'end') {\n          this.$.scroller.toggleAttribute('column-resizing', false);\n          this.dispatchEvent(\n            new CustomEvent('column-resize', {\n              detail: { resizedColumn: column }\n            })\n          );\n        }\n\n        // Notify resize\n        this._resizeHandler();\n      }\n    }\n\n    /**\n     * Fired when a column in the grid is resized by the user.\n     *\n     * @event column-resize\n     * @param {Object} detail\n     * @param {Object} detail.resizedColumn the column that was resized\n     */\n  };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nconst DropMode = {\n  BETWEEN: 'between',\n  ON_TOP: 'on-top',\n  ON_TOP_OR_BETWEEN: 'on-top-or-between',\n  ON_GRID: 'on-grid'\n};\n\nconst DropLocation = {\n  ON_TOP: 'on-top',\n  ABOVE: 'above',\n  BELOW: 'below',\n  EMPTY: 'empty'\n};\n\n/**\n * @polymerMixin\n */\nexport const DragAndDropMixin = (superClass) =>\n  class DragAndDropMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * Defines the locations within the Grid row where an element can be dropped.\n         *\n         * Possible values are:\n         * - `between`: The drop event can happen between Grid rows.\n         * - `on-top`: The drop event can happen on top of Grid rows.\n         * - `on-top-or-between`: The drop event can happen either on top of or between Grid rows.\n         * - `on-grid`: The drop event will not happen on any specific row, it will show the drop target outline around the whole grid.\n         * @attr {between|on-top|on-top-or-between|on-grid} drop-mode\n         * @type {GridDropMode | null | undefined}\n         */\n        dropMode: String,\n\n        /**\n         * Marks the grid's rows to be available for dragging.\n         * @attr {boolean} rows-draggable\n         */\n        rowsDraggable: Boolean,\n\n        /**\n         * A function that filters dragging of specific grid rows. The return value should be false\n         * if dragging of the row should be disabled.\n         *\n         * Receives one argument:\n         * - `model` The object with the properties related with\n         *   the rendered item, contains:\n         *   - `model.index` The index of the item.\n         *   - `model.item` The item.\n         *   - `model.expanded` Sublevel toggle state.\n         *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n         *   - `model.selected` Selected state.\n         *\n         * @type {GridDragAndDropFilter | null | undefined}\n         */\n        dragFilter: Function,\n\n        /**\n         * A function that filters dropping on specific grid rows. The return value should be false\n         * if dropping on the row should be disabled.\n         *\n         * Receives one argument:\n         * - `model` The object with the properties related with\n         *   the rendered item, contains:\n         *   - `model.index` The index of the item.\n         *   - `model.item` The item.\n         *   - `model.expanded` Sublevel toggle state.\n         *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n         *   - `model.selected` Selected state.\n         *\n         * @type {GridDragAndDropFilter | null | undefined}\n         */\n        dropFilter: Function,\n\n        /** @private */\n        __dndAutoScrollThreshold: {\n          value: 50\n        }\n      };\n    }\n\n    static get observers() {\n      return ['_dragDropAccessChanged(rowsDraggable, dropMode, dragFilter, dropFilter, loading)'];\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n      this.$.table.addEventListener('dragstart', this._onDragStart.bind(this));\n      this.$.table.addEventListener('dragend', this._onDragEnd.bind(this));\n      this.$.table.addEventListener('dragover', this._onDragOver.bind(this));\n      this.$.table.addEventListener('dragleave', this._onDragLeave.bind(this));\n      this.$.table.addEventListener('drop', this._onDrop.bind(this));\n      this.$.table.addEventListener('dragenter', (e) => {\n        if (this.dropMode) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      });\n    }\n\n    /** @private */\n    _onDragStart(e) {\n      if (this.rowsDraggable) {\n        let row = e.target;\n        if (row.localName === 'vaadin-grid-cell-content') {\n          // The draggable node is the cell content element on browsers that support native shadow\n          row = row.assignedSlot.parentNode.parentNode;\n        }\n        if (row.parentNode !== this.$.items) {\n          return;\n        }\n\n        e.stopPropagation();\n        this.toggleAttribute('dragging-rows', true);\n\n        if (this._safari) {\n          // Safari doesn't position drag images from transformed\n          // elements properly so we need to switch to use top temporarily\n          const transform = row.style.transform;\n          row.style.top = /translateY\\((.*)\\)/.exec(transform)[1];\n          row.style.transform = 'none';\n          requestAnimationFrame(() => {\n            row.style.top = '';\n            row.style.transform = transform;\n          });\n        }\n\n        const rowRect = row.getBoundingClientRect();\n\n        if (this._ios) {\n          e.dataTransfer.setDragImage(row);\n        } else {\n          e.dataTransfer.setDragImage(row, e.clientX - rowRect.left, e.clientY - rowRect.top);\n        }\n\n        let rows = [row];\n        if (this._isSelected(row._item)) {\n          rows = this.__getViewportRows()\n            .filter((row) => this._isSelected(row._item))\n            .filter((row) => !this.dragFilter || this.dragFilter(this.__getRowModel(row)));\n        }\n\n        // Set the default transfer data\n        e.dataTransfer.setData('text', this.__formatDefaultTransferData(rows));\n\n        row.setAttribute('dragstart', rows.length > 1 ? rows.length : '');\n        this.style.setProperty('--_grid-drag-start-x', `${e.clientX - rowRect.left + 20}px`);\n        this.style.setProperty('--_grid-drag-start-y', `${e.clientY - rowRect.top + 10}px`);\n\n        requestAnimationFrame(() => {\n          row.removeAttribute('dragstart');\n          this.updateStyles({ '--_grid-drag-start-x': '', '--_grid-drag-start-y': '' });\n        });\n\n        const event = new CustomEvent('grid-dragstart', {\n          detail: {\n            draggedItems: rows.map((row) => row._item),\n            setDragData: (type, data) => e.dataTransfer.setData(type, data),\n            setDraggedItemsCount: (count) => row.setAttribute('dragstart', count)\n          }\n        });\n        event.originalEvent = e;\n        this.dispatchEvent(event);\n      }\n    }\n\n    /** @private */\n    _onDragEnd(e) {\n      this.toggleAttribute('dragging-rows', false);\n      e.stopPropagation();\n      const event = new CustomEvent('grid-dragend');\n      event.originalEvent = e;\n      this.dispatchEvent(event);\n    }\n\n    /** @private */\n    _onDragLeave(e) {\n      e.stopPropagation();\n      this._clearDragStyles();\n    }\n\n    /** @private */\n    _onDragOver(e) {\n      if (this.dropMode) {\n        this._dropLocation = undefined;\n        this._dragOverItem = undefined;\n\n        if (this.__dndAutoScroll(e.clientY)) {\n          this._clearDragStyles();\n          return;\n        }\n\n        let row = e.composedPath().filter((node) => node.localName === 'tr')[0];\n\n        if (!this._effectiveSize || this.dropMode === DropMode.ON_GRID) {\n          // The grid is empty or \"on-grid\" drop mode was used, always default to \"empty\"\n          this._dropLocation = DropLocation.EMPTY;\n        } else if (!row || row.parentNode !== this.$.items) {\n          // The dragover didn't occur on a body row but the grid has items\n          if (row) {\n            // The dragover occurred over a header/footer row\n            return;\n          } else if (this.dropMode === DropMode.BETWEEN || this.dropMode === DropMode.ON_TOP_OR_BETWEEN) {\n            // The drop mode allows setting the last row as the drag over item\n            row = Array.from(this.$.items.children)\n              .filter((row) => !row.hidden)\n              .pop();\n            this._dropLocation = DropLocation.BELOW;\n          } else {\n            // Drop mode on-top used but the dragover didn't occur over one of the existing rows\n            return;\n          }\n        } else {\n          // The dragover occurred on a body row, determine the drop location from coordinates\n          const rowRect = row.getBoundingClientRect();\n\n          this._dropLocation = DropLocation.ON_TOP;\n\n          if (this.dropMode === DropMode.BETWEEN) {\n            const dropAbove = e.clientY - rowRect.top < rowRect.bottom - e.clientY;\n            this._dropLocation = dropAbove ? DropLocation.ABOVE : DropLocation.BELOW;\n          } else if (this.dropMode === DropMode.ON_TOP_OR_BETWEEN) {\n            if (e.clientY - rowRect.top < rowRect.height / 3) {\n              this._dropLocation = DropLocation.ABOVE;\n            } else if (e.clientY - rowRect.top > (rowRect.height / 3) * 2) {\n              this._dropLocation = DropLocation.BELOW;\n            }\n          }\n        }\n\n        if (row && row.hasAttribute('drop-disabled')) {\n          this._dropLocation = undefined;\n          return;\n        }\n\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (this._dropLocation === DropLocation.EMPTY) {\n          this.toggleAttribute('dragover', true);\n        } else if (row) {\n          this._dragOverItem = row._item;\n          if (row.getAttribute('dragover') !== this._dropLocation) {\n            row.setAttribute('dragover', this._dropLocation);\n          }\n        } else {\n          this._clearDragStyles();\n        }\n      }\n    }\n\n    /** @private */\n    __dndAutoScroll(clientY) {\n      if (this.__dndAutoScrolling) {\n        return true;\n      }\n\n      const headerBottom = this.$.header.getBoundingClientRect().bottom;\n      const footerTop = this.$.footer.getBoundingClientRect().top;\n      const topDiff = headerBottom - clientY + this.__dndAutoScrollThreshold;\n      const bottomDiff = clientY - footerTop + this.__dndAutoScrollThreshold;\n      let scrollTopDelta = 0;\n\n      if (bottomDiff > 0) {\n        scrollTopDelta = bottomDiff * 2;\n      } else if (topDiff > 0) {\n        scrollTopDelta = -topDiff * 2;\n      }\n\n      if (scrollTopDelta) {\n        const scrollTop = this.$.table.scrollTop;\n        this.$.table.scrollTop += scrollTopDelta;\n        const scrollTopChanged = scrollTop !== this.$.table.scrollTop;\n        if (scrollTopChanged) {\n          this.__dndAutoScrolling = true;\n          // Disallow more auto-scrolls within 20ms\n          setTimeout(() => (this.__dndAutoScrolling = false), 20);\n          return true;\n        }\n      }\n    }\n\n    /** @private */\n    __getViewportRows() {\n      const headerBottom = this.$.header.getBoundingClientRect().bottom;\n      const footerTop = this.$.footer.getBoundingClientRect().top;\n      return Array.from(this.$.items.children).filter((row) => {\n        const rowRect = row.getBoundingClientRect();\n        return rowRect.bottom > headerBottom && rowRect.top < footerTop;\n      });\n    }\n\n    /** @protected */\n    _clearDragStyles() {\n      this.removeAttribute('dragover');\n      Array.from(this.$.items.children).forEach((row) => row.removeAttribute('dragover'));\n    }\n\n    /** @private */\n    _onDrop(e) {\n      if (this.dropMode) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        const dragData =\n          e.dataTransfer.types &&\n          Array.from(e.dataTransfer.types).map((type) => {\n            return {\n              type,\n              data: e.dataTransfer.getData(type)\n            };\n          });\n\n        this._clearDragStyles();\n\n        const event = new CustomEvent('grid-drop', {\n          bubbles: e.bubbles,\n          cancelable: e.cancelable,\n          detail: {\n            dropTargetItem: this._dragOverItem,\n            dropLocation: this._dropLocation,\n            dragData\n          }\n        });\n        event.originalEvent = e;\n        this.dispatchEvent(event);\n      }\n    }\n\n    /** @private */\n    __formatDefaultTransferData(rows) {\n      return rows\n        .map((row) => {\n          return Array.from(row.children)\n            .filter((cell) => !cell.hidden && cell.getAttribute('part').indexOf('details-cell') === -1)\n            .sort((a, b) => {\n              return a._column._order > b._column._order ? 1 : -1;\n            })\n            .map((cell) => cell._content.textContent.trim())\n            .filter((content) => content)\n            .join('\\t');\n        })\n        .join('\\n');\n    }\n\n    /** @private */\n    _dragDropAccessChanged() {\n      this.filterDragAndDrop();\n    }\n\n    /**\n     * Runs the `dragFilter` and `dropFilter` hooks for the visible cells.\n     * If the filter depends on varying conditions, you may need to\n     * call this function manually in order to update the draggability when\n     * the conditions change.\n     */\n    filterDragAndDrop() {\n      Array.from(this.$.items.children)\n        .filter((row) => !row.hidden)\n        .forEach((row) => {\n          this._filterDragAndDrop(row, this.__getRowModel(row));\n        });\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {!GridItemModel} model\n     * @protected\n     */\n    _filterDragAndDrop(row, model) {\n      const loading = this.loading || row.hasAttribute('loading');\n      const dragDisabled = !this.rowsDraggable || loading || (this.dragFilter && !this.dragFilter(model));\n      const dropDisabled = !this.dropMode || loading || (this.dropFilter && !this.dropFilter(model));\n\n      const draggableElements = Array.from(row.children).map((cell) => cell._content);\n\n      draggableElements.forEach((e) => {\n        if (dragDisabled) {\n          e.removeAttribute('draggable');\n        } else {\n          e.setAttribute('draggable', true);\n        }\n      });\n\n      row.toggleAttribute('drag-disabled', !!dragDisabled);\n      row.toggleAttribute('drop-disabled', !!dropDisabled);\n    }\n\n    /**\n     * Fired when starting to drag grid rows.\n     *\n     * @event grid-dragstart\n     * @param {Object} originalEvent The native dragstart event\n     * @param {Object} detail\n     * @param {Object} detail.draggedItems the items in the visible viewport that are dragged\n     * @param {Function} detail.setDraggedItemsCount Overrides the default number shown in the drag image on multi row drag.\n     * Parameter is of type number.\n     * @param {Function} detail.setDragData Sets dataTransfer data for the drag operation.\n     * Note that \"text\" is the only data type supported by all the browsers the grid currently supports (including IE11).\n     * The function takes two parameters:\n     * - type:string The type of the data\n     * - data:string The data\n     */\n\n    /**\n     * Fired when the dragging of the rows ends.\n     *\n     * @event grid-dragend\n     * @param {Object} originalEvent The native dragend event\n     */\n\n    /**\n     * Fired when a drop occurs on top of the grid.\n     *\n     * @event grid-drop\n     * @param {Object} originalEvent The native drop event\n     * @param {Object} detail\n     * @param {Object} detail.dropTargetItem The item of the grid row on which the drop occurred.\n     * @param {string} detail.dropLocation The position at which the drop event took place relative to a row.\n     * Depending on the dropMode value, the drop location can be one of the following\n     * - `on-top`: when the drop occurred on top of the row\n     * - `above`: when the drop occurred above the row\n     * - `below`: when the drop occurred below the row\n     * - `empty`: when the drop occurred over the grid, not relative to any specific row\n     * @param {string} detail.dragData An array of items with the payload as a string representation as the\n     * `data` property and the type of the data as `type` property.\n     */\n  };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { FlattenedNodesObserver } from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { timeOut } from '@vaadin/component-base/src/async.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\n\n/**\n * @polymerMixin\n */\nexport const DynamicColumnsMixin = (superClass) =>\n  class DynamicColumnsMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * @protected\n         */\n        _columnTree: Object\n      };\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n      this._addNodeObserver();\n    }\n\n    /** @private */\n    _hasColumnGroups(columns) {\n      for (let i = 0; i < columns.length; i++) {\n        if (columns[i].localName === 'vaadin-grid-column-group') {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * @param {!GridColumnGroup} el\n     * @return {!Array<!GridColumn>}\n     * @protected\n     */\n    _getChildColumns(el) {\n      return FlattenedNodesObserver.getFlattenedNodes(el).filter(this._isColumnElement);\n    }\n\n    /** @private */\n    _flattenColumnGroups(columns) {\n      return columns\n        .map((col) => {\n          if (col.localName === 'vaadin-grid-column-group') {\n            return this._getChildColumns(col);\n          } else {\n            return [col];\n          }\n        })\n        .reduce((prev, curr) => {\n          return prev.concat(curr);\n        }, []);\n    }\n\n    /** @private */\n    _getColumnTree() {\n      const rootColumns = FlattenedNodesObserver.getFlattenedNodes(this).filter(this._isColumnElement);\n      const columnTree = [];\n\n      for (let c = rootColumns; ; ) {\n        columnTree.push(c);\n        if (!this._hasColumnGroups(c)) {\n          break;\n        }\n        c = this._flattenColumnGroups(c);\n      }\n\n      return columnTree;\n    }\n\n    /** @protected */\n    _updateColumnTree() {\n      const columnTree = this._getColumnTree();\n      if (!this._arrayEquals(columnTree, this._columnTree)) {\n        this._columnTree = columnTree;\n      }\n    }\n\n    /** @private */\n    _addNodeObserver() {\n      this._observer = new FlattenedNodesObserver(this, (info) => {\n        const hasColumnElements = (nodeCollection) => nodeCollection.filter(this._isColumnElement).length > 0;\n        if (hasColumnElements(info.addedNodes) || hasColumnElements(info.removedNodes)) {\n          const allRemovedCells = info.removedNodes.flatMap((c) => c._allCells);\n          const filterNotConnected = (element) =>\n            allRemovedCells.filter((cell) => cell._content.contains(element)).length;\n\n          this.__removeSorters(this._sorters.filter(filterNotConnected));\n          this.__removeFilters(this._filters.filter(filterNotConnected));\n          this._updateColumnTree();\n        }\n\n        this._debouncerCheckImports = Debouncer.debounce(\n          this._debouncerCheckImports,\n          timeOut.after(2000),\n          this._checkImports.bind(this)\n        );\n\n        this._ensureFirstPageLoaded();\n      });\n    }\n\n    /** @private */\n    _arrayEquals(arr1, arr2) {\n      if (!arr1 || !arr2 || arr1.length != arr2.length) {\n        return false;\n      }\n\n      for (let i = 0, l = arr1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (arr1[i] instanceof Array && arr2[i] instanceof Array) {\n          // recurse into the nested arrays\n          if (!this._arrayEquals(arr1[i], arr2[i])) {\n            return false;\n          }\n        } else if (arr1[i] != arr2[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /** @protected */\n    _checkImports() {\n      [\n        'vaadin-grid-column-group',\n        'vaadin-grid-filter',\n        'vaadin-grid-filter-column',\n        'vaadin-grid-tree-toggle',\n        'vaadin-grid-selection-column',\n        'vaadin-grid-sort-column',\n        'vaadin-grid-sorter'\n      ].forEach((elementName) => {\n        const element = this.querySelector(elementName);\n        if (element && !(element instanceof PolymerElement)) {\n          console.warn(`Make sure you have imported the required module for <${elementName}> element.`);\n        }\n      });\n    }\n\n    /** @protected */\n    _updateFirstAndLastColumn() {\n      Array.from(this.shadowRoot.querySelectorAll('tr')).forEach((row) => this._updateFirstAndLastColumnForRow(row));\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @protected\n     */\n    _updateFirstAndLastColumnForRow(row) {\n      Array.from(row.querySelectorAll('[part~=\"cell\"]:not([part~=\"details-cell\"])'))\n        .sort((a, b) => {\n          return a._column._order - b._column._order;\n        })\n        .forEach((cell, cellIndex, children) => {\n          cell.toggleAttribute('first-column', cellIndex === 0);\n          cell.toggleAttribute('last-column', cellIndex === children.length - 1);\n        });\n    }\n\n    /**\n     * @param {!Node} node\n     * @return {boolean}\n     * @protected\n     */\n    _isColumnElement(node) {\n      return node.nodeType === Node.ELEMENT_NODE && /\\bcolumn\\b/.test(node.localName);\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @polymerMixin\n */\nexport const EventContextMixin = (superClass) =>\n  class EventContextMixin extends superClass {\n    /**\n     * Returns an object with context information about the event target:\n     * - `item`: the data object corresponding to the targeted row (not specified when targeting header or footer)\n     * - `column`: the column element corresponding to the targeted cell (not specified when targeting row details)\n     * - `section`: whether the event targeted the body, header, footer or details of the grid\n     *\n     * These additional properties are included when `item` is specified:\n     * - `index`: the index of the item\n     * - `selected`: the selected state of the item\n     * - `detailsOpened`: whether the row details are open for the item\n     * - `expanded`: the expanded state of the tree toggle\n     * - `level`: the tree hierarchy level\n     *\n     * The returned object is populated only when a grid cell, header, footer or row details is found in `event.composedPath()`.\n     * This means mostly mouse and keyboard events. If such a grid part is not found in the path, an empty object is returned.\n     * This may be the case eg. if the event is fired on the `<vaadin-grid>` element and not any deeper in the DOM, or if\n     * the event targets the empty part of the grid body.\n     *\n     * @param {!Event} event\n     * @return {GridEventContext}\n     */\n    getEventContext(event) {\n      const context = {};\n\n      const path = event.composedPath();\n      const cell = path[path.indexOf(this.$.table) - 3];\n\n      if (!cell) {\n        return context;\n      }\n\n      context.section = ['body', 'header', 'footer', 'details'].filter(\n        (section) => cell.getAttribute('part').indexOf(section) > -1\n      )[0];\n\n      if (cell._column) {\n        context.column = cell._column;\n      }\n\n      if (context.section === 'body' || context.section === 'details') {\n        Object.assign(context, this.__getRowModel(cell.parentElement));\n      }\n\n      return context;\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @polymerMixin\n */\nexport const FilterMixin = (superClass) =>\n  class FilterMixin extends superClass {\n    static get properties() {\n      return {\n        /** @private */\n        _filters: {\n          type: Array,\n          value: function () {\n            return [];\n          }\n        }\n      };\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n      this.addEventListener('filter-changed', this._filterChanged.bind(this));\n    }\n\n    /** @private */\n    _filterChanged(e) {\n      e.stopPropagation();\n\n      this.__addFilter(e.target);\n      this.__applyFilters();\n    }\n\n    /** @private */\n    __removeFilters(filtersToRemove) {\n      if (filtersToRemove.length == 0) {\n        return;\n      }\n\n      this._filters = this._filters.filter((filter) => filtersToRemove.indexOf(filter) < 0);\n      this.__applyFilters();\n    }\n\n    /** @private */\n    __addFilter(filter) {\n      const filterIndex = this._filters.indexOf(filter);\n\n      if (filterIndex === -1) {\n        this._filters.push(filter);\n      }\n    }\n\n    /** @private */\n    __applyFilters() {\n      if (this.dataProvider && this.isAttached) {\n        this.clearCache();\n      }\n    }\n\n    /**\n     * @return {!Array<!GridFilterDefinition>}\n     * @protected\n     */\n    _mapFilters() {\n      return this._filters.map((filter) => {\n        return {\n          path: filter.path,\n          value: filter.value\n        };\n      });\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @polymerMixin\n */\nexport const KeyboardNavigationMixin = (superClass) =>\n  class KeyboardNavigationMixin extends superClass {\n    static get properties() {\n      return {\n        /** @private */\n        _headerFocusable: {\n          type: Object,\n          observer: '_focusableChanged'\n        },\n\n        /**\n         * @type {!HTMLElement | undefined}\n         * @protected\n         */\n        _itemsFocusable: {\n          type: Object,\n          observer: '_focusableChanged'\n        },\n\n        /** @private */\n        _footerFocusable: {\n          type: Object,\n          observer: '_focusableChanged'\n        },\n\n        /** @private */\n        _navigatingIsHidden: Boolean,\n\n        /**\n         * @type {number}\n         * @protected\n         */\n        _focusedItemIndex: {\n          type: Number,\n          value: 0\n        },\n\n        /** @private */\n        _focusedColumnOrder: Number,\n\n        /**\n         * Indicates whether the grid is currently in interaction mode.\n         * In interaction mode the user is currently interacting with a control,\n         * such as an input or a select, within a cell.\n         * In interaction mode keyboard navigation between cells is disabled.\n         * Interaction mode also prevents the focus target cell of that section of\n         * the grid from receiving focus, allowing the user to switch focus to\n         * controls in adjacent cells, rather than focussing the outer cell\n         * itself.\n         * @type {boolean}\n         * @private\n         */\n        interacting: {\n          type: Boolean,\n          value: false,\n          reflectToAttribute: true,\n          readOnly: true,\n          observer: '_interactingChanged'\n        }\n      };\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      if (this._ios || this._android) {\n        // Disable keyboard navigation on mobile devices\n        return;\n      }\n\n      this.addEventListener('keydown', this._onKeyDown);\n      this.addEventListener('keyup', this._onKeyUp);\n\n      this.addEventListener('focusin', this._onFocusIn);\n      this.addEventListener('focusout', this._onFocusOut);\n\n      // When focus goes from cell to another cell, focusin/focusout events do\n      // not escape the grid\u2019s shadowRoot, thus listening inside the shadowRoot.\n      this.$.table.addEventListener('focusin', this._onContentFocusIn.bind(this));\n\n      this.addEventListener('mousedown', () => {\n        this.toggleAttribute('navigating', false);\n        this._isMousedown = true;\n      });\n      this.addEventListener('mouseup', () => (this._isMousedown = false));\n    }\n\n    /** @private */\n    get __rowFocusMode() {\n      return (\n        this.__isRow(this._itemsFocusable) || this.__isRow(this._headerFocusable) || this.__isRow(this._footerFocusable)\n      );\n    }\n\n    set __rowFocusMode(value) {\n      ['_itemsFocusable', '_footerFocusable', '_headerFocusable'].forEach((focusable) => {\n        if (value && this.__isCell(this[focusable])) {\n          this[focusable] = this[focusable].parentElement;\n        } else if (!value && this.__isRow(this[focusable])) {\n          this[focusable] = this[focusable].firstElementChild;\n        }\n      });\n    }\n\n    /** @private */\n    _focusableChanged(focusable, oldFocusable) {\n      if (oldFocusable) {\n        oldFocusable.setAttribute('tabindex', '-1');\n      }\n      if (focusable) {\n        this._updateGridSectionFocusTarget(focusable);\n      }\n    }\n\n    /** @private */\n    _interactingChanged() {\n      // Update focus targets when entering / exiting interaction mode\n      this._updateGridSectionFocusTarget(this._headerFocusable);\n      this._updateGridSectionFocusTarget(this._itemsFocusable);\n      this._updateGridSectionFocusTarget(this._footerFocusable);\n    }\n\n    /**\n     * @param {!KeyboardEvent} e\n     * @protected\n     */\n    _onKeyDown(e) {\n      const key = e.key;\n\n      let keyGroup;\n      switch (key) {\n        case 'ArrowUp':\n        case 'ArrowDown':\n        case 'ArrowLeft':\n        case 'ArrowRight':\n        case 'PageUp':\n        case 'PageDown':\n        case 'Home':\n        case 'End':\n          keyGroup = 'Navigation';\n          break;\n        case 'Enter':\n        case 'Escape':\n        case 'F2':\n          keyGroup = 'Interaction';\n          break;\n        case 'Tab':\n          keyGroup = 'Tab';\n          break;\n        case ' ':\n          keyGroup = 'Space';\n          break;\n      }\n\n      this._detectInteracting(e);\n      if (this.interacting && keyGroup !== 'Interaction') {\n        // When in the interacting mode, only the \u201CInteraction\u201D keys are handled.\n        keyGroup = undefined;\n      }\n\n      if (keyGroup) {\n        this[`_on${keyGroup}KeyDown`](e, key);\n      }\n    }\n\n    /** @private */\n    _ensureScrolledToIndex(index) {\n      const targetRowInDom = [...this.$.items.children].find((child) => child.index === index);\n      if (!targetRowInDom) {\n        this.scrollToIndex(index);\n      } else {\n        this.__scrollIntoViewport(index);\n      }\n    }\n\n    // TODO: A tree toggle component should not be the way to determine if the row is expandable\n    /** @private */\n    __isRowExpandable(row) {\n      const treeToggle = [...row.children].reduce(\n        (value, cell) => value || cell._content.querySelector('vaadin-grid-tree-toggle'),\n        null\n      );\n      return treeToggle && !treeToggle.expanded && !treeToggle.leaf;\n    }\n\n    /** @private */\n    __isRowCollapsible(row) {\n      return this._isExpanded(row._item);\n    }\n\n    /** @private */\n    __isDetailsCell(element) {\n      return element.matches('[part~=\"details-cell\"]');\n    }\n\n    /** @private */\n    __isCell(element) {\n      return element instanceof HTMLTableCellElement;\n    }\n\n    /** @private */\n    __isRow(element) {\n      return element instanceof HTMLTableRowElement;\n    }\n\n    /** @private */\n    __getIndexOfChildElement(el) {\n      return Array.prototype.indexOf.call(el.parentNode.children, el);\n    }\n\n    /** @private */\n    _onNavigationKeyDown(e, key) {\n      e.preventDefault();\n\n      const visibleItemsCount = this._lastVisibleIndex - this._firstVisibleIndex - 1;\n\n      // Handle keyboard interaction as defined in:\n      // https://w3c.github.io/aria-practices/#keyboard-interaction-24\n\n      let dx = 0,\n        dy = 0;\n      switch (key) {\n        case 'ArrowRight':\n          dx = this.__isRTL ? -1 : 1;\n          break;\n        case 'ArrowLeft':\n          dx = this.__isRTL ? 1 : -1;\n          break;\n        case 'Home':\n          if (this.__rowFocusMode) {\n            // \"If focus is on a row, moves focus to the first row. If focus is in the first row, focus does not move.\"\n            dy = -Infinity;\n          } else {\n            if (e.ctrlKey) {\n              // \"If focus is on a cell, moves focus to the first cell in the column. If focus is in the first row, focus does not move.\"\n              dy = -Infinity;\n            } else {\n              // \"If focus is on a cell, moves focus to the first cell in the row. If focus is in the first cell of the row, focus does not move.\"\n              dx = -Infinity;\n            }\n          }\n          break;\n        case 'End':\n          if (this.__rowFocusMode) {\n            // \"If focus is on a row, moves focus to the last row. If focus is in the last row, focus does not move.\"\n            dy = Infinity;\n          } else {\n            if (e.ctrlKey) {\n              // \"If focus is on a cell, moves focus to the last cell in the column. If focus is in the last row, focus does not move.\"\n              dy = Infinity;\n            } else {\n              // \"If focus is on a cell, moves focus to the last cell in the row. If focus is in the last cell of the row, focus does not move.\"\n              dx = Infinity;\n            }\n          }\n          break;\n        case 'ArrowDown':\n          dy = 1;\n          break;\n        case 'ArrowUp':\n          dy = -1;\n          break;\n        case 'PageDown':\n          dy = visibleItemsCount;\n          break;\n        case 'PageUp':\n          dy = -visibleItemsCount;\n          break;\n      }\n\n      const activeRow = e.composedPath().find((el) => this.__isRow(el));\n      const activeCell = e.composedPath().find((el) => this.__isCell(el));\n\n      if ((this.__rowFocusMode && !activeRow) || (!this.__rowFocusMode && !activeCell)) {\n        // When using a screen reader, it's possible that neither a cell nor a row is focused.\n        return;\n      }\n\n      const forwardsKey = this.__isRTL ? 'ArrowLeft' : 'ArrowRight';\n      const backwardsKey = this.__isRTL ? 'ArrowRight' : 'ArrowLeft';\n      if (key === forwardsKey) {\n        // \"Right Arrow:\"\n        if (this.__rowFocusMode) {\n          // In row focus mode\n          if (this.__isRowExpandable(activeRow)) {\n            // \"If focus is on a collapsed row, expands the row.\"\n            this.expandItem(activeRow._item);\n            return;\n          } else {\n            // \"If focus is on an expanded row or is on a row that does not have child rows,\n            // moves focus to the first cell in the row.\"\n            this.__rowFocusMode = false;\n            this._onCellNavigation(activeRow.firstElementChild, 0, 0);\n            return;\n          }\n        }\n      } else if (key === backwardsKey) {\n        // \"Left Arrow:\"\n        if (this.__rowFocusMode) {\n          // In row focus mode\n          if (this.__isRowCollapsible(activeRow)) {\n            // \"If focus is on an expanded row, collapses the row.\"\n            this.collapseItem(activeRow._item);\n            return;\n          }\n        } else {\n          // In cell focus mode\n          const activeRowCells = [...activeRow.children].sort((a, b) => a._order - b._order);\n          if (activeCell === activeRowCells[0] || this.__isDetailsCell(activeCell)) {\n            // \"If focus is on the first cell in a row and row focus is supported, moves focus to the row.\"\n            this.__rowFocusMode = true;\n            this._onRowNavigation(activeRow, 0);\n            return;\n          }\n        }\n      }\n\n      // Navigate\n      if (this.__rowFocusMode) {\n        // Navigate the rows\n        this._onRowNavigation(activeRow, dy);\n      } else {\n        // Navigate the cells\n        this._onCellNavigation(activeCell, dx, dy);\n      }\n    }\n\n    /**\n     * Focuses the target row after navigating by the given dy offset.\n     * If the row is not in the viewport, it is first scrolled to.\n     * @private\n     **/\n    _onRowNavigation(activeRow, dy) {\n      const { dstRow } = this.__navigateRows(dy, activeRow);\n\n      if (dstRow) {\n        dstRow.focus();\n      }\n    }\n\n    /** @private */\n    __getIndexInGroup(row, bodyFallbackIndex) {\n      const rowGroup = row.parentNode;\n      // Body rows have index property, otherwise DOM child index of the row is used.\n      if (rowGroup === this.$.items) {\n        return bodyFallbackIndex !== undefined ? bodyFallbackIndex : row.index;\n      } else {\n        return this.__getIndexOfChildElement(row);\n      }\n    }\n\n    /**\n     * Returns the target row after navigating by the given dy offset.\n     * Also returns infromation whether the details cell should be the target on the target row.\n     * If the row is not in the viewport, it is first scrolled to.\n     * @private\n     **/\n    __navigateRows(dy, activeRow, activeCell) {\n      const currentRowIndex = this.__getIndexInGroup(activeRow, this._focusedItemIndex);\n      const activeRowGroup = activeRow.parentNode;\n      const maxRowIndex = (activeRowGroup === this.$.items ? this._effectiveSize : activeRowGroup.children.length) - 1;\n\n      // Index of the destination row\n      let dstRowIndex = Math.max(0, Math.min(currentRowIndex + dy, maxRowIndex));\n\n      if (activeRowGroup !== this.$.items) {\n        // Navigating header/footer rows\n\n        // Header and footer could have hidden rows, e. g., if none of the columns\n        // or groups on the given column tree level define template. Skip them\n        // in vertical keyboard navigation.\n        if (dstRowIndex > currentRowIndex) {\n          while (dstRowIndex < maxRowIndex && activeRowGroup.children[dstRowIndex].hidden) {\n            dstRowIndex++;\n          }\n        } else if (dstRowIndex < currentRowIndex) {\n          while (dstRowIndex > 0 && activeRowGroup.children[dstRowIndex].hidden) {\n            dstRowIndex--;\n          }\n        }\n\n        this.toggleAttribute('navigating', true);\n\n        return { dstRow: activeRowGroup.children[dstRowIndex] };\n      } else {\n        // Navigating body rows\n\n        let dstIsRowDetails = false;\n        if (activeCell) {\n          const isRowDetails = this.__isDetailsCell(activeCell);\n          // Row details navigation logic\n          if (activeRowGroup === this.$.items) {\n            const item = activeRow._item;\n            const dstItem = this._cache.getItemForIndex(dstRowIndex);\n            // Should we navigate to row details?\n            if (isRowDetails) {\n              dstIsRowDetails = dy === 0;\n            } else {\n              dstIsRowDetails =\n                (dy === 1 && this._isDetailsOpened(item)) ||\n                (dy === -1 && dstRowIndex !== currentRowIndex && this._isDetailsOpened(dstItem));\n            }\n            // Should we navigate between details and regular cells of the same row?\n            if (\n              dstIsRowDetails !== isRowDetails &&\n              ((dy === 1 && dstIsRowDetails) || (dy === -1 && !dstIsRowDetails))\n            ) {\n              dstRowIndex = currentRowIndex;\n            }\n          }\n        }\n\n        // Ensure correct vertical scroll position, destination row is visible\n        this._ensureScrolledToIndex(dstRowIndex);\n\n        // When scrolling with repeated keydown, sometimes FocusEvent listeners\n        // are too late to update _focusedItemIndex. Ensure next keydown\n        // listener invocation gets updated _focusedItemIndex value.\n        this._focusedItemIndex = dstRowIndex;\n\n        // This has to be set after scrolling, otherwise it can be removed by\n        // `_preventScrollerRotatingCellFocus(row, index)` during scrolling.\n        this.toggleAttribute('navigating', true);\n\n        return {\n          dstRow: [...activeRowGroup.children].find((el) => !el.hidden && el.index === dstRowIndex),\n          dstIsRowDetails\n        };\n      }\n    }\n\n    /**\n     * Focuses the target cell after navigating by the given dx and dy offset.\n     * If the cell is not in the viewport, it is first scrolled to.\n     * @private\n     **/\n    _onCellNavigation(activeCell, dx, dy) {\n      const activeRow = activeCell.parentNode;\n      const { dstRow, dstIsRowDetails } = this.__navigateRows(dy, activeRow, activeCell);\n      if (!dstRow) {\n        return;\n      }\n\n      const columnIndex = this.__getIndexOfChildElement(activeCell);\n      const isCurrentCellRowDetails = this.__isDetailsCell(activeCell);\n      const activeRowGroup = activeRow.parentNode;\n      const currentRowIndex = this.__getIndexInGroup(activeRow, this._focusedItemIndex);\n\n      // _focusedColumnOrder is memoized \u2014 this is to ensure predictable\n      // navigation when entering and leaving detail and column group cells.\n      if (this._focusedColumnOrder === undefined) {\n        if (isCurrentCellRowDetails) {\n          this._focusedColumnOrder = 0;\n        } else {\n          this._focusedColumnOrder = this._getColumns(activeRowGroup, currentRowIndex).filter((c) => !c.hidden)[\n            columnIndex\n          ]._order;\n        }\n      }\n\n      if (dstIsRowDetails) {\n        // Focusing a row details cell on the destination row\n        const dstCell = [...dstRow.children].find((el) => this.__isDetailsCell(el));\n        dstCell.focus();\n      } else {\n        // Focusing a regular cell on the destination row\n\n        // Find orderedColumnIndex \u2014 the index of order closest matching the\n        // original _focusedColumnOrder in the sorted array of orders\n        // of the visible columns on the destination row.\n        const dstRowIndex = this.__getIndexInGroup(dstRow, this._focusedItemIndex);\n        const dstColumns = this._getColumns(activeRowGroup, dstRowIndex).filter((c) => !c.hidden);\n        const dstSortedColumnOrders = dstColumns.map((c) => c._order).sort((b, a) => b - a);\n        const maxOrderedColumnIndex = dstSortedColumnOrders.length - 1;\n        const orderedColumnIndex = dstSortedColumnOrders.indexOf(\n          dstSortedColumnOrders\n            .slice(0)\n            .sort((b, a) => Math.abs(b - this._focusedColumnOrder) - Math.abs(a - this._focusedColumnOrder))[0]\n        );\n\n        // Index of the destination column order\n        const dstOrderedColumnIndex =\n          dy === 0 && isCurrentCellRowDetails\n            ? orderedColumnIndex\n            : Math.max(0, Math.min(orderedColumnIndex + dx, maxOrderedColumnIndex));\n\n        if (dstOrderedColumnIndex !== orderedColumnIndex) {\n          // Horizontal movement invalidates stored _focusedColumnOrder\n          this._focusedColumnOrder = undefined;\n        }\n\n        const columnIndexByOrder = dstColumns.reduce((acc, col, i) => ((acc[col._order] = i), acc), {});\n        const dstColumnIndex = columnIndexByOrder[dstSortedColumnOrders[dstOrderedColumnIndex]];\n        const dstCell = dstRow.children[dstColumnIndex];\n\n        this._scrollHorizontallyToCell(dstCell);\n        dstCell.focus();\n      }\n    }\n\n    /** @private */\n    _onInteractionKeyDown(e, key) {\n      const localTarget = e.composedPath()[0];\n      const localTargetIsTextInput =\n        localTarget.localName === 'input' &&\n        !/^(button|checkbox|color|file|image|radio|range|reset|submit)$/i.test(localTarget.type);\n\n      let wantInteracting;\n      switch (key) {\n        case 'Enter':\n          wantInteracting = this.interacting ? !localTargetIsTextInput : true;\n          break;\n        case 'Escape':\n          wantInteracting = false;\n          break;\n        case 'F2':\n          wantInteracting = !this.interacting;\n          break;\n      }\n\n      const { cell } = this._getGridEventLocation(e);\n\n      if (this.interacting !== wantInteracting && cell !== null) {\n        if (wantInteracting) {\n          const focusTarget = cell._content.querySelector('[focus-target]') || cell._content.firstElementChild;\n          if (focusTarget) {\n            e.preventDefault();\n            focusTarget.focus();\n            this._setInteracting(true);\n            this.toggleAttribute('navigating', false);\n          }\n        } else {\n          e.preventDefault();\n          this._focusedColumnOrder = undefined;\n          cell.focus();\n          this._setInteracting(false);\n          this.toggleAttribute('navigating', true);\n        }\n      }\n    }\n\n    /** @private */\n    _predictFocusStepTarget(srcElement, step) {\n      const tabOrder = [\n        this.$.table,\n        this._headerFocusable,\n        this._itemsFocusable,\n        this._footerFocusable,\n        this.$.focusexit\n      ];\n\n      let index = tabOrder.indexOf(srcElement);\n\n      index += step;\n      while (index >= 0 && index <= tabOrder.length - 1) {\n        let rowElement = tabOrder[index];\n        if (rowElement && !this.__rowFocusMode) {\n          rowElement = tabOrder[index].parentNode;\n        }\n\n        if (!rowElement || rowElement.hidden) {\n          index += step;\n        } else {\n          break;\n        }\n      }\n\n      return tabOrder[index];\n    }\n\n    /** @private */\n    _onTabKeyDown(e) {\n      const focusTarget = this._predictFocusStepTarget(e.composedPath()[0], e.shiftKey ? -1 : 1);\n\n      if (focusTarget === this.$.table) {\n        // The focus is about to exit the grid to the top.\n        this.$.table.focus();\n      } else if (focusTarget === this.$.focusexit) {\n        // The focus is about to exit the grid to the bottom.\n        this.$.focusexit.focus();\n      } else if (focusTarget === this._itemsFocusable) {\n        let itemsFocusTarget = focusTarget;\n        const targetRow = this.__isRow(focusTarget) ? focusTarget : focusTarget.parentNode;\n        this._ensureScrolledToIndex(this._focusedItemIndex);\n        if (targetRow.index !== this._focusedItemIndex && this.__isCell(focusTarget)) {\n          // The target row, which is about to be focused next, has been\n          // assigned with a new index since last focus, probably because of\n          // scrolling. Focus the row for the stored focused item index instead.\n          const columnIndex = Array.from(targetRow.children).indexOf(this._itemsFocusable);\n          const focusedItemRow = Array.from(this.$.items.children).find(\n            (row) => !row.hidden && row.index === this._focusedItemIndex\n          );\n          if (focusedItemRow) {\n            itemsFocusTarget = focusedItemRow.children[columnIndex];\n          }\n        }\n        e.preventDefault();\n        itemsFocusTarget.focus();\n      } else {\n        e.preventDefault();\n        focusTarget.focus();\n      }\n\n      this.toggleAttribute('navigating', true);\n    }\n\n    /** @private */\n    _onSpaceKeyDown(e) {\n      e.preventDefault();\n\n      const element = e.composedPath()[0];\n      const isRow = this.__isRow(element);\n      if (isRow || !element._content || !element._content.firstElementChild) {\n        this.dispatchEvent(\n          new CustomEvent(isRow ? 'row-activate' : 'cell-activate', {\n            detail: {\n              model: this.__getRowModel(isRow ? element : element.parentElement)\n            }\n          })\n        );\n      }\n    }\n\n    /** @private */\n    _onKeyUp(e) {\n      if (!/^( |SpaceBar)$/.test(e.key) || this.interacting) {\n        return;\n      }\n\n      e.preventDefault();\n\n      const cell = e.composedPath()[0];\n      if (cell._content && cell._content.firstElementChild) {\n        const wasNavigating = this.hasAttribute('navigating');\n        cell._content.firstElementChild.click();\n        this.toggleAttribute('navigating', wasNavigating);\n      }\n    }\n\n    /**\n     * @param {!FocusEvent} e\n     * @protected\n     */\n    _onFocusIn(e) {\n      if (!this._isMousedown) {\n        this.toggleAttribute('navigating', true);\n      }\n\n      const rootTarget = e.composedPath()[0];\n\n      if (rootTarget === this.$.table || rootTarget === this.$.focusexit) {\n        // The focus enters the top (bottom) of the grid, meaning that user has\n        // tabbed (shift-tabbed) into the grid. Move the focus to\n        // the first (the last) focusable.\n        this._predictFocusStepTarget(rootTarget, rootTarget === this.$.table ? 1 : -1).focus();\n        this._setInteracting(false);\n      } else {\n        this._detectInteracting(e);\n      }\n    }\n\n    /**\n     * @param {!FocusEvent} e\n     * @protected\n     */\n    _onFocusOut(e) {\n      this.toggleAttribute('navigating', false);\n      this._detectInteracting(e);\n    }\n\n    /** @private */\n    _onContentFocusIn(e) {\n      const { section, cell, row } = this._getGridEventLocation(e);\n      this._detectInteracting(e);\n\n      if (section && (cell || row)) {\n        this._activeRowGroup = section;\n        if (this.$.header === section) {\n          this._headerFocusable = this.__rowFocusMode ? row : cell;\n        } else if (this.$.items === section) {\n          this._itemsFocusable = this.__rowFocusMode ? row : cell;\n        } else if (this.$.footer === section) {\n          this._footerFocusable = this.__rowFocusMode ? row : cell;\n        }\n\n        if (cell) {\n          // Fire a public event for cell.\n          const context = this.getEventContext(e);\n          cell.dispatchEvent(\n            new CustomEvent('cell-focus', { bubbles: true, composed: true, detail: { context: context } })\n          );\n        }\n      }\n\n      this._detectFocusedItemIndex(e);\n    }\n\n    /** @private\n     * Enables interaction mode if a cells descendant receives focus or keyboard\n     * input. Disables it if the event is not related to cell content.\n     * @param {!KeyboardEvent|!FocusEvent} e\n     */\n    _detectInteracting(e) {\n      const isInteracting = e.composedPath().some((el) => el.localName === 'vaadin-grid-cell-content');\n      this._setInteracting(isInteracting);\n    }\n\n    /** @private */\n    _detectFocusedItemIndex(e) {\n      const { section, row } = this._getGridEventLocation(e);\n      if (section === this.$.items) {\n        this._focusedItemIndex = row.index;\n      }\n    }\n\n    /** @private\n     * Enables or disables the focus target of the containing section of the\n     * grid from receiving focus, based on whether the user is interacting with\n     * that section of the grid.\n     * @param {HTMLElement} focusTarget\n     */\n    _updateGridSectionFocusTarget(focusTarget) {\n      if (!focusTarget) return;\n\n      const section = this._getGridSectionFromFocusTarget(focusTarget);\n      const isInteractingWithinActiveSection = this.interacting && section === this._activeRowGroup;\n\n      focusTarget.tabIndex = isInteractingWithinActiveSection ? -1 : 0;\n    }\n\n    /**\n     * @param {!HTMLTableRowElement} row\n     * @param {number} index\n     * @protected\n     */\n    _preventScrollerRotatingCellFocus(row, index) {\n      if (\n        row.index === this._focusedItemIndex &&\n        this.hasAttribute('navigating') &&\n        this._activeRowGroup === this.$.items\n      ) {\n        // Focused item has went, hide navigation mode\n        this._navigatingIsHidden = true;\n        this.toggleAttribute('navigating', false);\n      }\n      if (index === this._focusedItemIndex && this._navigatingIsHidden) {\n        // Focused item is back, restore navigation mode\n        this._navigatingIsHidden = false;\n        this.toggleAttribute('navigating', true);\n      }\n    }\n\n    /**\n     * @param {HTMLTableSectionElement=} rowGroup\n     * @param {number=} rowIndex\n     * @return {!Array<!GridColumn>}\n     * @protected\n     */\n    _getColumns(rowGroup, rowIndex) {\n      let columnTreeLevel = this._columnTree.length - 1;\n      if (rowGroup === this.$.header) {\n        columnTreeLevel = rowIndex;\n      } else if (rowGroup === this.$.footer) {\n        columnTreeLevel = this._columnTree.length - 1 - rowIndex;\n      }\n      return this._columnTree[columnTreeLevel];\n    }\n\n    /** @private */\n    __isValidFocusable(element) {\n      return this.$.table.contains(element) && element.offsetHeight;\n    }\n\n    /** @protected */\n    _resetKeyboardNavigation() {\n      // Header / footer\n      ['header', 'footer'].forEach((section) => {\n        if (!this.__isValidFocusable(this[`_${section}Focusable`])) {\n          const firstVisibleRow = [...this.$[section].children].find((row) => row.offsetHeight);\n          const firstVisibleCell = firstVisibleRow ? [...firstVisibleRow.children].find((cell) => !cell.hidden) : null;\n          if (firstVisibleRow && firstVisibleCell) {\n            this[`_${section}Focusable`] = this.__rowFocusMode ? firstVisibleRow : firstVisibleCell;\n          }\n        }\n      });\n\n      // Body\n      if (!this.__isValidFocusable(this._itemsFocusable) && this.$.items.firstElementChild) {\n        const firstVisibleRow = this.__getFirstVisibleItem();\n        const firstVisibleCell = firstVisibleRow ? [...firstVisibleRow.children].find((cell) => !cell.hidden) : null;\n\n        if (firstVisibleCell && firstVisibleRow) {\n          // Reset memoized column\n          delete this._focusedColumnOrder;\n          this._itemsFocusable = this.__rowFocusMode ? firstVisibleRow : firstVisibleCell;\n        }\n      }\n    }\n\n    /**\n     * @param {!HTMLElement} dstCell\n     * @protected\n     */\n    _scrollHorizontallyToCell(dstCell) {\n      if (dstCell.hasAttribute('frozen') || this.__isDetailsCell(dstCell)) {\n        // These cells are, by design, always visible, no need to scroll.\n        return;\n      }\n\n      const dstCellRect = dstCell.getBoundingClientRect();\n      const dstRow = dstCell.parentNode;\n      const dstCellIndex = Array.from(dstRow.children).indexOf(dstCell);\n      const tableRect = this.$.table.getBoundingClientRect();\n      let leftBoundary = tableRect.left,\n        rightBoundary = tableRect.right;\n      for (let i = dstCellIndex - 1; i >= 0; i--) {\n        const cell = dstRow.children[i];\n        if (cell.hasAttribute('hidden') || this.__isDetailsCell(cell)) {\n          continue;\n        }\n        if (cell.hasAttribute('frozen')) {\n          leftBoundary = cell.getBoundingClientRect().right;\n          break;\n        }\n      }\n      for (let i = dstCellIndex + 1; i < dstRow.children.length; i++) {\n        const cell = dstRow.children[i];\n        if (cell.hasAttribute('hidden') || this.__isDetailsCell(cell)) {\n          continue;\n        }\n        if (cell.hasAttribute('frozen')) {\n          rightBoundary = cell.getBoundingClientRect().left;\n          break;\n        }\n      }\n\n      if (dstCellRect.left < leftBoundary) {\n        this.$.table.scrollLeft += Math.round(dstCellRect.left - leftBoundary);\n      }\n      if (dstCellRect.right > rightBoundary) {\n        this.$.table.scrollLeft += Math.round(dstCellRect.right - rightBoundary);\n      }\n    }\n\n    /**\n     * @typedef {Object} GridEventLocation\n     * @property {HTMLTableSectionElement | null} section - The table section element that the event occurred in (header, body, or footer), or null if the event did not occur in a section\n     * @property {HTMLTableRowElement | null} row - The row element that the event occurred in, or null if the event did not occur in a row\n     * @property {HTMLTableCellElement | null} cell - The cell element that the event occurred in, or null if the event did not occur in a cell\n     * @private\n     */\n    /**\n     * Takes an event and returns a location object describing in which part of the grid the event occurred.\n     * The event may either target table section, a row, a cell or contents of a cell.\n     * @param {Event} e\n     * @returns {GridEventLocation}\n     * @private\n     */\n    _getGridEventLocation(e) {\n      const path = e.composedPath();\n      const tableIndex = path.indexOf(this.$.table);\n      // Assuming ascending path to table is: [...,] th|td, tr, thead|tbody, table [,...]\n      const section = tableIndex >= 1 ? path[tableIndex - 1] : null;\n      const row = tableIndex >= 2 ? path[tableIndex - 2] : null;\n      const cell = tableIndex >= 3 ? path[tableIndex - 3] : null;\n\n      return {\n        section,\n        row,\n        cell\n      };\n    }\n\n    /**\n     * Helper method that maps a focus target cell to the containing grid section\n     * @param {HTMLElement} focusTarget\n     * @returns {HTMLTableSectionElement | null}\n     * @private\n     */\n    _getGridSectionFromFocusTarget(focusTarget) {\n      if (focusTarget === this._headerFocusable) return this.$.header;\n      if (focusTarget === this._itemsFocusable) return this.$.items;\n      if (focusTarget === this._footerFocusable) return this.$.footer;\n      return null;\n    }\n\n    /**\n     * Fired when a cell is focused with click or keyboard navigation.\n     *\n     * Use context property of @see {@link GridCellFocusEvent} to get detail information about the event.\n     *\n     * @event cell-focus\n     */\n  };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @polymerMixin\n */\nexport const RowDetailsMixin = (superClass) =>\n  class RowDetailsMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * An array containing references to items with open row details.\n         * @type {!Array<!GridItem>}\n         */\n        detailsOpenedItems: {\n          type: Array,\n          value: function () {\n            return [];\n          }\n        },\n\n        /**\n         * Custom function for rendering the content of the row details.\n         * Receives three arguments:\n         *\n         * - `root` The row details content DOM element. Append your content to it.\n         * - `grid` The `<vaadin-grid>` element.\n         * - `model` The object with the properties related with\n         *   the rendered item, contains:\n         *   - `model.index` The index of the item.\n         *   - `model.item` The item.\n         *   - `model.level` The number of the item's tree sublevel, starts from 0.\n         *   - `model.expanded` True if the item's tree sublevel is expanded.\n         *   - `model.selected` True if the item is selected.\n         *\n         * @type {GridRowDetailsRenderer | null | undefined}\n         */\n        rowDetailsRenderer: Function,\n\n        /**\n         * @type {!Array<!HTMLElement> | undefined}\n         * @protected\n         */\n        _detailsCells: {\n          type: Array\n        }\n      };\n    }\n\n    static get observers() {\n      return [\n        '_detailsOpenedItemsChanged(detailsOpenedItems.*, rowDetailsRenderer)',\n        '_rowDetailsRendererChanged(rowDetailsRenderer)'\n      ];\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this._detailsCellResizeObserver = new ResizeObserver((entries) => {\n        entries.forEach(({ target: cell }) => {\n          this._updateDetailsCellHeight(cell.parentElement);\n        });\n\n        // This workaround is needed until Safari also supports\n        // ResizeObserver.observe with {box: 'border-box'}\n        this.__virtualizer.__adapter._resizeHandler();\n      });\n    }\n\n    /** @private */\n    _rowDetailsRendererChanged(rowDetailsRenderer) {\n      if (!rowDetailsRenderer) {\n        return;\n      }\n\n      if (this._columnTree) {\n        // Only update the rows if the column tree has already been initialized\n        Array.from(this.$.items.children).forEach((row) => {\n          if (!row.querySelector('[part~=details-cell]')) {\n            this._updateRow(row, this._columnTree[this._columnTree.length - 1]);\n            this._a11yUpdateRowDetailsOpened(row, false);\n          }\n        });\n      }\n    }\n\n    /** @private */\n    _detailsOpenedItemsChanged(changeRecord, rowDetailsRenderer) {\n      // Skip to avoid duplicate work of both \u201C.splices\u201D and \u201C.length\u201D updates.\n      if (changeRecord.path === 'detailsOpenedItems.length' || !changeRecord.value) {\n        return;\n      }\n\n      [...this.$.items.children].forEach((row) => {\n        // Re-renders the row to possibly close the previously opened details.\n        if (row.hasAttribute('details-opened')) {\n          this._updateItem(row, row._item);\n          return;\n        }\n\n        // Re-renders the row to open the details when a row details renderer is provided.\n        if (rowDetailsRenderer && this._isDetailsOpened(row._item)) {\n          this._updateItem(row, row._item);\n          return;\n        }\n      });\n    }\n\n    /**\n     * @param {!HTMLElement} cell\n     * @protected\n     */\n    _configureDetailsCell(cell) {\n      cell.setAttribute('part', 'cell details-cell');\n      // Freeze the details cell, so that it does not scroll horizontally\n      // with the normal cells. This way it looks less weird.\n      cell.toggleAttribute('frozen', true);\n\n      this._detailsCellResizeObserver.observe(cell);\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {!GridItem} item\n     * @protected\n     */\n    _toggleDetailsCell(row, detailsOpened) {\n      const cell = row.querySelector('[part~=\"details-cell\"]');\n      if (!cell) {\n        return;\n      }\n\n      cell.hidden = !detailsOpened;\n\n      if (cell.hidden) {\n        return;\n      }\n\n      // Assigns a renderer when the details cell is opened.\n      // The details cell content is rendered later in the `_updateItem` method.\n      if (this.rowDetailsRenderer) {\n        cell._renderer = this.rowDetailsRenderer;\n      }\n    }\n\n    /** @protected */\n    _updateDetailsCellHeight(row) {\n      const cell = row.querySelector('[part~=\"details-cell\"]');\n      if (!cell) {\n        return;\n      }\n\n      if (cell.hidden) {\n        row.style.removeProperty('padding-bottom');\n      } else {\n        row.style.setProperty('padding-bottom', `${cell.offsetHeight}px`);\n      }\n    }\n\n    /** @protected */\n    _updateDetailsCellHeights() {\n      [...this.$.items.children].forEach((row) => {\n        this._updateDetailsCellHeight(row);\n      });\n    }\n\n    /**\n     * @param {!GridItem} item\n     * @return {boolean}\n     * @protected\n     */\n    _isDetailsOpened(item) {\n      return this.detailsOpenedItems && this._getItemIndexInArray(item, this.detailsOpenedItems) !== -1;\n    }\n\n    /**\n     * Open the details row of a given item.\n     * @param {!GridItem} item\n     */\n    openItemDetails(item) {\n      if (!this._isDetailsOpened(item)) {\n        this.detailsOpenedItems = [...this.detailsOpenedItems, item];\n      }\n    }\n\n    /**\n     * Close the details row of a given item.\n     * @param {!GridItem} item\n     */\n    closeItemDetails(item) {\n      if (this._isDetailsOpened(item)) {\n        this.detailsOpenedItems = this.detailsOpenedItems.filter((i) => !this._itemsEqual(i, item));\n      }\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { animationFrame, microTask, timeOut } from '@vaadin/component-base/src/async.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\n\nconst timeouts = {\n  SCROLLING: 500\n};\n\n/**\n * @polymerMixin\n */\nexport const ScrollMixin = (superClass) =>\n  class ScrollMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * Cached array of frozen cells\n         * @private\n         */\n        _frozenCells: {\n          type: Array,\n          value: () => []\n        },\n\n        /** @private */\n        _rowWithFocusedElement: Element\n      };\n    }\n\n    /**\n     * Override (from iron-scroll-target-behavior) to avoid document scroll\n     * @private\n     */\n    set _scrollTop(top) {\n      this.$.table.scrollTop = top;\n    }\n\n    /** @private */\n    get _scrollTop() {\n      return this.$.table.scrollTop;\n    }\n\n    /** @private */\n    get _scrollLeft() {\n      return this.$.table.scrollLeft;\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      // Preserve accessor to the legacy scrolling functionality\n      this.$.outerscroller = document.createElement('div');\n\n      this.scrollTarget = this.$.table;\n\n      this.$.items.addEventListener('focusin', (e) => {\n        const itemsIndex = e.composedPath().indexOf(this.$.items);\n        this._rowWithFocusedElement = e.composedPath()[itemsIndex - 1];\n      });\n      this.$.items.addEventListener('focusout', () => (this._rowWithFocusedElement = undefined));\n\n      this.$.table.addEventListener('scroll', () => this._afterScroll());\n    }\n\n    /**\n     * Scroll to a specific row index in the virtual list. Note that the row index is\n     * not always the same for any particular item. For example, sorting/filtering/expanding\n     * or collapsing hierarchical items can affect the row index related to an item.\n     *\n     * @param {number} index Row index to scroll to\n     */\n    scrollToIndex(index) {\n      index = Math.min(this._effectiveSize - 1, Math.max(0, index));\n      this.__virtualizer.scrollToIndex(index);\n      this.__scrollIntoViewport(index);\n    }\n\n    /**\n     * Makes sure the row with the given index (if found in the DOM) is fully\n     * inside the visible viewport, taking header/footer into account.\n     * @private\n     */\n    __scrollIntoViewport(index) {\n      const rowElement = [...this.$.items.children].find((child) => child.index === index);\n      if (rowElement) {\n        const dstRect = rowElement.getBoundingClientRect();\n        const footerTop = this.$.footer.getBoundingClientRect().top;\n        const headerBottom = this.$.header.getBoundingClientRect().bottom;\n        if (dstRect.bottom > footerTop) {\n          this.$.table.scrollTop += dstRect.bottom - footerTop;\n        } else if (dstRect.top < headerBottom) {\n          this.$.table.scrollTop -= headerBottom - dstRect.top;\n        }\n      }\n    }\n\n    /** @private */\n    _scheduleScrolling() {\n      if (!this._scrollingFrame) {\n        // Defer setting state attributes to avoid Edge hiccups\n        this._scrollingFrame = requestAnimationFrame(() => this.$.scroller.toggleAttribute('scrolling', true));\n      }\n      this._debounceScrolling = Debouncer.debounce(this._debounceScrolling, timeOut.after(timeouts.SCROLLING), () => {\n        cancelAnimationFrame(this._scrollingFrame);\n        delete this._scrollingFrame;\n        this.$.scroller.toggleAttribute('scrolling', false);\n      });\n    }\n\n    /** @private */\n    _afterScroll() {\n      this.__updateHorizontalScrollPosition();\n\n      if (!this.hasAttribute('reordering')) {\n        this._scheduleScrolling();\n      }\n\n      this._updateOverflow();\n    }\n\n    /** @private */\n    _updateOverflow() {\n      // Set overflow styling attributes\n      let overflow = '';\n      const table = this.$.table;\n      if (table.scrollTop < table.scrollHeight - table.clientHeight) {\n        overflow += ' bottom';\n      }\n\n      if (table.scrollTop > 0) {\n        overflow += ' top';\n      }\n\n      if (table.scrollLeft < table.scrollWidth - table.clientWidth) {\n        overflow += ' right';\n      }\n\n      if (table.scrollLeft > 0) {\n        overflow += ' left';\n      }\n\n      this._debounceOverflow = Debouncer.debounce(this._debounceOverflow, animationFrame, () => {\n        const value = overflow.trim();\n        if (value.length > 0 && this.getAttribute('overflow') !== value) {\n          this.setAttribute('overflow', value);\n        } else if (value.length == 0 && this.hasAttribute('overflow')) {\n          this.removeAttribute('overflow');\n        }\n      });\n    }\n\n    /** @protected */\n    _frozenCellsChanged() {\n      this._debouncerCacheElements = Debouncer.debounce(this._debouncerCacheElements, microTask, () => {\n        Array.from(this.shadowRoot.querySelectorAll('[part~=\"cell\"]')).forEach(function (cell) {\n          cell.style.transform = '';\n        });\n        this._frozenCells = Array.prototype.slice.call(this.$.table.querySelectorAll('[frozen]'));\n        this.__updateHorizontalScrollPosition();\n      });\n      this._updateLastFrozen();\n    }\n\n    /** @protected */\n    _updateLastFrozen() {\n      if (!this._columnTree) {\n        return;\n      }\n\n      const columnsRow = this._columnTree[this._columnTree.length - 1].slice(0);\n      columnsRow.sort((a, b) => {\n        return a._order - b._order;\n      });\n      const lastFrozen = columnsRow.reduce((prev, col, index) => {\n        col._lastFrozen = false;\n        return col.frozen && !col.hidden ? index : prev;\n      }, undefined);\n      if (lastFrozen !== undefined) {\n        columnsRow[lastFrozen]._lastFrozen = true;\n      }\n    }\n\n    /** @private */\n    __updateHorizontalScrollPosition() {\n      this.$.table.style.setProperty('--_grid-horizontal-scroll-position', -this._scrollLeft + 'px');\n\n      if (this.__isRTL) {\n        // Translating the sticky sections using a CSS variable works nicely on LTR.\n        // On RTL, it causes jumpy behavior (on Desktop Safari) so we need to translate manually.\n        const x = this.__getNormalizedScrollLeft(this.$.table) + this.$.table.clientWidth - this.$.table.scrollWidth;\n        const transform = `translate(${x}px, 0)`;\n        for (let i = 0; i < this._frozenCells.length; i++) {\n          this._frozenCells[i].style.transform = transform;\n        }\n      }\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @polymerMixin\n */\nexport const SelectionMixin = (superClass) =>\n  class SelectionMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * An array that contains the selected items.\n         * @type {!Array<!GridItem>}\n         */\n        selectedItems: {\n          type: Object,\n          notify: true,\n          value: () => []\n        }\n      };\n    }\n\n    static get observers() {\n      return ['_selectedItemsChanged(selectedItems.*)'];\n    }\n\n    /**\n     * @param {!GridItem} item\n     * @return {boolean}\n     * @protected\n     */\n    _isSelected(item) {\n      return this.selectedItems && this._getItemIndexInArray(item, this.selectedItems) > -1;\n    }\n\n    /**\n     * Selects the given item.\n     *\n     * @method selectItem\n     * @param {!GridItem} item The item object\n     */\n    selectItem(item) {\n      if (!this._isSelected(item)) {\n        this.selectedItems = [...this.selectedItems, item];\n      }\n    }\n\n    /**\n     * Deselects the given item if it is already selected.\n     *\n     * @method deselect\n     * @param {!GridItem} item The item object\n     */\n    deselectItem(item) {\n      if (this._isSelected(item)) {\n        this.selectedItems = this.selectedItems.filter((i) => !this._itemsEqual(i, item));\n      }\n    }\n\n    /**\n     * Toggles the selected state of the given item.\n     *\n     * @method toggle\n     * @param {!GridItem} item The item object\n     * @protected\n     */\n    _toggleItem(item) {\n      const index = this._getItemIndexInArray(item, this.selectedItems);\n      if (index === -1) {\n        this.selectItem(item);\n      } else {\n        this.deselectItem(item);\n      }\n    }\n\n    /** @private */\n    _selectedItemsChanged(e) {\n      if (this.$.items.children.length && (e.path === 'selectedItems' || e.path === 'selectedItems.splices')) {\n        Array.from(this.$.items.children).forEach((row) => {\n          this._updateItem(row, row._item);\n        });\n      }\n    }\n\n    /**\n     * Fired when the `selectedItems` property changes.\n     *\n     * @event selected-items-changed\n     */\n  };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @polymerMixin\n */\nexport const SortMixin = (superClass) =>\n  class SortMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * When `true`, all `<vaadin-grid-sorter>` are applied for sorting.\n         * @attr {boolean} multi-sort\n         * @type {boolean}\n         */\n        multiSort: {\n          type: Boolean,\n          value: false\n        },\n\n        /**\n         * @type {!Array<!GridSorterDefinition>}\n         * @protected\n         */\n        _sorters: {\n          type: Array,\n          value: function () {\n            return [];\n          }\n        },\n\n        /** @private */\n        _previousSorters: {\n          type: Array,\n          value: function () {\n            return [];\n          }\n        }\n      };\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n      this.addEventListener('sorter-changed', this._onSorterChanged);\n    }\n\n    /** @private */\n    _onSorterChanged(e) {\n      const sorter = e.target;\n      e.stopPropagation();\n      this.__updateSorter(sorter);\n      this.__applySorters();\n    }\n\n    /** @private */\n    __removeSorters(sortersToRemove) {\n      if (sortersToRemove.length == 0) {\n        return;\n      }\n\n      this._sorters = this._sorters.filter((sorter) => sortersToRemove.indexOf(sorter) < 0);\n      if (this.multiSort) {\n        this.__updateSortOrders();\n      }\n      this.__applySorters();\n    }\n\n    /** @private */\n    __updateSortOrders() {\n      this._sorters.forEach((sorter, index) => (sorter._order = this._sorters.length > 1 ? index : null), this);\n    }\n\n    /** @private */\n    __updateSorter(sorter) {\n      if (!sorter.direction && this._sorters.indexOf(sorter) === -1) {\n        return;\n      }\n\n      sorter._order = null;\n\n      if (this.multiSort) {\n        this._removeArrayItem(this._sorters, sorter);\n        if (sorter.direction) {\n          this._sorters.unshift(sorter);\n        }\n        this.__updateSortOrders();\n      } else {\n        if (sorter.direction) {\n          const otherSorters = this._sorters.filter((s) => s != sorter);\n          this._sorters = [sorter];\n          otherSorters.forEach((sorter) => {\n            sorter._order = null;\n            sorter.direction = null;\n          });\n        }\n      }\n    }\n\n    /** @private */\n    __applySorters() {\n      if (\n        this.dataProvider &&\n        // No need to clear cache if sorters didn't change and grid is attached\n        this.isAttached &&\n        JSON.stringify(this._previousSorters) !== JSON.stringify(this._mapSorters())\n      ) {\n        this.clearCache();\n      }\n\n      this._a11yUpdateSorters();\n\n      this._previousSorters = this._mapSorters();\n    }\n\n    /**\n     * @return {!Array<!GridSorterDefinition>}\n     * @protected\n     */\n    _mapSorters() {\n      return this._sorters.map((sorter) => {\n        return {\n          path: sorter.path,\n          direction: sorter.direction\n        };\n      });\n    }\n\n    /** @private */\n    _removeArrayItem(array, item) {\n      const index = array.indexOf(item);\n      if (index > -1) {\n        array.splice(index, 1);\n      }\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @polymerMixin\n */\nexport const StylingMixin = (superClass) =>\n  class StylingMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * A function that allows generating CSS class names for grid cells\n         * based on their row and column. The return value should be the generated\n         * class name as a string, or multiple class names separated by whitespace\n         * characters.\n         *\n         * Receives two arguments:\n         * - `column` The `<vaadin-grid-column>` element (`undefined` for details-cell).\n         * - `model` The object with the properties related with\n         *   the rendered item, contains:\n         *   - `model.index` The index of the item.\n         *   - `model.item` The item.\n         *   - `model.expanded` Sublevel toggle state.\n         *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n         *   - `model.selected` Selected state.\n         *\n         * @type {GridCellClassNameGenerator | null | undefined}\n         */\n        cellClassNameGenerator: Function\n      };\n    }\n\n    static get observers() {\n      return ['__cellClassNameGeneratorChanged(cellClassNameGenerator)'];\n    }\n\n    __cellClassNameGeneratorChanged() {\n      this.generateCellClassNames();\n    }\n\n    /**\n     * Runs the `cellClassNameGenerator` for the visible cells.\n     * If the generator depends on varying conditions, you need to\n     * call this function manually in order to update the styles when\n     * the conditions change.\n     */\n    generateCellClassNames() {\n      Array.from(this.$.items.children)\n        .filter((row) => !row.hidden)\n        .forEach((row) => this._generateCellClassNames(row, this.__getRowModel(row)));\n    }\n\n    /** @private */\n    _generateCellClassNames(row, model) {\n      Array.from(row.children).forEach((cell) => {\n        if (cell.__generatedClasses) {\n          cell.__generatedClasses.forEach((className) => cell.classList.remove(className));\n        }\n        if (this.cellClassNameGenerator) {\n          const result = this.cellClassNameGenerator(cell._column, model);\n          cell.__generatedClasses = result && result.split(' ').filter((className) => className.length > 0);\n          if (cell.__generatedClasses) {\n            cell.__generatedClasses.forEach((className) => cell.classList.add(className));\n          }\n        }\n      });\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './vaadin-grid-column.js';\nimport './vaadin-grid-styles.js';\nimport { beforeNextRender } from '@polymer/polymer/lib/utils/render-status.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { isAndroid, isFirefox, isIOS, isSafari, isTouch } from '@vaadin/component-base/src/browser-utils.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\nimport { Virtualizer } from '@vaadin/component-base/src/virtualizer.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { A11yMixin } from './vaadin-grid-a11y-mixin.js';\nimport { ActiveItemMixin } from './vaadin-grid-active-item-mixin.js';\nimport { ArrayDataProviderMixin } from './vaadin-grid-array-data-provider-mixin.js';\nimport { ColumnReorderingMixin } from './vaadin-grid-column-reordering-mixin.js';\nimport { ColumnResizingMixin } from './vaadin-grid-column-resizing-mixin.js';\nimport { DataProviderMixin } from './vaadin-grid-data-provider-mixin.js';\nimport { DragAndDropMixin } from './vaadin-grid-drag-and-drop-mixin.js';\nimport { DynamicColumnsMixin } from './vaadin-grid-dynamic-columns-mixin.js';\nimport { EventContextMixin } from './vaadin-grid-event-context-mixin.js';\nimport { FilterMixin } from './vaadin-grid-filter-mixin.js';\nimport { KeyboardNavigationMixin } from './vaadin-grid-keyboard-navigation-mixin.js';\nimport { RowDetailsMixin } from './vaadin-grid-row-details-mixin.js';\nimport { ScrollMixin } from './vaadin-grid-scroll-mixin.js';\nimport { SelectionMixin } from './vaadin-grid-selection-mixin.js';\nimport { SortMixin } from './vaadin-grid-sort-mixin.js';\nimport { StylingMixin } from './vaadin-grid-styling-mixin.js';\n\n/**\n * `<vaadin-grid>` is a free, high quality data grid / data table Web Component. The content of the\n * the grid can be populated by using renderer callback function.\n *\n * ### Quick Start\n *\n * Start with an assigning an array to the [`items`](#/elements/vaadin-grid#property-items) property to visualize your data.\n *\n * Use the [`<vaadin-grid-column>`](#/elements/vaadin-grid-column) element to configure the grid columns. Set `path` and `header`\n * shorthand properties for the columns to define what gets rendered in the cells of the column.\n *\n * #### Example:\n * ```html\n * <vaadin-grid>\n *   <vaadin-grid-column path=\"name.first\" header=\"First name\"></vaadin-grid-column>\n *   <vaadin-grid-column path=\"name.last\" header=\"Last name\"></vaadin-grid-column>\n *   <vaadin-grid-column path=\"email\"></vaadin-grid-column>\n * </vaadin-grid>\n * ```\n *\n * For custom content `vaadin-grid-column` element provides you with three types of `renderer` callback functions: `headerRenderer`,\n * `renderer` and `footerRenderer`.\n *\n * Each of those renderer functions provides `root`, `column`, `model` arguments when applicable.\n * Generate DOM content, append it to the `root` element and control the state\n * of the host element by accessing `column`. Before generating new content,\n * users are able to check if there is already content in `root` for reusing it.\n *\n * Renderers are called on initialization of new column cells and each time the\n * related row model is updated. DOM generated during the renderer call can be reused\n * in the next renderer call and will be provided with the `root` argument.\n * On first call it will be empty.\n *\n * #### Example:\n * ```html\n * <vaadin-grid>\n *   <vaadin-grid-column></vaadin-grid-column>\n *   <vaadin-grid-column></vaadin-grid-column>\n *   <vaadin-grid-column></vaadin-grid-column>\n * </vaadin-grid>\n * ```\n * ```js\n * const grid = document.querySelector('vaadin-grid');\n * grid.items = [{'name': 'John', 'surname': 'Lennon', 'role': 'singer'},\n *               {'name': 'Ringo', 'surname': 'Starr', 'role': 'drums'}];\n *\n * const columns = grid.querySelectorAll('vaadin-grid-column');\n *\n * columns[0].headerRenderer = function(root) {\n *   root.textContent = 'Name';\n * };\n * columns[0].renderer = function(root, column, model) {\n *   root.textContent = model.item.name;\n * };\n *\n * columns[1].headerRenderer = function(root) {\n *   root.textContent = 'Surname';\n * };\n * columns[1].renderer = function(root, column, model) {\n *   root.textContent = model.item.surname;\n * };\n *\n * columns[2].headerRenderer = function(root) {\n *   root.textContent = 'Role';\n * };\n * columns[2].renderer = function(root, column, model) {\n *   root.textContent = model.item.role;\n * };\n * ```\n *\n * The following properties are available in the `model` argument:\n *\n * Property name | Type | Description\n * --------------|------|------------\n * `index`| Number | The index of the item.\n * `item` | String or Object | The item.\n * `level` | Number | Number of the item's tree sublevel, starts from 0.\n * `expanded` | Boolean | True if the item's tree sublevel is expanded.\n * `selected` | Boolean | True if the item is selected.\n * `detailsOpened` | Boolean | True if the item's row details are open.\n *\n * The following helper elements can be used for further customization:\n * - [`<vaadin-grid-column-group>`](#/elements/vaadin-grid-column-group)\n * - [`<vaadin-grid-filter>`](#/elements/vaadin-grid-filter)\n * - [`<vaadin-grid-sorter>`](#/elements/vaadin-grid-sorter)\n * - [`<vaadin-grid-selection-column>`](#/elements/vaadin-grid-selection-column)\n * - [`<vaadin-grid-tree-toggle>`](#/elements/vaadin-grid-tree-toggle)\n *\n * __Note that the helper elements must be explicitly imported.__\n * If you want to import everything at once you can use the `all-imports.html` bundle.\n *\n * ### Lazy Loading with Function Data Provider\n *\n * In addition to assigning an array to the items property, you can alternatively\n * provide the `<vaadin-grid>` data through the\n * [`dataProvider`](#/elements/vaadin-grid#property-dataProvider) function property.\n * The `<vaadin-grid>` calls this function lazily, only when it needs more data\n * to be displayed.\n *\n * See the [`dataProvider`](#/elements/vaadin-grid#property-dataProvider) in\n * the API reference below for the detailed data provider arguments description,\n * and the \u201CAssigning Data\u201D page in the demos.\n *\n * __Note that expanding the tree grid's item will trigger a call to the `dataProvider`.__\n *\n * __Also, note that when using function data providers, the total number of items\n * needs to be set manually. The total number of items can be returned\n * in the second argument of the data provider callback:__\n *\n * ```javascript\n * grid.dataProvider = ({page, pageSize}, callback) => {\n *   // page: the requested page index\n *   // pageSize: number of items on one page\n *   const url = `https://api.example/data?page=${page}&per_page=${pageSize}`;\n *\n *   fetch(url)\n *     .then((res) => res.json())\n *     .then(({ employees, totalSize }) => {\n *       callback(employees, totalSize);\n *     });\n * };\n * ```\n *\n * __Alternatively, you can use the `size` property to set the total number of items:__\n *\n * ```javascript\n * grid.size = 200; // The total number of items\n * grid.dataProvider = ({page, pageSize}, callback) => {\n *   const url = `https://api.example/data?page=${page}&per_page=${pageSize}`;\n *\n *   fetch(url)\n *     .then((res) => res.json())\n *     .then((resJson) => callback(resJson.employees));\n * };\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ----------------|----------------\n * `row` | Row in the internal table\n * `cell` | Cell in the internal table\n * `header-cell` | Header cell in the internal table\n * `body-cell` | Body cell in the internal table\n * `footer-cell` | Footer cell in the internal table\n * `details-cell` | Row details cell in the internal table\n * `resize-handle` | Handle for resizing the columns\n * `reorder-ghost` | Ghost element of the header cell being dragged\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description | Part name\n * -------------|-------------|------------\n * `loading` | Set when the grid is loading data from data provider | :host\n * `interacting` | Keyboard navigation in interaction mode | :host\n * `navigating` | Keyboard navigation in navigation mode | :host\n * `overflow` | Set when rows are overflowing the grid viewport. Possible values: `top`, `bottom`, `left`, `right` | :host\n * `reordering` | Set when the grid's columns are being reordered | :host\n * `dragover` | Set when the grid (not a specific row) is dragged over | :host\n * `dragging-rows` : Set when grid rows are dragged  | :host\n * `reorder-status` | Reflects the status of a cell while columns are being reordered | cell\n * `frozen` | Frozen cell | cell\n * `last-frozen` | Last frozen cell | cell\n * * `first-column` | First visible cell on a row | cell\n * `last-column` | Last visible cell on a row | cell\n * `selected` | Selected row | row\n * `expanded` | Expanded row | row\n * `details-opened` | Row with details open | row\n * `loading` | Row that is waiting for data from data provider | row\n * `odd` | Odd row | row\n * `first` | The first body row | row\n * `dragstart` | Set for one frame when drag of a row is starting. The value is a number when multiple rows are dragged | row\n * `dragover` | Set when the row is dragged over | row\n * `drag-disabled` | Set to a row that isn't available for dragging | row\n * `drop-disabled` | Set to a row that can't be dropped on top of | row\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * @fires {CustomEvent} active-item-changed - Fired when the `activeItem` property changes.\n * @fires {CustomEvent} cell-activate - Fired when the cell is activated with click or keyboard.\n * @fires {CustomEvent} cell-focus - Fired when a cell is focused with click or keyboard navigation.\n * @fires {CustomEvent} column-reorder - Fired when the columns in the grid are reordered.\n * @fires {CustomEvent} column-resize - Fired when the grid column resize is finished.\n * @fires {CustomEvent} expanded-items-changed - Fired when the `expandedItems` property changes.\n * @fires {CustomEvent} grid-dragstart - Fired when starting to drag grid rows.\n * @fires {CustomEvent} grid-dragend - Fired when the dragging of the rows ends.\n * @fires {CustomEvent} grid-drop - Fired when a drop occurs on top of the grid.\n * @fires {CustomEvent} loading-changed - Fired when the `loading` property changes.\n * @fires {CustomEvent} selected-items-changed - Fired when the `selectedItems` property changes.\n *\n * @extends HTMLElement\n * @mixes ElementMixin\n * @mixes ThemableMixin\n * @mixes A11yMixin\n * @mixes ActiveItemMixin\n * @mixes ArrayDataProviderMixin\n * @mixes ColumnResizingMixin\n * @mixes DataProviderMixin\n * @mixes DynamicColumnsMixin\n * @mixes FilterMixin\n * @mixes RowDetailsMixin\n * @mixes ScrollMixin\n * @mixes SelectionMixin\n * @mixes SortMixin\n * @mixes KeyboardNavigationMixin\n * @mixes ColumnReorderingMixin\n * @mixes EventContextMixin\n * @mixes StylingMixin\n * @mixes DragAndDropMixin\n */\nclass Grid extends ElementMixin(\n  ThemableMixin(\n    DataProviderMixin(\n      ArrayDataProviderMixin(\n        DynamicColumnsMixin(\n          ActiveItemMixin(\n            ScrollMixin(\n              SelectionMixin(\n                SortMixin(\n                  RowDetailsMixin(\n                    KeyboardNavigationMixin(\n                      A11yMixin(\n                        FilterMixin(\n                          ColumnReorderingMixin(\n                            ColumnResizingMixin(EventContextMixin(DragAndDropMixin(StylingMixin(PolymerElement))))\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n) {\n  static get template() {\n    return html`\n      <div\n        id=\"scroller\"\n        safari$=\"[[_safari]]\"\n        ios$=\"[[_ios]]\"\n        loading$=\"[[loading]]\"\n        column-reordering-allowed$=\"[[columnReorderingAllowed]]\"\n      >\n        <table id=\"table\" role=\"grid\" aria-multiselectable=\"true\" tabindex=\"0\">\n          <caption id=\"sizer\" part=\"row\"></caption>\n          <thead id=\"header\" role=\"rowgroup\"></thead>\n          <tbody id=\"items\" role=\"rowgroup\"></tbody>\n          <tfoot id=\"footer\" role=\"rowgroup\"></tfoot>\n        </table>\n\n        <div part=\"reorder-ghost\"></div>\n      </div>\n\n      <div id=\"focusexit\" tabindex=\"0\"></div>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-grid';\n  }\n\n  static get observers() {\n    return [\n      '_columnTreeChanged(_columnTree, _columnTree.*)',\n      '_effectiveSizeChanged(_effectiveSize, __virtualizer, _hasData, _columnTree)'\n    ];\n  }\n\n  static get properties() {\n    return {\n      /** @private */\n      _safari: {\n        type: Boolean,\n        value: isSafari\n      },\n\n      /** @private */\n      _ios: {\n        type: Boolean,\n        value: isIOS\n      },\n\n      /** @private */\n      _firefox: {\n        type: Boolean,\n        value: isFirefox\n      },\n\n      /** @private */\n      _android: {\n        type: Boolean,\n        value: isAndroid\n      },\n\n      /** @private */\n      _touchDevice: {\n        type: Boolean,\n        value: isTouch\n      },\n\n      /**\n       * If true, the grid's height is defined by its rows.\n       *\n       * Effectively, this disables the grid's virtual scrolling so that all the rows are rendered in the DOM at once.\n       * If the grid has a large number of items, using the feature is discouraged to avoid performance issues.\n       * @attr {boolean} all-rows-visible\n       * @type {boolean}\n       */\n      allRowsVisible: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n\n      /** @private */\n      _recalculateColumnWidthOnceLoadingFinished: {\n        type: Boolean,\n        value: true\n      },\n\n      /** @private */\n      isAttached: {\n        value: false\n      },\n\n      /**\n       * An internal property that is mainly used by `vaadin-template-renderer`\n       * to identify grid elements.\n       *\n       * @private\n       */\n      __gridElement: {\n        type: Boolean,\n        value: true\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.addEventListener('animationend', this._onAnimationEnd);\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n    this.isAttached = true;\n    this.recalculateColumnWidths();\n  }\n\n  /** @protected */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.isAttached = false;\n  }\n\n  /** @private */\n  __getFirstVisibleItem() {\n    return this._getVisibleRows().find((row) => this._isInViewport(row));\n  }\n\n  /** @private */\n  get _firstVisibleIndex() {\n    const firstVisibleItem = this.__getFirstVisibleItem();\n    return firstVisibleItem ? firstVisibleItem.index : undefined;\n  }\n\n  /** @private */\n  __getLastVisibleItem() {\n    return this._getVisibleRows()\n      .reverse()\n      .find((row) => this._isInViewport(row));\n  }\n\n  /** @private */\n  get _lastVisibleIndex() {\n    const lastVisibleItem = this.__getLastVisibleItem();\n    return lastVisibleItem ? lastVisibleItem.index : undefined;\n  }\n\n  /** @private */\n  _isInViewport(item) {\n    const scrollTargetRect = this.$.table.getBoundingClientRect();\n    const itemRect = item.getBoundingClientRect();\n    const headerHeight = this.$.header.getBoundingClientRect().height;\n    const footerHeight = this.$.footer.getBoundingClientRect().height;\n    return (\n      itemRect.bottom > scrollTargetRect.top + headerHeight && itemRect.top < scrollTargetRect.bottom - footerHeight\n    );\n  }\n\n  /** @private */\n  _getVisibleRows() {\n    return Array.from(this.$.items.children)\n      .filter((item) => !item.hidden)\n      .sort((a, b) => a.index - b.index);\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.__virtualizer = new Virtualizer({\n      createElements: this._createScrollerRows.bind(this),\n      updateElement: this._updateScrollerItem.bind(this),\n      scrollContainer: this.$.items,\n      scrollTarget: this.$.table,\n      reorderElements: true\n    });\n\n    new ResizeObserver(() => setTimeout(() => this.__updateFooterPositioning())).observe(this.$.footer);\n\n    processTemplates(this);\n  }\n\n  /**\n   * @param {string} name\n   * @param {?string} oldValue\n   * @param {?string} newValue\n   * @protected\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    super.attributeChangedCallback(name, oldValue, newValue);\n    if (name === 'dir') {\n      this.__isRTL = newValue === 'rtl';\n    }\n  }\n\n  /** @private */\n  __getBodyCellCoordinates(cell) {\n    if (this.$.items.contains(cell) && cell.localName === 'td') {\n      return {\n        item: cell.parentElement._item,\n        column: cell._column\n      };\n    }\n  }\n\n  /** @private */\n  __focusBodyCell({ item, column }) {\n    const row = this._getVisibleRows().find((row) => row._item === item);\n    const cell = row && [...row.children].find((cell) => cell._column === column);\n    cell && cell.focus();\n  }\n\n  /** @private */\n  _effectiveSizeChanged(effectiveSize, virtualizer, hasData, columnTree) {\n    if (virtualizer && hasData && columnTree) {\n      // Changing the virtualizer size may result in the row with focus getting hidden\n      const cell = this.shadowRoot.activeElement;\n      const cellCoordinates = this.__getBodyCellCoordinates(cell);\n\n      virtualizer.size = effectiveSize;\n      virtualizer.flush();\n\n      // If the focused cell's parent row got hidden by the size change, focus the corresponding new cell\n      cellCoordinates && cell.parentElement.hidden && this.__focusBodyCell(cellCoordinates);\n\n      // Make sure the body has a tabbable element\n      this._resetKeyboardNavigation();\n    }\n  }\n\n  /** @private */\n  __hasRowsWithClientHeight() {\n    return !!Array.from(this.$.items.children).filter((row) => row.clientHeight).length;\n  }\n\n  /** @protected */\n  __itemsReceived() {\n    if (\n      this._recalculateColumnWidthOnceLoadingFinished &&\n      !this._cache.isLoading() &&\n      this.__hasRowsWithClientHeight()\n    ) {\n      this._recalculateColumnWidthOnceLoadingFinished = false;\n      this.recalculateColumnWidths();\n    }\n  }\n\n  /** @private */\n  __getIntrinsicWidth(col) {\n    const initialWidth = col.width;\n    const initialFlexGrow = col.flexGrow;\n\n    col.width = 'auto';\n    col.flexGrow = 0;\n\n    // Note: _allCells only contains cells which are currently rendered in DOM\n    const width = col._allCells\n      .filter((cell) => {\n        // Exclude body cells that are out of the visible viewport\n        return !this.$.items.contains(cell) || this._isInViewport(cell.parentElement);\n      })\n      .reduce((width, cell) => {\n        // Add 1px buffer to the offset width to avoid too narrow columns (sub-pixel rendering)\n        return Math.max(width, cell.offsetWidth + 1);\n      }, 0);\n\n    col.flexGrow = initialFlexGrow;\n    col.width = initialWidth;\n\n    return width;\n  }\n\n  /** @private */\n  __getDistributedWidth(col, innerColumn) {\n    if (col == null || col === this) return 0;\n\n    const columnWidth = Math.max(this.__getIntrinsicWidth(col), this.__getDistributedWidth(col.parentElement, col));\n\n    // we're processing a regular grid-column and not a grid-column-group\n    if (!innerColumn) {\n      return columnWidth;\n    }\n\n    // At the end, the width of each vaadin-grid-column-group is determined by the sum of the width of its children.\n    // Here we determine how much space the vaadin-grid-column-group actually needs to render properly and then we distribute that space\n    // to its children, so when we actually do the summation it will be rendered properly.\n    // Check out vaadin-grid-column-group:_updateFlexAndWidth\n    const columnGroup = col;\n    const columnGroupWidth = columnWidth;\n    const sumOfWidthOfAllChildColumns = columnGroup._visibleChildColumns\n      .map((col) => this.__getIntrinsicWidth(col))\n      .reduce((sum, curr) => sum + curr, 0);\n\n    const extraNecessarySpaceForGridColumnGroup = Math.max(0, columnGroupWidth - sumOfWidthOfAllChildColumns);\n\n    // The distribution of the extra necessary space is done according to the intrinsic width of each child column.\n    // Lets say we need 100 pixels of extra space for the grid-column-group to render properly\n    // it has two grid-column children, |100px|300px| in total 400px\n    // the first column gets 25px of the additional space (100/400)*100 = 25\n    // the second column gets the 75px of the additional space (300/400)*100 = 75\n    const proportionOfExtraSpace = this.__getIntrinsicWidth(innerColumn) / sumOfWidthOfAllChildColumns;\n    const shareOfInnerColumnFromNecessaryExtraSpace = proportionOfExtraSpace * extraNecessarySpaceForGridColumnGroup;\n\n    return this.__getIntrinsicWidth(innerColumn) + shareOfInnerColumnFromNecessaryExtraSpace;\n  }\n\n  /**\n   * @param {!Array<!GridColumn>} cols the columns to auto size based on their content width\n   * @private\n   */\n  _recalculateColumnWidths(cols) {\n    cols.forEach((col) => {\n      col.width = `${this.__getDistributedWidth(col)}px`;\n    });\n  }\n\n  /**\n   * Updates the `width` of all columns which have `autoWidth` set to `true`.\n   */\n  recalculateColumnWidths() {\n    if (!this._columnTree) {\n      return; // No columns\n    }\n    if (this._cache.isLoading()) {\n      this._recalculateColumnWidthOnceLoadingFinished = true;\n    } else {\n      const cols = this._getColumns().filter((col) => !col.hidden && col.autoWidth);\n      this._recalculateColumnWidths(cols);\n    }\n  }\n\n  /** @private */\n  _createScrollerRows(count) {\n    const rows = [];\n    for (let i = 0; i < count; i++) {\n      const row = document.createElement('tr');\n      row.setAttribute('part', 'row');\n      row.setAttribute('role', 'row');\n      row.setAttribute('tabindex', '-1');\n      if (this._columnTree) {\n        this._updateRow(row, this._columnTree[this._columnTree.length - 1], 'body', false, true);\n      }\n      rows.push(row);\n    }\n\n    if (this._columnTree) {\n      this._columnTree[this._columnTree.length - 1].forEach(\n        (c) => c.isConnected && c.notifyPath && c.notifyPath('_cells.*', c._cells)\n      );\n    }\n\n    beforeNextRender(this, () => {\n      this._updateFirstAndLastColumn();\n      this._resetKeyboardNavigation();\n      this._afterScroll();\n      this.__itemsReceived();\n    });\n    return rows;\n  }\n\n  /** @private */\n  _createCell(tagName) {\n    const contentId = (this._contentIndex = this._contentIndex + 1 || 0);\n    const slotName = 'vaadin-grid-cell-content-' + contentId;\n\n    const cellContent = document.createElement('vaadin-grid-cell-content');\n    cellContent.setAttribute('slot', slotName);\n\n    const cell = document.createElement(tagName);\n    cell.id = slotName.replace('-content-', '-');\n    cell.setAttribute('tabindex', '-1');\n    cell.setAttribute('role', tagName === 'td' ? 'gridcell' : 'columnheader');\n\n    const slot = document.createElement('slot');\n    slot.setAttribute('name', slotName);\n\n    cell.appendChild(slot);\n\n    cell._content = cellContent;\n\n    // With native Shadow DOM, mousedown on slotted element does not focus\n    // focusable slot wrapper, that is why cells are not focused with\n    // mousedown. Workaround: listen for mousedown and focus manually.\n    cellContent.addEventListener('mousedown', () => {\n      if (window.chrome) {\n        // Chrome bug: focusing before mouseup prevents text selection, see http://crbug.com/771903\n        const mouseUpListener = () => {\n          if (!cellContent.contains(this.getRootNode().activeElement)) {\n            cell.focus();\n          }\n          // If focus is in the cell content \u2014 respect it, do not change.\n          document.removeEventListener('mouseup', mouseUpListener, true);\n        };\n        document.addEventListener('mouseup', mouseUpListener, true);\n      } else {\n        // Focus on mouseup, on the other hand, removes selection on Safari.\n        // Watch out sync focus removal issue, only async focus works here.\n        setTimeout(() => {\n          if (!cellContent.contains(this.getRootNode().activeElement)) {\n            cell.focus();\n          }\n        });\n      }\n    });\n\n    return cell;\n  }\n\n  /**\n   * @param {!HTMLTableRowElement} row\n   * @param {!Array<!GridColumn>} columns\n   * @param {?string} section\n   * @param {boolean} isColumnRow\n   * @param {boolean} noNotify\n   * @protected\n   */\n  _updateRow(row, columns, section, isColumnRow, noNotify) {\n    section = section || 'body';\n\n    const contentsFragment = document.createDocumentFragment();\n\n    Array.from(row.children).forEach((cell) => (cell._vacant = true));\n    row.innerHTML = '';\n\n    columns\n      .filter((column) => !column.hidden)\n      .forEach((column, index, cols) => {\n        let cell;\n\n        if (section === 'body') {\n          // Body\n          column._cells = column._cells || [];\n          cell = column._cells.filter((cell) => cell._vacant)[0];\n          if (!cell) {\n            cell = this._createCell('td');\n            column._cells.push(cell);\n          }\n          cell.setAttribute('part', 'cell body-cell');\n          row.appendChild(cell);\n\n          if (index === cols.length - 1 && this.rowDetailsRenderer) {\n            // Add details cell as last cell to body rows\n            this._detailsCells = this._detailsCells || [];\n            const detailsCell = this._detailsCells.filter((cell) => cell._vacant)[0] || this._createCell('td');\n            if (this._detailsCells.indexOf(detailsCell) === -1) {\n              this._detailsCells.push(detailsCell);\n            }\n            if (!detailsCell._content.parentElement) {\n              contentsFragment.appendChild(detailsCell._content);\n            }\n            this._configureDetailsCell(detailsCell);\n            row.appendChild(detailsCell);\n            this._a11ySetRowDetailsCell(row, detailsCell);\n            detailsCell._vacant = false;\n          }\n\n          if (column.notifyPath && !noNotify) {\n            column.notifyPath('_cells.*', column._cells);\n          }\n        } else {\n          // Header & footer\n          const tagName = section === 'header' ? 'th' : 'td';\n          if (isColumnRow || column.localName === 'vaadin-grid-column-group') {\n            cell = column[`_${section}Cell`] || this._createCell(tagName);\n            cell._column = column;\n            row.appendChild(cell);\n            column[`_${section}Cell`] = cell;\n          } else {\n            column._emptyCells = column._emptyCells || [];\n            cell = column._emptyCells.filter((cell) => cell._vacant)[0] || this._createCell(tagName);\n            cell._column = column;\n            row.appendChild(cell);\n            if (column._emptyCells.indexOf(cell) === -1) {\n              column._emptyCells.push(cell);\n            }\n          }\n          cell.setAttribute('part', `cell ${section}-cell`);\n          this.__updateHeaderFooterRowVisibility(row);\n        }\n\n        if (!cell._content.parentElement) {\n          contentsFragment.appendChild(cell._content);\n        }\n        cell._vacant = false;\n        cell._column = column;\n      });\n\n    // Might be empty if only cache was used\n    this.appendChild(contentsFragment);\n\n    this._frozenCellsChanged();\n    this._updateFirstAndLastColumnForRow(row);\n  }\n\n  /**\n   * @param {HTMLTableRowElement} row\n   * @protected\n   */\n  __updateHeaderFooterRowVisibility(row) {\n    if (!row) {\n      return;\n    }\n\n    const visibleRowCells = Array.from(row.children).filter((cell) => {\n      const column = cell._column;\n      if (column._emptyCells && column._emptyCells.indexOf(cell) > -1) {\n        // The cell is an \"empty cell\"  -> doesn't block hiding the row\n        return false;\n      }\n      if (row.parentElement === this.$.header) {\n        if (column.headerRenderer) {\n          // The cell is the header cell of a column that has a header renderer\n          // -> row should be visible\n          return true;\n        }\n        if (column.header === null) {\n          // The column header is explicilty set to null -> doesn't block hiding the row\n          return false;\n        }\n        if (column.path || column.header !== undefined) {\n          // The column has an explicit non-null header or a path that generates a header\n          // -> row should be visible\n          return true;\n        }\n      } else {\n        if (column.footerRenderer) {\n          // The cell is the footer cell of a column that has a footer renderer\n          // -> row should be visible\n          return true;\n        }\n      }\n    });\n\n    if (row.hidden !== !visibleRowCells.length) {\n      row.hidden = !visibleRowCells.length;\n    }\n\n    // Make sure the section has a tabbable element\n    this._resetKeyboardNavigation();\n  }\n\n  /** @private */\n  _updateScrollerItem(row, index) {\n    this._preventScrollerRotatingCellFocus(row, index);\n\n    if (!this._columnTree) {\n      return;\n    }\n\n    row.toggleAttribute('first', index === 0);\n    row.toggleAttribute('odd', index % 2);\n    this._a11yUpdateRowRowindex(row, index);\n    this._getItem(index, row);\n  }\n\n  /** @private */\n  _columnTreeChanged(columnTree) {\n    this._renderColumnTree(columnTree);\n    this.recalculateColumnWidths();\n  }\n\n  /**\n   * @param {!Array<!GridColumn>} columnTree\n   * @protected\n   */\n  _renderColumnTree(columnTree) {\n    Array.from(this.$.items.children).forEach((row) =>\n      this._updateRow(row, columnTree[columnTree.length - 1], null, false, true)\n    );\n\n    while (this.$.header.children.length < columnTree.length) {\n      const headerRow = document.createElement('tr');\n      headerRow.setAttribute('part', 'row');\n      headerRow.setAttribute('role', 'row');\n      headerRow.setAttribute('tabindex', '-1');\n      this.$.header.appendChild(headerRow);\n\n      const footerRow = document.createElement('tr');\n      footerRow.setAttribute('part', 'row');\n      footerRow.setAttribute('role', 'row');\n      footerRow.setAttribute('tabindex', '-1');\n      this.$.footer.appendChild(footerRow);\n    }\n    while (this.$.header.children.length > columnTree.length) {\n      this.$.header.removeChild(this.$.header.firstElementChild);\n      this.$.footer.removeChild(this.$.footer.firstElementChild);\n    }\n\n    Array.from(this.$.header.children).forEach((headerRow, index) =>\n      this._updateRow(headerRow, columnTree[index], 'header', index === columnTree.length - 1)\n    );\n\n    Array.from(this.$.footer.children).forEach((footerRow, index) =>\n      this._updateRow(footerRow, columnTree[columnTree.length - 1 - index], 'footer', index === 0)\n    );\n\n    // Sizer rows\n    this._updateRow(this.$.sizer, columnTree[columnTree.length - 1]);\n\n    this._resizeHandler();\n    this._frozenCellsChanged();\n    this._updateFirstAndLastColumn();\n    this._resetKeyboardNavigation();\n    this._a11yUpdateHeaderRows();\n    this._a11yUpdateFooterRows();\n    this.__updateFooterPositioning();\n    this.generateCellClassNames();\n  }\n\n  __updateFooterPositioning() {\n    if (this._firefox) {\n      // Sticky (or translated) footer in a flexbox host doesn't get included in\n      // the scroll height calculation on FF. This is a workaround for the issue.\n      this.$.items.style.paddingBottom = 0;\n      if (!this.allRowsVisible) {\n        this.$.items.style.paddingBottom = `${this.$.footer.offsetHeight}px`;\n      }\n    }\n  }\n\n  /**\n   * @param {!HTMLElement} row\n   * @param {GridItem} item\n   * @protected\n   */\n  _updateItem(row, item) {\n    row._item = item;\n    const model = this.__getRowModel(row);\n\n    this._toggleDetailsCell(row, model.detailsOpened);\n\n    this._a11yUpdateRowLevel(row, model.level);\n    this._a11yUpdateRowSelected(row, model.selected);\n    this._a11yUpdateRowDetailsOpened(row, model.detailsOpened);\n\n    row.toggleAttribute('expanded', model.expanded);\n    row.toggleAttribute('selected', model.selected);\n    row.toggleAttribute('details-opened', model.detailsOpened);\n\n    this._generateCellClassNames(row, model);\n    this._filterDragAndDrop(row, model);\n\n    Array.from(row.children).forEach((cell) => {\n      if (cell._renderer) {\n        const owner = cell._column || this;\n        cell._renderer.call(owner, cell._content, owner, model);\n      }\n    });\n\n    this._updateDetailsCellHeight(row);\n\n    this._a11yUpdateRowExpanded(row, model.expanded);\n  }\n\n  /** @private */\n  _resizeHandler() {\n    this._updateDetailsCellHeights();\n    this.__updateFooterPositioning();\n  }\n\n  /** @private */\n  _onAnimationEnd(e) {\n    // ShadyCSS applies scoping suffixes to animation names\n    if (e.animationName.indexOf('vaadin-grid-appear') === 0) {\n      e.stopPropagation();\n      this.__itemsReceived();\n\n      requestAnimationFrame(() => {\n        this.__scrollToPendingIndex();\n        // This needs to be set programmatically in order to avoid an iOS 10 bug (disappearing grid)\n        this.$.table.style.webkitOverflowScrolling = 'touch';\n      });\n    }\n  }\n\n  /**\n   * @param {!HTMLTableRowElement} row\n   * @return {!GridItemModel}\n   * @protected\n   */\n  __getRowModel(row) {\n    return {\n      index: row.index,\n      item: row._item,\n      level: this._getIndexLevel(row.index),\n      expanded: this._isExpanded(row._item),\n      selected: this._isSelected(row._item),\n      detailsOpened: !!this.rowDetailsRenderer && this._isDetailsOpened(row._item)\n    };\n  }\n\n  /**\n   * Requests an update for the content of cells.\n   *\n   * While performing the update, the following renderers are invoked:\n   * - `Grid.rowDetailsRenderer`\n   * - `GridColumn.renderer`\n   * - `GridColumn.headerRenderer`\n   * - `GridColumn.footerRenderer`\n   *\n   * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\n   */\n  requestContentUpdate() {\n    if (this._columnTree) {\n      // header and footer renderers\n      this._columnTree.forEach((level) => {\n        level.forEach((column) => {\n          column._renderHeaderAndFooter();\n        });\n      });\n\n      // body and row details renderers\n      this.__updateVisibleRows();\n    }\n  }\n\n  /** @protected */\n  __updateVisibleRows(start, end) {\n    this.__virtualizer && this.__virtualizer.update(start, end);\n  }\n\n  /**\n   * Updates the computed metrics and positioning of internal grid parts\n   * (row/details cell positioning etc). Needs to be invoked whenever the sizing of grid\n   * content changes asynchronously to ensure consistent appearance (e.g. when a\n   * contained image whose bounds aren't known beforehand finishes loading).\n   *\n   * @deprecated Since Vaadin 22, `notifyResize()` is deprecated. The component uses a\n   * ResizeObserver internally and doesn't need to be explicitly notified of resizes.\n   */\n  notifyResize() {\n    console.warn(\n      `WARNING: Since Vaadin 22, notifyResize() is deprecated. The component uses a ResizeObserver internally and doesn't need to be explicitly notified of resizes.`\n    );\n  }\n}\n\ncustomElements.define(Grid.is, Grid);\n\nexport { Grid };\n"],
  "mappings": "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",
  "names": []
}
