{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/component-base@22.0.2/node_modules/@vaadin/component-base/src/active-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { GestureEventListeners } from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';\nimport { DisabledMixin } from './disabled-mixin.js';\nimport { KeyboardMixin } from './keyboard-mixin.js';\n\n/**\n * A mixin to toggle the `active` attribute.\n *\n * The attribute is set whenever the user activates the element by a pointer\n * or presses an activation key on the element from the keyboard.\n *\n * The attribute is removed as soon as the element is deactivated\n * by the pointer or by releasing the activation key.\n *\n * @polymerMixin\n */\nexport const ActiveMixin = (superclass) =>\n  class ActiveMixinClass extends DisabledMixin(GestureEventListeners(KeyboardMixin(superclass))) {\n    /**\n     * An array of activation keys.\n     *\n     * See possible values here:\n     * https://developer.mozilla.org/ru/docs/Web/API/KeyboardEvent/key/Key_Values\n     *\n     * @protected\n     * @return {!Array<!string>}\n     */\n    get _activeKeys() {\n      return [' '];\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this._addEventListenerToNode(this, 'down', (event) => {\n        if (this._shouldSetActive(event)) {\n          this._setActive(true);\n        }\n      });\n\n      this._addEventListenerToNode(this, 'up', () => {\n        this._setActive(false);\n      });\n    }\n\n    /** @protected */\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      // When the element is disconnecting from the DOM at the moment being active,\n      // the `active` attribute needs to be manually removed from the element.\n      // Otherwise, it will preserve on the element until the element is activated once again.\n      // The case reproduces for `<vaadin-date-picker>` when closing on `Cancel` or `Today` click.\n      this._setActive(false);\n    }\n\n    /**\n     * @param {KeyboardEvent | MouseEvent} _event\n     * @protected\n     */\n    _shouldSetActive(_event) {\n      return !this.disabled;\n    }\n\n    /**\n     * Sets the `active` attribute on the element if an activation key is pressed.\n     *\n     * @param {KeyboardEvent} event\n     * @protected\n     * @override\n     */\n    _onKeyDown(event) {\n      super._onKeyDown(event);\n\n      if (this._shouldSetActive(event) && this._activeKeys.includes(event.key)) {\n        this._setActive(true);\n      }\n    }\n\n    /**\n     * Removes the `active` attribute from the element if the activation key is released.\n     *\n     * @param {KeyboardEvent} event\n     * @protected\n     * @override\n     */\n    _onKeyUp(event) {\n      super._onKeyUp(event);\n\n      if (this._activeKeys.includes(event.key)) {\n        this._setActive(false);\n      }\n    }\n\n    /**\n     * Toggles the `active` attribute on the element.\n     *\n     * @param {boolean} active\n     * @protected\n     */\n    _setActive(active) {\n      this.toggleAttribute('active', active);\n    }\n  };\n"],
  "mappings": ";;;;;;;;;AAAA,AAoBO,IAAM,cAAc,CAAC,eAC1B,+BAA+B,cAAc,sBAAsB,cAAc,cAAc;AAAA,MAUzF,cAAc;AAChB,WAAO,CAAC;AAAA;AAAA,EAIV,QAAQ;AACN,UAAM;AAEN,SAAK,wBAAwB,MAAM,QAAQ,CAAC,UAAU;AACpD,UAAI,KAAK,iBAAiB,QAAQ;AAChC,aAAK,WAAW;AAAA;AAAA;AAIpB,SAAK,wBAAwB,MAAM,MAAM,MAAM;AAC7C,WAAK,WAAW;AAAA;AAAA;AAAA,EAKpB,uBAAuB;AACrB,UAAM;AAMN,SAAK,WAAW;AAAA;AAAA,EAOlB,iBAAiB,QAAQ;AACvB,WAAO,CAAC,KAAK;AAAA;AAAA,EAUf,WAAW,OAAO;AAChB,UAAM,WAAW;AAEjB,QAAI,KAAK,iBAAiB,UAAU,KAAK,YAAY,SAAS,MAAM,MAAM;AACxE,WAAK,WAAW;AAAA;AAAA;AAAA,EAWpB,SAAS,OAAO;AACd,UAAM,SAAS;AAEf,QAAI,KAAK,YAAY,SAAS,MAAM,MAAM;AACxC,WAAK,WAAW;AAAA;AAAA;AAAA,EAUpB,WAAW,QAAQ;AACjB,SAAK,gBAAgB,UAAU;AAAA;AAAA;",
  "names": []
}
