{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/field-base@22.0.2/node_modules/@vaadin/field-base/src/checked-mixin.js", "../.pnpm/@vaadin/field-base@22.0.2/node_modules/@vaadin/field-base/src/slot-target-mixin.js", "../.pnpm/@vaadin/field-base@22.0.2/node_modules/@vaadin/field-base/src/slot-label-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\nimport { DisabledMixin } from '@vaadin/component-base/src/disabled-mixin.js';\nimport { DelegateStateMixin } from './delegate-state-mixin.js';\nimport { InputMixin } from './input-mixin.js';\n\n/**\n * A mixin to manage the checked state.\n *\n * @polymerMixin\n * @mixes DelegateStateMixin\n * @mixes DisabledMixin\n * @mixes InputMixin\n */\nexport const CheckedMixin = dedupingMixin(\n  (superclass) =>\n    class CheckedMixinClass extends DelegateStateMixin(DisabledMixin(InputMixin(superclass))) {\n      static get properties() {\n        return {\n          /**\n           * True if the element is checked.\n           * @type {boolean}\n           */\n          checked: {\n            type: Boolean,\n            value: false,\n            notify: true,\n            reflectToAttribute: true\n          }\n        };\n      }\n\n      static get delegateProps() {\n        return [...super.delegateProps, 'checked'];\n      }\n\n      /**\n       * @protected\n       * @override\n       */\n      _onChange(event) {\n        this._toggleChecked(event.target.checked);\n      }\n\n      /** @protected */\n      _toggleChecked(checked) {\n        this.checked = checked;\n      }\n    }\n);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin to copy the content from a source slot to a target element.\n *\n * @polymerMixin\n */\nexport const SlotTargetMixin = dedupingMixin(\n  (superclass) =>\n    class SlotTargetMixinClass extends superclass {\n      /** @protected */\n      ready() {\n        super.ready();\n\n        if (this._sourceSlot) {\n          this.__sourceSlotObserver = new MutationObserver(() => this.__checkAndCopyNodesToSlotTarget());\n\n          this.__checkAndCopyNodesToSlotTarget();\n\n          this._sourceSlot.addEventListener('slotchange', () => {\n            this.__checkAndCopyNodesToSlotTarget();\n          });\n        }\n      }\n\n      /**\n       * A reference to the source slot from which the nodes are copied to the target element.\n       *\n       * @type {HTMLSlotElement | null}\n       * @protected\n       */\n      get _sourceSlot() {\n        console.warn(`Please implement the '_sourceSlot' property in <${this.localName}>`);\n        return null;\n      }\n\n      /**\n       * A reference to the target element to which the nodes are copied from the source slot.\n       *\n       * @type {HTMLElement | null}\n       * @protected\n       */\n      get _slotTarget() {\n        console.warn(`Please implement the '_slotTarget' property in <${this.localName}>`);\n        return null;\n      }\n\n      /**\n       * Copies every node from the source slot to the target element\n       * once the source slot' content is changed.\n       *\n       * @private\n       */\n      __checkAndCopyNodesToSlotTarget() {\n        this.__sourceSlotObserver.disconnect();\n\n        if (!this._slotTarget) {\n          return;\n        }\n\n        // Remove any existing clones from the slot target\n        if (this.__slotTargetClones) {\n          this.__slotTargetClones.forEach((node) => {\n            if (node.parentElement === this._slotTarget) {\n              this._slotTarget.removeChild(node);\n            }\n          });\n          delete this.__slotTargetClones;\n        }\n\n        // Exclude whitespace text nodes\n        const nodes = this._sourceSlot\n          .assignedNodes({ flatten: true })\n          .filter((node) => !(node.nodeType == Node.TEXT_NODE && node.textContent.trim() === ''));\n\n        if (nodes.length > 0) {\n          this._slotTarget.innerHTML = '';\n          this.__copyNodesToSlotTarget(nodes);\n        }\n      }\n\n      /**\n       * Copies the nodes to the target element.\n       *\n       * @protected\n       * @param {!Array<!Node>} nodes\n       */\n      __copyNodesToSlotTarget(nodes) {\n        this.__slotTargetClones = this.__slotTargetClones || [];\n        nodes.forEach((node) => {\n          // Clone the nodes and append the clones to the target slot\n          const clone = node.cloneNode(true);\n          this.__slotTargetClones.push(clone);\n          this._slotTarget.appendChild(clone);\n          // Observe all changes to the source node to have the clones updated\n          this.__sourceSlotObserver.observe(node, {\n            attributes: true,\n            childList: true,\n            subtree: true,\n            characterData: true\n          });\n        });\n      }\n    }\n);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\nimport { LabelMixin } from './label-mixin.js';\nimport { SlotTargetMixin } from './slot-target-mixin.js';\n\n/**\n * A mixin to forward any content from the default slot to the label node.\n *\n * @polymerMixin\n * @mixes LabelMixin\n * @mixes SlotTargetMixin\n */\nexport const SlotLabelMixin = dedupingMixin(\n  (superclass) =>\n    class SlotLabelMixinClass extends SlotTargetMixin(LabelMixin(superclass)) {\n      /** @protected */\n      get _slotTarget() {\n        return this._labelNode;\n      }\n\n      /** @protected */\n      ready() {\n        super.ready();\n\n        if (this._labelNode) {\n          // The default slot's content is moved to the label node\n          // only after `LabelMixin` is initialized which means\n          // we should manually toggle the `has-label` attribute\n          // respecting the new label content.\n          this._toggleHasLabelAttribute();\n        }\n      }\n    }\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;AAAA,AAkBO,IAAM,eAAe,cAC1B,CAAC,eACC,gCAAgC,mBAAmB,cAAc,WAAW,cAAc;AAAA,aAC7E,aAAa;AACtB,WAAO;AAAA,MAKL,SAAS;AAAA,QACP,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,oBAAoB;AAAA;AAAA;AAAA;AAAA,aAKf,gBAAgB;AACzB,WAAO,CAAC,GAAG,MAAM,eAAe;AAAA;AAAA,EAOlC,UAAU,OAAO;AACf,SAAK,eAAe,MAAM,OAAO;AAAA;AAAA,EAInC,eAAe,SAAS;AACtB,SAAK,UAAU;AAAA;AAAA;;;AClDvB,AAYO,IAAM,kBAAkB,cAC7B,CAAC,eACC,mCAAmC,WAAW;AAAA,EAE5C,QAAQ;AACN,UAAM;AAEN,QAAI,KAAK,aAAa;AACpB,WAAK,uBAAuB,IAAI,iBAAiB,MAAM,KAAK;AAE5D,WAAK;AAEL,WAAK,YAAY,iBAAiB,cAAc,MAAM;AACpD,aAAK;AAAA;AAAA;AAAA;AAAA,MAWP,cAAc;AAChB,YAAQ,KAAK,mDAAmD,KAAK;AACrE,WAAO;AAAA;AAAA,MASL,cAAc;AAChB,YAAQ,KAAK,mDAAmD,KAAK;AACrE,WAAO;AAAA;AAAA,EAST,kCAAkC;AAChC,SAAK,qBAAqB;AAE1B,QAAI,CAAC,KAAK,aAAa;AACrB;AAAA;AAIF,QAAI,KAAK,oBAAoB;AAC3B,WAAK,mBAAmB,QAAQ,CAAC,SAAS;AACxC,YAAI,KAAK,kBAAkB,KAAK,aAAa;AAC3C,eAAK,YAAY,YAAY;AAAA;AAAA;AAGjC,aAAO,KAAK;AAAA;AAId,UAAM,QAAQ,KAAK,YAChB,cAAc,EAAE,SAAS,QACzB,OAAO,CAAC,SAAS,CAAE,MAAK,YAAY,KAAK,aAAa,KAAK,YAAY,WAAW;AAErF,QAAI,MAAM,SAAS,GAAG;AACpB,WAAK,YAAY,YAAY;AAC7B,WAAK,wBAAwB;AAAA;AAAA;AAAA,EAUjC,wBAAwB,OAAO;AAC7B,SAAK,qBAAqB,KAAK,sBAAsB;AACrD,UAAM,QAAQ,CAAC,SAAS;AAEtB,YAAM,QAAQ,KAAK,UAAU;AAC7B,WAAK,mBAAmB,KAAK;AAC7B,WAAK,YAAY,YAAY;AAE7B,WAAK,qBAAqB,QAAQ,MAAM;AAAA,QACtC,YAAY;AAAA,QACZ,WAAW;AAAA,QACX,SAAS;AAAA,QACT,eAAe;AAAA;AAAA;AAAA;AAAA;;;ACxG3B,AAgBO,IAAM,iBAAiB,cAC5B,CAAC,eACC,kCAAkC,gBAAgB,WAAW,aAAa;AAAA,MAEpE,cAAc;AAChB,WAAO,KAAK;AAAA;AAAA,EAId,QAAQ;AACN,UAAM;AAEN,QAAI,KAAK,YAAY;AAKnB,WAAK;AAAA;AAAA;AAAA;",
  "names": []
}
