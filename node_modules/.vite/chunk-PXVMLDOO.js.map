{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/field-base@22.0.2/node_modules/@vaadin/field-base/src/labelled-input-controller.js", "../.pnpm/@vaadin/field-base@22.0.2/node_modules/@vaadin/field-base/src/delegate-state-mixin.js", "../.pnpm/@vaadin/field-base@22.0.2/node_modules/@vaadin/field-base/src/input-mixin.js", "../.pnpm/@vaadin/component-base@22.0.2/node_modules/@vaadin/component-base/src/slot-controller.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * A controller for linking a `<label>` element with an `<input>` element.\n */\nexport class LabelledInputController {\n  constructor(input, label) {\n    this.input = input;\n    this.__preventDuplicateLabelClick = this.__preventDuplicateLabelClick.bind(this);\n\n    if (label) {\n      label.addEventListener('click', this.__preventDuplicateLabelClick);\n\n      if (input) {\n        label.setAttribute('for', input.id);\n      }\n    }\n  }\n\n  /**\n   * The native platform fires an event for both the click on the label, and also\n   * the subsequent click on the native input element caused by label click.\n   * This results in two click events arriving at the host, but we only want one.\n   * This method prevents the duplicate click and ensures the correct isTrusted event\n   * with the correct event.target arrives at the host.\n   * @private\n   */\n  __preventDuplicateLabelClick() {\n    const inputClickHandler = (e) => {\n      e.stopImmediatePropagation();\n      this.input.removeEventListener('click', inputClickHandler);\n    };\n    this.input.addEventListener('click', inputClickHandler);\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin to delegate properties and attributes to a target element.\n *\n * @polymerMixin\n */\nexport const DelegateStateMixin = dedupingMixin(\n  (superclass) =>\n    class DelegateStateMixinClass extends superclass {\n      static get properties() {\n        return {\n          /**\n           * A target element to which attributes and properties are delegated.\n           * @protected\n           */\n          stateTarget: {\n            type: Object,\n            observer: '_stateTargetChanged'\n          }\n        };\n      }\n\n      /**\n       * An array of the host attributes to delegate to the target element.\n       */\n      static get delegateAttrs() {\n        return [];\n      }\n\n      /**\n       * An array of the host properties to delegate to the target element.\n       */\n      static get delegateProps() {\n        return [];\n      }\n\n      /** @protected */\n      ready() {\n        super.ready();\n\n        this._createDelegateAttrsObserver();\n        this._createDelegatePropsObserver();\n      }\n\n      /** @protected */\n      _stateTargetChanged(target) {\n        if (target) {\n          this._ensureAttrsDelegated();\n          this._ensurePropsDelegated();\n        }\n      }\n\n      /** @protected */\n      _createDelegateAttrsObserver() {\n        this._createMethodObserver(`_delegateAttrsChanged(${this.constructor.delegateAttrs.join(', ')})`);\n      }\n\n      /** @protected */\n      _createDelegatePropsObserver() {\n        this._createMethodObserver(`_delegatePropsChanged(${this.constructor.delegateProps.join(', ')})`);\n      }\n\n      /** @protected */\n      _ensureAttrsDelegated() {\n        this.constructor.delegateAttrs.forEach((name) => {\n          this._delegateAttribute(name, this[name]);\n        });\n      }\n\n      /** @protected */\n      _ensurePropsDelegated() {\n        this.constructor.delegateProps.forEach((name) => {\n          this._delegateProperty(name, this[name]);\n        });\n      }\n\n      /** @protected */\n      _delegateAttrsChanged(...values) {\n        this.constructor.delegateAttrs.forEach((name, index) => {\n          this._delegateAttribute(name, values[index]);\n        });\n      }\n\n      /** @protected */\n      _delegatePropsChanged(...values) {\n        this.constructor.delegateProps.forEach((name, index) => {\n          this._delegateProperty(name, values[index]);\n        });\n      }\n\n      /** @protected */\n      _delegateAttribute(name, value) {\n        if (!this.stateTarget) {\n          return;\n        }\n\n        if (name === 'invalid') {\n          this._delegateAttribute('aria-invalid', value ? 'true' : false);\n        }\n\n        if (typeof value === 'boolean') {\n          this.stateTarget.toggleAttribute(name, value);\n        } else if (value) {\n          this.stateTarget.setAttribute(name, value);\n        } else {\n          this.stateTarget.removeAttribute(name);\n        }\n      }\n\n      /** @protected */\n      _delegateProperty(name, value) {\n        if (!this.stateTarget) {\n          return;\n        }\n\n        this.stateTarget[name] = value;\n      }\n    }\n);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin to store the reference to an input element\n * and add input and change event listeners to it.\n *\n * @polymerMixin\n */\nexport const InputMixin = dedupingMixin(\n  (superclass) =>\n    class InputMixinClass extends superclass {\n      static get properties() {\n        return {\n          /**\n           * A reference to the input element controlled by the mixin.\n           * Any component implementing this mixin is expected to provide it\n           * by using `this._setInputElement(input)` Polymer API.\n           *\n           * A typical case is using `InputController` that does this automatically.\n           * However, the input element does not have to always be native <input>:\n           * as an example, <vaadin-combo-box-light> accepts other components.\n           *\n           * @protected\n           * @type {!HTMLElement}\n           */\n          inputElement: {\n            type: Object,\n            readOnly: true,\n            observer: '_inputElementChanged'\n          },\n\n          /**\n           * String used to define input type.\n           * @protected\n           */\n          type: {\n            type: String,\n            readOnly: true\n          },\n\n          /**\n           * The value of the field.\n           */\n          value: {\n            type: String,\n            value: '',\n            observer: '_valueChanged',\n            notify: true\n          }\n        };\n      }\n\n      constructor() {\n        super();\n\n        this._boundOnInput = this._onInput.bind(this);\n        this._boundOnChange = this._onChange.bind(this);\n      }\n\n      /**\n       * Clear the value of the field.\n       */\n      clear() {\n        this.value = '';\n      }\n\n      /**\n       * Add event listeners to the input element instance.\n       * Override this method to add custom listeners.\n       * @param {!HTMLElement} input\n       */\n      _addInputListeners(input) {\n        input.addEventListener('input', this._boundOnInput);\n        input.addEventListener('change', this._boundOnChange);\n      }\n\n      /**\n       * Remove event listeners from the input element instance.\n       * @param {!HTMLElement} input\n       */\n      _removeInputListeners(input) {\n        input.removeEventListener('input', this._boundOnInput);\n        input.removeEventListener('change', this._boundOnChange);\n      }\n\n      /**\n       * A method to forward the value property set on the field\n       * programmatically back to the input element value.\n       * Override this method to perform additional checks,\n       * for example to skip this in certain conditions.\n       * @param {string} value\n       * @protected\n       * @override\n       */\n      _forwardInputValue(value) {\n        // Value might be set before an input element is initialized.\n        // This case should be handled separately by a component that\n        // implements this mixin, for example in `connectedCallback`.\n        if (!this.inputElement) {\n          return;\n        }\n\n        if (value != undefined) {\n          this.inputElement.value = value;\n        } else {\n          this.inputElement.value = '';\n        }\n      }\n\n      /** @protected */\n      _inputElementChanged(input, oldInput) {\n        if (input) {\n          this._addInputListeners(input);\n        } else if (oldInput) {\n          this._removeInputListeners(oldInput);\n        }\n      }\n\n      /**\n       * An input event listener used to update the field value.\n       * Override this method with an actual implementation.\n       * @param {Event} _event\n       * @protected\n       * @override\n       */\n      _onInput(event) {\n        // Ignore fake input events e.g. used by clear button.\n        this.__userInput = event.isTrusted;\n        this.value = event.target.value;\n        this.__userInput = false;\n      }\n\n      /**\n       * A change event listener.\n       * Override this method with an actual implementation.\n       * @param {Event} _event\n       * @protected\n       * @override\n       */\n      _onChange(_event) {}\n\n      /**\n       * Toggle the has-value attribute based on the value property.\n       * @param {boolean} hasValue\n       * @protected\n       */\n      _toggleHasValue(hasValue) {\n        this.toggleAttribute('has-value', hasValue);\n      }\n\n      /**\n       * Observer called when a value property changes.\n       * @param {string | undefined} newVal\n       * @param {string | undefined} oldVal\n       * @protected\n       * @override\n       */\n      _valueChanged(newVal, oldVal) {\n        this._toggleHasValue(newVal !== '' && newVal != null);\n\n        // Setting initial value to empty string, do nothing.\n        if (newVal === '' && oldVal === undefined) {\n          return;\n        }\n\n        // Value is set by the user, no need to sync it back to input.\n        if (this.__userInput) {\n          return;\n        }\n\n        // Setting a value programmatically, sync it to input element.\n        this._forwardInputValue(newVal);\n      }\n    }\n);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { FlattenedNodesObserver } from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';\n\n/**\n * A controller for providing content to slot element and observing changes.\n */\nexport class SlotController {\n  constructor(host, slotName, slotFactory, slotInitializer) {\n    this.host = host;\n    this.slotName = slotName;\n    this.slotFactory = slotFactory;\n    this.slotInitializer = slotInitializer;\n  }\n\n  hostConnected() {\n    if (!this.initialized) {\n      const { host, slotName, slotFactory, slotInitializer } = this;\n\n      const slotted = this.getSlotChild();\n\n      if (!slotted) {\n        // Slot factory is optional, some slots don't have default content.\n        if (slotFactory) {\n          const slotContent = slotFactory(host);\n          if (slotContent instanceof Element) {\n            if (slotName !== '') {\n              slotContent.setAttribute('slot', slotName);\n            }\n            host.appendChild(slotContent);\n            this.node = slotContent;\n\n            // Store reference to not pass default node to `initCustomNode`.\n            this.defaultNode = slotContent;\n          }\n        }\n      } else {\n        this.node = slotted;\n      }\n\n      // Don't try to bind `this` to initializer (normally it's arrow function).\n      // Instead, pass the host as a first argument to access component's state.\n      if (slotInitializer) {\n        slotInitializer(host, this.node);\n      }\n\n      // TODO: Consider making this behavior opt-in to improve performance.\n      this.observe();\n\n      this.initialized = true;\n    }\n  }\n\n  /**\n   * Return a reference to the node managed by the controller.\n   * @return {Node}\n   */\n  getSlotChild() {\n    const { slotName } = this;\n    return Array.from(this.host.childNodes).find((node) => {\n      // Either an element (any slot) or a text node (only un-named slot).\n      return (\n        (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) ||\n        (node.nodeType === Node.TEXT_NODE && node.textContent.trim() && slotName === '')\n      );\n    });\n  }\n\n  /**\n   * Override to initialize the newly added custom node.\n   *\n   * @param {Node} _node\n   * @protected\n   */\n  initCustomNode(_node) {}\n\n  /**\n   * Override to teardown slotted node when it's removed.\n   *\n   * @param {Node} _node\n   * @protected\n   */\n  teardownNode(_node) {}\n\n  /**\n   * Setup the observer to manage slot content changes.\n   * @protected\n   */\n  observe() {\n    const { slotName } = this;\n    const selector = slotName === '' ? 'slot:not([name])' : `slot[name=${slotName}]`;\n    const slot = this.host.shadowRoot.querySelector(selector);\n\n    this.__slotObserver = new FlattenedNodesObserver(slot, (info) => {\n      // TODO: support default slot with multiple nodes (e.g. confirm-dialog)\n      const current = this.node;\n      const newNode = info.addedNodes.find((node) => node !== current);\n\n      if (info.removedNodes.length) {\n        info.removedNodes.forEach((node) => {\n          this.teardownNode(node);\n        });\n      }\n\n      if (newNode) {\n        // Custom node is added, remove the current one.\n        if (current && current.isConnected) {\n          this.host.removeChild(current);\n        }\n\n        this.node = newNode;\n\n        if (newNode !== this.defaultNode) {\n          this.initCustomNode(newNode);\n        }\n      }\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
