{
  "version": 3,
  "sources": ["../.pnpm/@polymer/polymer@3.2.0/node_modules/@polymer/polymer/lib/utils/mixin.js"],
  "sourcesContent": ["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n * @private\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\n/* eslint-disable valid-jsdoc */\n/**\n * Wraps an ES6 class expression mixin such that the mixin is only applied\n * if it has not already been applied its base argument. Also memoizes mixin\n * applications.\n *\n * @template T\n * @param {T} mixin ES6 class expression mixin to wrap\n * @return {T}\n * @suppress {invalidCasts}\n */\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return dedupingMixin;\n};\n/* eslint-enable valid-jsdoc */\n"],
  "mappings": ";AAAA,AAYA,IAAI,WAAW;AAOf,yBAAwB;AAAA;AAExB,cAAc,UAAU;AAExB,cAAc,UAAU;AAajB,IAAM,gBAAgB,SAAS,OAAO;AAC3C,MAAI,oBAAkD,MAAO;AAC7D,MAAI,CAAC,mBAAmB;AACtB,wBAAoB,IAAI;AACK,IAAC,MAAO,sBAAsB;AAAA;AAG7D,MAAI,gBAAgB;AACpB,0BAAuB,MAAM;AAC3B,QAAI,UAAwC,KAAM;AAClD,QAAI,WAAW,QAAQ,gBAAgB;AACrC,aAAO;AAAA;AAET,QAAI,MAAM;AACV,QAAI,WAAW,IAAI,IAAI;AACvB,QAAI,CAAC,UAAU;AACb,iBAAoC,MAAO;AAC3C,UAAI,IAAI,MAAM;AAAA;AAKhB,QAAI,WAAW,OAAO,OAAqC,SAAU,cAAc,WAAW;AAC9F,aAAS,iBAAiB;AACG,IAAC,SAAU,aAAa;AACrD,WAAO;AAAA;AAGT,SAAO;AAAA;",
  "names": []
}
