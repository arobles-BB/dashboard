{
  "version": 3,
  "sources": ["../.pnpm/lit-html@2.1.1/node_modules/lit-html/src/directives/class-map.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of class names to truthy values.\n */\nexport interface ClassInfo {\n  readonly [name: string]: string | boolean | number;\n}\n\nclass ClassMapDirective extends Directive {\n  /**\n   * Stores the ClassInfo object applied to a given AttributePart.\n   * Used to unset existing values when a new ClassInfo object is applied.\n   */\n  private _previousClasses?: Set<string>;\n  private _staticClasses?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        '`classMap()` can only be used in the `class` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(classInfo: ClassInfo) {\n    // Add spaces to ensure separation from static classes\n    return (\n      ' ' +\n      Object.keys(classInfo)\n        .filter((key) => classInfo[key])\n        .join(' ') +\n      ' '\n    );\n  }\n\n  override update(part: AttributePart, [classInfo]: DirectiveParameters<this>) {\n    // Remember dynamic classes on the first render\n    if (this._previousClasses === undefined) {\n      this._previousClasses = new Set();\n      if (part.strings !== undefined) {\n        this._staticClasses = new Set(\n          part.strings\n            .join(' ')\n            .split(/\\s/)\n            .filter((s) => s !== '')\n        );\n      }\n      for (const name in classInfo) {\n        if (classInfo[name] && !this._staticClasses?.has(name)) {\n          this._previousClasses.add(name);\n        }\n      }\n      return this.render(classInfo);\n    }\n\n    const classList = part.element.classList;\n\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that we don't require down-level\n    // iteration.\n    this._previousClasses.forEach((name) => {\n      if (!(name in classInfo)) {\n        classList.remove(name);\n        this._previousClasses!.delete(name);\n      }\n    });\n\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      const value = !!classInfo[name];\n      if (\n        value !== this._previousClasses.has(name) &&\n        !this._staticClasses?.has(name)\n      ) {\n        if (value) {\n          classList.add(name);\n          this._previousClasses.add(name);\n        } else {\n          classList.remove(name);\n          this._previousClasses.delete(name);\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies dynamic CSS classes.\n *\n * This must be used in the `class` attribute and must be the only part used in\n * the attribute. It takes each property in the `classInfo` argument and adds\n * the property name to the element's `classList` if the property value is\n * truthy; if the property value is falsey, the property name is removed from\n * the element's `class`.\n *\n * For example `{foo: bar}` applies the class `foo` if the value of `bar` is\n * truthy.\n *\n * @param classInfo\n */\nexport const classMap = directive(ClassMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {ClassMapDirective};\n"],
  "mappings": ";;;;;;;;;;AAAA,AAsBA,sCAAgC,UAAS;EAQvC,YAAY,UAAkB;;AAC5B,UAAM;AACN,QACE,SAAS,SAAS,SAAS,aAC3B,SAAS,SAAS,WACjB,OAAA,SAAS,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,UAAoB,GACvC;AACA,YAAM,IAAI,MACR;;;EAMN,OAAO,WAAoB;AAEzB,WACE,MACA,OAAO,KAAK,WACT,OAAO,CAAC,QAAQ,UAAU,MAC1B,KAAK,OACR;;EAIK,OAAO,MAAqB,CAAC,YAAqC;;AAEzE,QAAI,KAAK,qBAAqB,QAAW;AACvC,WAAK,mBAAmB,IAAI;AAC5B,UAAI,KAAK,YAAY,QAAW;AAC9B,aAAK,iBAAiB,IAAI,IACxB,KAAK,QACF,KAAK,KACL,MAAM,MACN,OAAO,CAAC,MAAM,MAAM;;AAG3B,iBAAW,QAAQ,WAAW;AAC5B,YAAI,UAAU,SAAS,CAAC,OAAA,KAAK,oBAAc,QAAA,OAAA,SAAA,SAAA,GAAE,IAAI,QAAO;AACtD,eAAK,iBAAiB,IAAI;;;AAG9B,aAAO,KAAK,OAAO;;AAGrB,UAAM,YAAY,KAAK,QAAQ;AAK/B,SAAK,iBAAiB,QAAQ,CAAC,SAAQ;AACrC,UAAI,CAAE,SAAQ,YAAY;AACxB,kBAAU,OAAO;AACjB,aAAK,iBAAkB,OAAO;;;AAKlC,eAAW,QAAQ,WAAW;AAG5B,YAAM,QAAQ,CAAC,CAAC,UAAU;AAC1B,UACE,UAAU,KAAK,iBAAiB,IAAI,SACpC,CAAC,OAAA,KAAK,oBAAc,QAAA,OAAA,SAAA,SAAA,GAAE,IAAI,QAC1B;AACA,YAAI,OAAO;AACT,oBAAU,IAAI;AACd,eAAK,iBAAiB,IAAI;eACrB;AACL,oBAAU,OAAO;AACjB,eAAK,iBAAiB,OAAO;;;;AAInC,WAAO;;;AAkBJ,IAAM,WAAW,UAAU;",
  "names": []
}
