import {
  flush
} from "./chunk-KFEHHBXX.js";
import {
  templatize
} from "./chunk-GLSLTN6S.js";
import {
  Debouncer,
  enqueueDebouncer
} from "./chunk-CGDXGGUU.js";
import {
  PolymerElement,
  root
} from "./chunk-RZW6ORFJ.js";
import {
  wrap
} from "./chunk-XALJ24ZG.js";
import {
  microTask
} from "./chunk-HDWYYSVS.js";

// node_modules/.pnpm/@polymer/polymer@3.2.0/node_modules/@polymer/polymer/lib/elements/dom-if.js
var DomIf = class extends PolymerElement {
  static get is() {
    return "dom-if";
  }
  static get template() {
    return null;
  }
  static get properties() {
    return {
      if: {
        type: Boolean,
        observer: "__debounceRender"
      },
      restamp: {
        type: Boolean,
        observer: "__debounceRender"
      }
    };
  }
  constructor() {
    super();
    this.__renderDebouncer = null;
    this.__invalidProps = null;
    this.__instance = null;
    this._lastIf = false;
    this.__ctor = null;
    this.__hideTemplateChildren__ = false;
  }
  __debounceRender() {
    this.__renderDebouncer = Debouncer.debounce(this.__renderDebouncer, microTask, () => this.__render());
    enqueueDebouncer(this.__renderDebouncer);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    const parent = wrap(this).parentNode;
    if (!parent || parent.nodeType == Node.DOCUMENT_FRAGMENT_NODE && !wrap(parent).host) {
      this.__teardownInstance();
    }
  }
  connectedCallback() {
    super.connectedCallback();
    this.style.display = "none";
    if (this.if) {
      this.__debounceRender();
    }
  }
  render() {
    flush();
  }
  __render() {
    if (this.if) {
      if (!this.__ensureInstance()) {
        return;
      }
      this._showHideChildren();
    } else if (this.restamp) {
      this.__teardownInstance();
    }
    if (!this.restamp && this.__instance) {
      this._showHideChildren();
    }
    if (this.if != this._lastIf) {
      this.dispatchEvent(new CustomEvent("dom-change", {
        bubbles: true,
        composed: true
      }));
      this._lastIf = this.if;
    }
  }
  __ensureInstance() {
    let parentNode = wrap(this).parentNode;
    if (parentNode) {
      if (!this.__ctor) {
        let template = wrap(this).querySelector("template");
        if (!template) {
          let observer = new MutationObserver(() => {
            if (wrap(this).querySelector("template")) {
              observer.disconnect();
              this.__render();
            } else {
              throw new Error("dom-if requires a <template> child");
            }
          });
          observer.observe(this, { childList: true });
          return false;
        }
        this.__ctor = templatize(template, this, {
          mutableData: true,
          forwardHostProp: function(prop, value) {
            if (this.__instance) {
              if (this.if) {
                this.__instance.forwardHostProp(prop, value);
              } else {
                this.__invalidProps = this.__invalidProps || Object.create(null);
                this.__invalidProps[root(prop)] = true;
              }
            }
          }
        });
      }
      if (!this.__instance) {
        this.__instance = new this.__ctor();
        wrap(parentNode).insertBefore(this.__instance.root, this);
      } else {
        this.__syncHostProperties();
        let c$ = this.__instance.children;
        if (c$ && c$.length) {
          let lastChild = wrap(this).previousSibling;
          if (lastChild !== c$[c$.length - 1]) {
            for (let i = 0, n; i < c$.length && (n = c$[i]); i++) {
              wrap(parentNode).insertBefore(n, this);
            }
          }
        }
      }
    }
    return true;
  }
  __syncHostProperties() {
    let props = this.__invalidProps;
    if (props) {
      for (let prop in props) {
        this.__instance._setPendingProperty(prop, this.__dataHost[prop]);
      }
      this.__invalidProps = null;
      this.__instance._flushProperties();
    }
  }
  __teardownInstance() {
    if (this.__instance) {
      let c$ = this.__instance.children;
      if (c$ && c$.length) {
        let parent = wrap(c$[0]).parentNode;
        if (parent) {
          parent = wrap(parent);
          for (let i = 0, n; i < c$.length && (n = c$[i]); i++) {
            parent.removeChild(n);
          }
        }
      }
      this.__instance = null;
      this.__invalidProps = null;
    }
  }
  _showHideChildren() {
    let hidden = this.__hideTemplateChildren__ || !this.if;
    if (this.__instance) {
      this.__instance._showHideChildren(hidden);
    }
  }
};
customElements.define(DomIf.is, DomIf);

export {
  DomIf
};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
//# sourceMappingURL=chunk-IKTX77KG.js.map
