{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/polymer-legacy-adapter@22.0.2/node_modules/@vaadin/polymer-legacy-adapter/src/style-modules.js", "../.pnpm/@vaadin/polymer-legacy-adapter@22.0.2/node_modules/@vaadin/polymer-legacy-adapter/style-modules.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { DomModule } from '@polymer/polymer/lib/elements/dom-module.js';\nimport { stylesFromTemplate } from '@polymer/polymer/lib/utils/style-gather.js';\nimport { unsafeCSS } from 'lit';\nimport { __themeRegistry as themeRegistry } from '@vaadin/vaadin-themable-mixin';\n\n/**\n * @typedef CSSResult\n * @type {import('lit').CSSResult}\n *\n * @typedef DomModuleWithCachedStyles\n * @type {DomModule & {__allStyles?: CSSResult[], __partialStyles?: CSSResult[]}}\n */\n\nlet moduleIdIndex = 0;\n\n/**\n * Registers CSS styles for a component type. Make sure to register the styles before\n * the first instance of a component of the type is attached to DOM.\n *\n * @param {string} themeFor The local/tag name of the component type to register the styles for\n * @param {CSSResult[]} styles The CSS style rules to be registered for the component type\n * matching themeFor and included in the local scope of each component instance\n * @param {{moduleId?: string, include?: string | string[]}} options Additional options\n * @return {void}\n */\nfunction registerStyles(themeFor, styles = [], options = {}) {\n  const themeId = options.moduleId || `custom-style-module-${moduleIdIndex++}`;\n\n  /** @type {DomModuleWithCachedStyles} */\n  const module = document.createElement('dom-module');\n\n  if (themeFor) {\n    module.setAttribute('theme-for', themeFor);\n  }\n\n  // The styles array only needs to be included in the template in case options.moduleId is used,\n  // so that it's possible to include the styles by moduleId in some other <dom-module>\n  // (with <style include=\"module-id\">)\n  const includeStylesToTemplate = !!(styles.length && options.moduleId);\n\n  // options.include may be undefined, string or an array of strings. Convert it to an array\n  const moduleIncludes = [].concat(options.include || []);\n  if (moduleIncludes.length === 0) {\n    // No includes are used so the styles array is considered complete and can be cached as is\n    module.__allStyles = styles;\n  } else if (!includeStylesToTemplate) {\n    // Includes are used so the styles array can be cached,\n    // but the included styles must be later added on top of it.\n    // Don't cache anything in case the styles will get included in the\n    // <dom-module> template anyways to avoid duplicate styles.\n    module.__partialStyles = styles;\n  }\n\n  module.innerHTML = `\n    <template>\n      ${moduleIncludes.map((include) => `<style include=${include}></style>`)}\n      ${includeStylesToTemplate ? `<style>${styles.map((style) => style.cssText).join('\\n')}</style>` : ''}\n    </template>\n  `;\n\n  module.register(themeId);\n}\n\n/**\n * Returns an array of CSS results obtained from the style module\n * @param {DomModule} module\n * @returns {CSSResult[]}\n */\nfunction getModuleStyles(module) {\n  return stylesFromTemplate(module.querySelector('template')).map((styleElement) => {\n    return unsafeCSS(styleElement.textContent);\n  });\n}\n\n/**\n * @typedef {Object} Theme\n * @property {string} themeFor\n * @property {CSSResult[]} styles\n * @property {string} [moduleId]\n */\n\n/**\n * Returns all the registered dom-modules mapped as themable-mixin -compatible Theme objects\n * @returns {Theme[]}\n */\nfunction getAllThemes() {\n  const domModule = DomModule;\n  const modules = domModule.prototype.modules;\n\n  return Object.keys(modules).map((moduleId) => {\n    /** @type {DomModuleWithCachedStyles} */\n    const module = modules[moduleId];\n    const themeFor = module.getAttribute('theme-for');\n    module.__allStyles = module.__allStyles || getModuleStyles(module).concat(module.__partialStyles || []);\n\n    return {\n      themeFor,\n      moduleId,\n      styles: module.__allStyles\n    };\n  });\n}\n\nwindow.Vaadin = window.Vaadin || {};\nwindow.Vaadin.styleModules = {\n  getAllThemes,\n  registerStyles\n};\n\n// Convert any existing themes from the themable-mixin's themeRegistry to the style modules format\nif (themeRegistry && themeRegistry.length > 0) {\n  themeRegistry.forEach((theme) => {\n    registerStyles(theme.themeFor, theme.styles, {\n      moduleId: theme.moduleId,\n      include: theme.include\n    });\n  });\n  // Clear the themeRegistry\n  themeRegistry.length = 0;\n}\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './src/style-modules.js';\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAAA,AAkBA,IAAI,gBAAgB;AAYpB,wBAAwB,UAAU,SAAS,IAAI,UAAU,IAAI;AAC3D,QAAM,UAAU,QAAQ,YAAY,uBAAuB;AAG3D,QAAM,SAAS,SAAS,cAAc;AAEtC,MAAI,UAAU;AACZ,WAAO,aAAa,aAAa;AAAA;AAMnC,QAAM,0BAA0B,CAAC,CAAE,QAAO,UAAU,QAAQ;AAG5D,QAAM,iBAAiB,GAAG,OAAO,QAAQ,WAAW;AACpD,MAAI,eAAe,WAAW,GAAG;AAE/B,WAAO,cAAc;AAAA,aACZ,CAAC,yBAAyB;AAKnC,WAAO,kBAAkB;AAAA;AAG3B,SAAO,YAAY;AAAA;AAAA,QAEb,eAAe,IAAI,CAAC,YAAY,kBAAkB;AAAA,QAClD,0BAA0B,UAAU,OAAO,IAAI,CAAC,UAAU,MAAM,SAAS,KAAK,kBAAkB;AAAA;AAAA;AAItG,SAAO,SAAS;AAAA;AAQlB,yBAAyB,QAAQ;AAC/B,SAAO,mBAAmB,OAAO,cAAc,aAAa,IAAI,CAAC,iBAAiB;AAChF,WAAO,UAAU,aAAa;AAAA;AAAA;AAelC,wBAAwB;AACtB,QAAM,YAAY;AAClB,QAAM,UAAU,UAAU,UAAU;AAEpC,SAAO,OAAO,KAAK,SAAS,IAAI,CAAC,aAAa;AAE5C,UAAM,SAAS,QAAQ;AACvB,UAAM,WAAW,OAAO,aAAa;AACrC,WAAO,cAAc,OAAO,eAAe,gBAAgB,QAAQ,OAAO,OAAO,mBAAmB;AAEpG,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,QAAQ,OAAO;AAAA;AAAA;AAAA;AAKrB,OAAO,SAAS,OAAO,UAAU;AACjC,OAAO,OAAO,eAAe;AAAA,EAC3B;AAAA,EACA;AAAA;AAIF,IAAI,iBAAiB,cAAc,SAAS,GAAG;AAC7C,gBAAc,QAAQ,CAAC,UAAU;AAC/B,mBAAe,MAAM,UAAU,MAAM,QAAQ;AAAA,MAC3C,UAAU,MAAM;AAAA,MAChB,SAAS,MAAM;AAAA;AAAA;AAInB,gBAAc,SAAS;AAAA;AC3HzB",
  "names": []
}
