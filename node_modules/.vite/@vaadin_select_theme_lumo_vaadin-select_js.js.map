{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/select@22.0.2/node_modules/@vaadin/select/theme/lumo/vaadin-select-styles.js", "../.pnpm/@vaadin/select@22.0.2/node_modules/@vaadin/select/src/vaadin-select-overlay.js", "../.pnpm/@vaadin/select@22.0.2/node_modules/@vaadin/select/src/vaadin-select-value-button.js", "../.pnpm/@vaadin/select@22.0.2/node_modules/@vaadin/select/src/vaadin-select.js", "../.pnpm/@vaadin/select@22.0.2/node_modules/@vaadin/select/theme/lumo/vaadin-select.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport '@vaadin/vaadin-lumo-styles/font-icons.js';\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\nimport { menuOverlay } from '@vaadin/vaadin-lumo-styles/mixins/menu-overlay.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst select = css`\n  :host(:not([theme*='align'])) ::slotted([slot='value']) {\n    text-align: start;\n  }\n\n  [part='input-field'] {\n    cursor: var(--lumo-clickable-cursor);\n  }\n\n  [part='input-field'] ::slotted([slot='value']) {\n    font-weight: 500;\n  }\n\n  [part='input-field'] ::slotted([slot='value']:not([placeholder])) {\n    color: var(--lumo-body-text-color);\n  }\n\n  /* placeholder styles */\n  [part='input-field'] ::slotted([slot='value'][placeholder]) {\n    color: inherit;\n    transition: opacity 0.175s 0.1s;\n    opacity: 0.5;\n  }\n\n  [part='toggle-button']::before {\n    content: var(--lumo-icons-dropdown);\n  }\n\n  /* Highlight the toggle button when hovering over the entire component */\n  :host(:hover:not([readonly]):not([disabled])) [part='toggle-button'] {\n    color: var(--lumo-contrast-80pct);\n  }\n\n  :host([theme~='small']) [part='input-field'] ::slotted([slot='value']) {\n    --lumo-button-size: var(--lumo-size-s);\n  }\n`;\n\nregisterStyles('vaadin-select', [inputFieldShared, select], { moduleId: 'lumo-select' });\n\nregisterStyles(\n  'vaadin-select-value-button',\n  css`\n    :host {\n      min-height: var(--lumo-size-m);\n      padding: 0 0.25em;\n    }\n\n    :host::before,\n    :host::after {\n      display: none;\n    }\n\n    :host([focus-ring]) {\n      box-shadow: none;\n    }\n\n    ::slotted(vaadin-item:hover) {\n      background-color: transparent;\n    }\n  `,\n  { moduleId: 'lumo-select-value-button' }\n);\n\nconst selectOverlay = css`\n  :host {\n    --_lumo-item-selected-icon-display: block;\n  }\n\n  [part~='overlay'] {\n    min-width: var(--vaadin-select-text-field-width);\n  }\n\n  /* Small viewport adjustment */\n  :host([phone]) {\n    top: 0 !important;\n    right: 0 !important;\n    bottom: var(--vaadin-overlay-viewport-bottom, 0) !important;\n    left: 0 !important;\n    align-items: stretch;\n    justify-content: flex-end;\n  }\n\n  :host([theme~='align-left']) {\n    text-align: left;\n  }\n\n  :host([theme~='align-right']) {\n    text-align: right;\n  }\n\n  :host([theme~='align-center']) {\n    text-align: center;\n  }\n`;\n\nregisterStyles('vaadin-select-overlay', [menuOverlay, selectOverlay], { moduleId: 'lumo-select-overlay' });\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { OverlayElement } from '@vaadin/vaadin-overlay/src/vaadin-overlay.js';\nimport { PositionMixin } from '@vaadin/vaadin-overlay/src/vaadin-overlay-position-mixin.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-select-overlay',\n  css`\n    :host {\n      align-items: flex-start;\n      justify-content: flex-start;\n    }\n  `,\n  { moduleId: 'vaadin-select-overlay-styles' }\n);\n\n/**\n * An element used internally by `<vaadin-select>`. Not intended to be used separately.\n *\n * @extends OverlayElement\n * @protected\n */\nclass SelectOverlay extends PositionMixin(OverlayElement) {\n  static get is() {\n    return 'vaadin-select-overlay';\n  }\n}\n\ncustomElements.define(SelectOverlay.is, SelectOverlay);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { Button } from '@vaadin/button/src/vaadin-button.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-select-value-button',\n  css`\n    :host {\n      margin: 0;\n      min-width: 0;\n    }\n\n    ::slotted(vaadin-item) {\n      padding-left: 0;\n      padding-right: 0;\n      flex: auto;\n    }\n\n    /* placeholder styles */\n    ::slotted(:not([selected])) {\n      line-height: normal;\n    }\n\n    /* TODO: unsupported selector */\n    .vaadin-button-container {\n      text-align: inherit;\n    }\n\n    [part='label'] {\n      width: 100%;\n      padding: 0;\n      line-height: inherit;\n    }\n  `,\n  { moduleId: 'vaadin-select-value-button-styles' }\n);\n\n/**\n * An element used internally by `<vaadin-select>`. Not intended to be used separately.\n *\n * @extends Button\n * @protected\n */\nclass SelectValueButton extends Button {\n  static get is() {\n    return 'vaadin-select-value-button';\n  }\n}\n\ncustomElements.define(SelectValueButton.is, SelectValueButton);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@polymer/iron-media-query/iron-media-query.js';\nimport '@vaadin/input-container/src/vaadin-input-container.js';\nimport './vaadin-select-overlay.js';\nimport './vaadin-select-value-button.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { SlotMixin } from '@vaadin/component-base/src/slot-mixin.js';\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\nimport { DelegateFocusMixin } from '@vaadin/field-base/src/delegate-focus-mixin.js';\nimport { FieldMixin } from '@vaadin/field-base/src/field-mixin.js';\nimport { fieldShared } from '@vaadin/field-base/src/styles/field-shared-styles.js';\nimport { inputFieldContainer } from '@vaadin/field-base/src/styles/input-field-container-styles.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles('vaadin-select', [fieldShared, inputFieldContainer], { moduleId: 'vaadin-select-styles' });\n\n/**\n * `<vaadin-select>` is a Web Component for selecting values from a list of items.\n *\n * ### Rendering\n *\n * The content of the select can be populated by using the renderer callback function.\n *\n * The renderer function provides `root`, `select` arguments.\n * Generate DOM content, append it to the `root` element and control the state\n * of the host element by accessing `select`.\n *\n * ```html\n * <vaadin-select id=\"select\"></vaadin-select>\n * ```\n * ```js\n * const select = document.querySelector('#select');\n * select.renderer = function(root, select) {\n *   const listBox = document.createElement('vaadin-list-box');\n *   // append 3 <vaadin-item> elements\n *   ['Jose', 'Manolo', 'Pedro'].forEach(function(name) {\n *     const item = document.createElement('vaadin-item');\n *     item.textContent = name;\n *     item.setAttribute('label', name)\n *     listBox.appendChild(item);\n *   });\n *\n *   // update the content\n *   root.appendChild(listBox);\n * };\n * ```\n *\n * Renderer is called on initialization of new select and on its opening.\n * DOM generated during the renderer call can be reused\n * in the next renderer call and will be provided with the `root` argument.\n * On first call it will be empty.\n *\n * * Hint: By setting the `label` property of inner vaadin-items you will\n * be able to change the visual representation of the selected value in the input part.\n *\n * ### Styling\n *\n * The following custom properties are available for styling:\n *\n * Custom property                    | Description                  | Target element          | Default\n * -----------------------------------|------------------------------|----------------------------------\n * `--vaadin-field-default-width`     | Default width of the field   | :host                   | `12em`\n * `--vaadin-select-text-field-width` | Effective width of the field | `vaadin-select-overlay` |\n *\n * `<vaadin-select>` provides mostly the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n *\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n *\n * Part name       | Description\n * ----------------|----------------\n * `toggle-button` | The toggle button\n *\n * In addition to `<vaadin-text-field>` state attributes, the following state attributes are available for theming:\n *\n * Attribute | Description                 | Part name\n * ----------|-----------------------------|-----------\n * `opened`  | Set when the select is open | :host\n *\n * There are two exceptions in terms of styling compared to `<vaadin-text-field>`:\n * - the `clear-button` shadow DOM part does not exist in `<vaadin-select>`.\n * - the `input-prevented` state attribute is not supported by `<vaadin-select>`.\n *\n * ### Internal components\n *\n * In addition to `<vaadin-select>` itself, the following internal\n * components are themable:\n *\n * - `<vaadin-select-overlay>` - has the same API as [`<vaadin-overlay>`](#/elements/vaadin-overlay).\n * - `<vaadin-select-value-button>` - has the same API as [`<vaadin-button>`](#/elements/vaadin-button).\n * - [`<vaadin-input-container>`](#/elements/vaadin-input-container) - an internal element wrapping the button.\n *\n * Note: the `theme` attribute value set on `<vaadin-select>` is\n * propagated to the internal components listed above.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n *\n * @extends HTMLElement\n * @mixes ElementMixin\n * @mixes ThemableMixin\n * @mixes SlotMixin\n * @mixes FieldMixin\n * @mixes DelegateFocusMixin\n */\nclass Select extends DelegateFocusMixin(FieldMixin(SlotMixin(ElementMixin(ThemableMixin(PolymerElement))))) {\n  static get is() {\n    return 'vaadin-select';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        ::slotted([slot='value']) {\n          flex-grow: 1;\n          background-color: transparent;\n        }\n      </style>\n\n      <div class=\"vaadin-select-container\">\n        <div part=\"label\" on-click=\"_onClick\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\" on-click=\"focus\"></span>\n        </div>\n\n        <vaadin-input-container\n          part=\"input-field\"\n          readonly=\"[[readonly]]\"\n          disabled=\"[[disabled]]\"\n          invalid=\"[[invalid]]\"\n          theme$=\"[[theme]]\"\n          on-click=\"_onClick\"\n        >\n          <slot name=\"prefix\" slot=\"prefix\"></slot>\n          <slot name=\"value\"></slot>\n          <div part=\"toggle-button\" slot=\"suffix\"></div>\n        </vaadin-input-container>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n\n      <vaadin-select-overlay\n        position-target=\"[[_inputContainer]]\"\n        opened=\"{{opened}}\"\n        with-backdrop=\"[[_phone]]\"\n        phone$=\"[[_phone]]\"\n        theme$=\"[[theme]]\"\n      ></vaadin-select-overlay>\n\n      <iron-media-query query=\"[[_phoneMediaQuery]]\" query-matches=\"{{_phone}}\"></iron-media-query>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Set when the select is open\n       * @type {boolean}\n       */\n      opened: {\n        type: Boolean,\n        value: false,\n        notify: true,\n        reflectToAttribute: true,\n        observer: '_openedChanged'\n      },\n\n      /**\n       * Custom function for rendering the content of the `<vaadin-select>`.\n       * Receives two arguments:\n       *\n       * - `root` The `<vaadin-select-overlay>` internal container\n       *   DOM element. Append your content to it.\n       * - `select` The reference to the `<vaadin-select>` element.\n       * @type {!SelectRenderer | undefined}\n       */\n      renderer: Function,\n\n      /**\n       * It stores the the `value` property of the selected item, providing the\n       * value for iron-form.\n       * When there\u2019s an item selected, it's the value of that item, otherwise\n       * it's an empty string.\n       * On change or initialization, the component finds the item which matches the\n       * value and displays it.\n       * If no value is provided to the component, it selects the first item without\n       * value or empty value.\n       * Hint: If you do not want to select any item by default, you can either set all\n       * the values of inner vaadin-items, or set the vaadin-select value to\n       * an inexistent value in the items list.\n       * @type {string}\n       */\n      value: {\n        type: String,\n        value: '',\n        notify: true,\n        observer: '_valueChanged'\n      },\n\n      /**\n       * The name of this element.\n       */\n      name: {\n        type: String\n      },\n\n      /**\n       * A hint to the user of what can be entered in the control.\n       * The placeholder will be displayed in the case that there\n       * is no item selected, or the selected item has an empty\n       * string label, or the selected item has no label and it's\n       * DOM content is empty.\n       */\n      placeholder: {\n        type: String\n      },\n\n      /**\n       * When present, it specifies that the element is read-only.\n       * @type {boolean}\n       */\n      readonly: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n\n      /** @private */\n      _phone: Boolean,\n\n      /** @private */\n      _phoneMediaQuery: {\n        value: '(max-width: 420px), (max-height: 420px)'\n      },\n\n      /** @private */\n      _overlayElement: Object,\n\n      /** @private */\n      _inputElement: Object,\n\n      /** @private */\n      _inputContainer: Object,\n\n      /** @private */\n      _items: Object\n    };\n  }\n\n  static get observers() {\n    return [\n      '_updateAriaExpanded(opened)',\n      '_updateAriaRequired(required)',\n      '_updateSelectedItem(value, _items, placeholder)',\n      '_rendererChanged(renderer, _overlayElement)'\n    ];\n  }\n\n  /** @protected */\n  get slots() {\n    return {\n      ...super.slots,\n      value: () => {\n        const button = document.createElement('vaadin-select-value-button');\n        button.setAttribute('aria-haspopup', 'listbox');\n        return button;\n      }\n    };\n  }\n\n  /** @protected */\n  get _valueButton() {\n    return this._getDirectSlotChild('value');\n  }\n\n  constructor() {\n    super();\n\n    // Ensure every instance has unique ID\n    const uniqueId = (Select._uniqueSelectId = 1 + Select._uniqueSelectId || 0);\n    this._fieldId = `${this.localName}-${uniqueId}`;\n\n    this._boundOnKeyDown = this._onKeyDown.bind(this);\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n\n    if (this._valueButton) {\n      this._valueButton.setAttribute('aria-labelledby', `${this._labelId} ${this._fieldId}`);\n\n      this._updateAriaRequired(this.required);\n      this._updateAriaExpanded(this.opened);\n\n      this._setFocusElement(this._valueButton);\n      this.ariaTarget = this._valueButton;\n\n      this._valueButton.addEventListener('keydown', this._boundOnKeyDown);\n    }\n  }\n\n  /** @protected */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._valueButton) {\n      this._valueButton.removeEventListener('keydown', this._boundOnKeyDown);\n    }\n    // Making sure the select is closed and removed from DOM after detaching the select.\n    this.opened = false;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this._overlayElement = this.shadowRoot.querySelector('vaadin-select-overlay');\n    this._inputContainer = this.shadowRoot.querySelector('[part~=\"input-field\"]');\n\n    processTemplates(this);\n  }\n\n  /**\n   * Requests an update for the content of the select.\n   * While performing the update, it invokes the renderer passed in the `renderer` property.\n   *\n   * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\n   */\n  requestContentUpdate() {\n    if (!this._overlayElement) {\n      return;\n    }\n\n    this._overlayElement.requestContentUpdate();\n\n    // Ensure menu element is set\n    this._assignMenuElement();\n\n    if (this._menuElement && this._menuElement.items) {\n      this._updateSelectedItem(this.value, this._menuElement.items);\n    }\n  }\n\n  /** @private */\n  _rendererChanged(renderer, overlay) {\n    if (!overlay) {\n      return;\n    }\n\n    overlay.setProperties({ owner: this, renderer });\n\n    this.requestContentUpdate();\n\n    if (renderer) {\n      this._assignMenuElement();\n    }\n  }\n\n  /** @private */\n  _assignMenuElement() {\n    const menuElement = this.__getMenuElement();\n\n    if (menuElement && menuElement !== this.__lastMenuElement) {\n      this._menuElement = menuElement;\n      menuElement.addEventListener('items-changed', () => {\n        this._items = menuElement.items;\n        this._items.forEach((item) => item.setAttribute('role', 'option'));\n      });\n      menuElement.addEventListener('selected-changed', () => this.__updateValueButton());\n      // Use capture phase to make it possible for `<vaadin-grid-pro-edit-select>`\n      // to override and handle the keydown event before the value change happens.\n      menuElement.addEventListener('keydown', (e) => this._onKeyDownInside(e), true);\n      menuElement.addEventListener(\n        'click',\n        () => {\n          this.__userInteraction = true;\n          this.opened = false;\n        },\n        true\n      );\n\n      menuElement.setAttribute('role', 'listbox');\n\n      // Store the menu element reference\n      this.__lastMenuElement = menuElement;\n    }\n  }\n\n  /** @private */\n  __getMenuElement() {\n    const content = this._overlayElement && this._overlayElement.content;\n    return content ? Array.from(content.children).find((el) => el.localName !== 'style') : null;\n  }\n\n  /** @private */\n  _valueChanged(value, oldValue) {\n    this.toggleAttribute('has-value', Boolean(value));\n\n    // Skip validation for the initial empty string value\n    if (value === '' && oldValue === undefined) {\n      return;\n    }\n    this.validate();\n  }\n\n  /**\n   * Opens the overlay if the field is not read-only.\n   *\n   * @private\n   */\n  _onClick() {\n    this.opened = !this.readonly;\n  }\n\n  /**\n   * @param {!KeyboardEvent} e\n   * @protected\n   */\n  _onKeyDown(e) {\n    if (!this.readonly && !this.opened) {\n      if (/^(Enter|SpaceBar|\\s|ArrowDown|Down|ArrowUp|Up)$/.test(e.key)) {\n        e.preventDefault();\n        this.opened = true;\n      } else if (/[\\p{L}\\p{Nd}]/u.test(e.key) && e.key.length === 1) {\n        const selected = this._menuElement.selected;\n        const currentIdx = selected !== undefined ? selected : -1;\n        const newIdx = this._menuElement._searchKey(currentIdx, e.key);\n        if (newIdx >= 0) {\n          this.__userInteraction = true;\n\n          // Announce the value selected with the first letter shortcut\n          this._updateAriaLive(true);\n          this._menuElement.selected = newIdx;\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {!KeyboardEvent} e\n   * @protected\n   */\n  _onKeyDownInside(e) {\n    if (/^(Tab)$/.test(e.key)) {\n      this.opened = false;\n    }\n  }\n\n  /** @private */\n  _openedChanged(opened, wasOpened) {\n    if (opened) {\n      // Avoid multiple announcements when a value gets selected from the dropdown\n      this._updateAriaLive(false);\n\n      if (!this._overlayElement || !this._menuElement || !this.focusElement || this.disabled || this.readonly) {\n        this.opened = false;\n        return;\n      }\n\n      this._overlayElement.style.setProperty(\n        '--vaadin-select-text-field-width',\n        this._inputContainer.offsetWidth + 'px'\n      );\n\n      // Preserve focus-ring to restore it later\n      const hasFocusRing = this.hasAttribute('focus-ring');\n      this._openedWithFocusRing = hasFocusRing;\n\n      // Opened select should not keep focus-ring\n      if (hasFocusRing) {\n        this.removeAttribute('focus-ring');\n      }\n\n      this._menuElement.focus();\n    } else if (wasOpened) {\n      this.focus();\n      if (this._openedWithFocusRing) {\n        this.setAttribute('focus-ring', '');\n      }\n      this.validate();\n    }\n  }\n\n  /** @private */\n  _updateAriaExpanded(opened) {\n    if (this._valueButton) {\n      this._valueButton.setAttribute('aria-expanded', opened ? 'true' : 'false');\n    }\n  }\n\n  /** @private */\n  _updateAriaRequired(required) {\n    if (this._valueButton) {\n      this._valueButton.setAttribute('aria-required', required ? 'true' : 'false');\n    }\n  }\n\n  /** @private */\n  _updateAriaLive(ariaLive) {\n    if (this._valueButton) {\n      if (ariaLive) {\n        this._valueButton.setAttribute('aria-live', 'polite');\n      } else {\n        this._valueButton.removeAttribute('aria-live');\n      }\n    }\n  }\n\n  /** @private */\n  __attachSelectedItem(selected) {\n    let labelItem;\n\n    const label = selected.getAttribute('label');\n    if (label) {\n      labelItem = this.__createItem(label);\n    } else {\n      labelItem = selected.cloneNode(true);\n    }\n\n    // store reference to the original item\n    labelItem._sourceItem = selected;\n\n    this.__appendItem(labelItem);\n\n    // ensure the item gets proper styles\n    labelItem.selected = true;\n  }\n\n  /** @private */\n  __createItem(text) {\n    const item = document.createElement('vaadin-item');\n    item.textContent = text;\n    return item;\n  }\n\n  /** @private */\n  __appendItem(item) {\n    item.removeAttribute('tabindex');\n    item.removeAttribute('role');\n    item.setAttribute('id', this._fieldId);\n\n    this._valueButton.appendChild(item);\n  }\n\n  /** @private */\n  __updateValueButton() {\n    if (!this._valueButton) {\n      return;\n    }\n\n    this._valueButton.innerHTML = '';\n\n    const selected = this._items[this._menuElement.selected];\n\n    this._valueButton.removeAttribute('placeholder');\n\n    if (!selected) {\n      if (this.placeholder) {\n        const item = this.__createItem(this.placeholder);\n        this.__appendItem(item);\n        this._valueButton.setAttribute('placeholder', '');\n      }\n    } else {\n      this.__attachSelectedItem(selected);\n\n      if (!this._valueChanging) {\n        this._selectedChanging = true;\n        this.value = selected.value || '';\n        if (this.__userInteraction) {\n          this.opened = false;\n          this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\n          this.__userInteraction = false;\n        }\n        delete this._selectedChanging;\n      }\n    }\n  }\n\n  /** @private */\n  _updateSelectedItem(value, items) {\n    if (items) {\n      this._menuElement.selected = items.reduce((prev, item, idx) => {\n        return prev === undefined && item.value === value ? idx : prev;\n      }, undefined);\n      if (!this._selectedChanging) {\n        this._valueChanging = true;\n        this.__updateValueButton();\n        delete this._valueChanging;\n      }\n    }\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to not remove focused\n   * state when select is opened and focus moves to list-box.\n   * @return {boolean}\n   * @protected\n   * @override\n   */\n  _shouldRemoveFocus() {\n    return !this.opened;\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to validate on blur.\n   * @param {boolean} focused\n   * @protected\n   * @override\n   */\n  _setFocused(focused) {\n    super._setFocused(focused);\n\n    if (!focused) {\n      this.validate();\n    }\n  }\n\n  /**\n   * Returns true if `value` is valid, and sets the `invalid` flag appropriately.\n   *\n   * @return {boolean} True if the value is valid and sets the `invalid` flag appropriately\n   */\n  validate() {\n    return !(this.invalid = !(this.disabled || !this.required || this.value));\n  }\n\n  /**\n   * Fired when the user commits a value change.\n   *\n   * @event change\n   */\n}\n\ncustomElements.define(Select.is, Select);\n\nexport { Select };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/button/theme/lumo/vaadin-button.js';\nimport '@vaadin/input-container/theme/lumo/vaadin-input-container.js';\nimport '@vaadin/item/theme/lumo/vaadin-item.js';\nimport '@vaadin/list-box/theme/lumo/vaadin-list-box.js';\nimport './vaadin-select-styles.js';\nimport '../../src/vaadin-select.js';\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAYA,IAAM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsCf,eAAe,iBAAiB,CAAC,kBAAkB,SAAS,EAAE,UAAU;AAExE,eACE,8BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAmBA,EAAE,UAAU;AAGd,IAAM,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCtB,eAAe,yBAAyB,CAAC,aAAa,gBAAgB,EAAE,UAAU;;;AC5GlF,AASA,eACE,yBACA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMA,EAAE,UAAU;AASd,kCAA4B,cAAc,gBAAgB;AAAA,aAC7C,KAAK;AACd,WAAO;AAAA;AAAA;AAIX,eAAe,OAAO,cAAc,IAAI;;;AChCxC,AAQA,eACE,8BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA4BA,EAAE,UAAU;AASd,sCAAgC,OAAO;AAAA,aAC1B,KAAK;AACd,WAAO;AAAA;AAAA;AAIX,eAAe,OAAO,kBAAkB,IAAI;;;ACrD5C,AAmBA,eAAe,iBAAiB,CAAC,aAAa,sBAAsB,EAAE,UAAU;AAgGhF,2BAAqB,mBAAmB,WAAW,UAAU,aAAa,cAAc,oBAAoB;AAAA,aAC/F,KAAK;AACd,WAAO;AAAA;AAAA,aAGE,WAAW;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAgDE,aAAa;AACtB,WAAO;AAAA,MAKL,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,oBAAoB;AAAA,QACpB,UAAU;AAAA;AAAA,MAYZ,UAAU;AAAA,MAgBV,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,UAAU;AAAA;AAAA,MAMZ,MAAM;AAAA,QACJ,MAAM;AAAA;AAAA,MAUR,aAAa;AAAA,QACX,MAAM;AAAA;AAAA,MAOR,UAAU;AAAA,QACR,MAAM;AAAA,QACN,OAAO;AAAA,QACP,oBAAoB;AAAA;AAAA,MAItB,QAAQ;AAAA,MAGR,kBAAkB;AAAA,QAChB,OAAO;AAAA;AAAA,MAIT,iBAAiB;AAAA,MAGjB,eAAe;AAAA,MAGf,iBAAiB;AAAA,MAGjB,QAAQ;AAAA;AAAA;AAAA,aAID,YAAY;AACrB,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA,MAKA,QAAQ;AACV,WAAO,iCACF,MAAM,QADJ;AAAA,MAEL,OAAO,MAAM;AACX,cAAM,SAAS,SAAS,cAAc;AACtC,eAAO,aAAa,iBAAiB;AACrC,eAAO;AAAA;AAAA;AAAA;AAAA,MAMT,eAAe;AACjB,WAAO,KAAK,oBAAoB;AAAA;AAAA,EAGlC,cAAc;AACZ;AAGA,UAAM,WAAY,OAAO,kBAAkB,IAAI,OAAO,mBAAmB;AACzE,SAAK,WAAW,GAAG,KAAK,aAAa;AAErC,SAAK,kBAAkB,KAAK,WAAW,KAAK;AAAA;AAAA,EAI9C,oBAAoB;AAClB,UAAM;AAEN,QAAI,KAAK,cAAc;AACrB,WAAK,aAAa,aAAa,mBAAmB,GAAG,KAAK,YAAY,KAAK;AAE3E,WAAK,oBAAoB,KAAK;AAC9B,WAAK,oBAAoB,KAAK;AAE9B,WAAK,iBAAiB,KAAK;AAC3B,WAAK,aAAa,KAAK;AAEvB,WAAK,aAAa,iBAAiB,WAAW,KAAK;AAAA;AAAA;AAAA,EAKvD,uBAAuB;AACrB,UAAM;AACN,QAAI,KAAK,cAAc;AACrB,WAAK,aAAa,oBAAoB,WAAW,KAAK;AAAA;AAGxD,SAAK,SAAS;AAAA;AAAA,EAIhB,QAAQ;AACN,UAAM;AAEN,SAAK,kBAAkB,KAAK,WAAW,cAAc;AACrD,SAAK,kBAAkB,KAAK,WAAW,cAAc;AAErD,qBAAiB;AAAA;AAAA,EASnB,uBAAuB;AACrB,QAAI,CAAC,KAAK,iBAAiB;AACzB;AAAA;AAGF,SAAK,gBAAgB;AAGrB,SAAK;AAEL,QAAI,KAAK,gBAAgB,KAAK,aAAa,OAAO;AAChD,WAAK,oBAAoB,KAAK,OAAO,KAAK,aAAa;AAAA;AAAA;AAAA,EAK3D,iBAAiB,UAAU,SAAS;AAClC,QAAI,CAAC,SAAS;AACZ;AAAA;AAGF,YAAQ,cAAc,EAAE,OAAO,MAAM;AAErC,SAAK;AAEL,QAAI,UAAU;AACZ,WAAK;AAAA;AAAA;AAAA,EAKT,qBAAqB;AACnB,UAAM,cAAc,KAAK;AAEzB,QAAI,eAAe,gBAAgB,KAAK,mBAAmB;AACzD,WAAK,eAAe;AACpB,kBAAY,iBAAiB,iBAAiB,MAAM;AAClD,aAAK,SAAS,YAAY;AAC1B,aAAK,OAAO,QAAQ,CAAC,SAAS,KAAK,aAAa,QAAQ;AAAA;AAE1D,kBAAY,iBAAiB,oBAAoB,MAAM,KAAK;AAG5D,kBAAY,iBAAiB,WAAW,CAAC,MAAM,KAAK,iBAAiB,IAAI;AACzE,kBAAY,iBACV,SACA,MAAM;AACJ,aAAK,oBAAoB;AACzB,aAAK,SAAS;AAAA,SAEhB;AAGF,kBAAY,aAAa,QAAQ;AAGjC,WAAK,oBAAoB;AAAA;AAAA;AAAA,EAK7B,mBAAmB;AACjB,UAAM,UAAU,KAAK,mBAAmB,KAAK,gBAAgB;AAC7D,WAAO,UAAU,MAAM,KAAK,QAAQ,UAAU,KAAK,CAAC,OAAO,GAAG,cAAc,WAAW;AAAA;AAAA,EAIzF,cAAc,OAAO,UAAU;AAC7B,SAAK,gBAAgB,aAAa,QAAQ;AAG1C,QAAI,UAAU,MAAM,aAAa,QAAW;AAC1C;AAAA;AAEF,SAAK;AAAA;AAAA,EAQP,WAAW;AACT,SAAK,SAAS,CAAC,KAAK;AAAA;AAAA,EAOtB,WAAW,GAAG;AACZ,QAAI,CAAC,KAAK,YAAY,CAAC,KAAK,QAAQ;AAClC,UAAI,kDAAkD,KAAK,EAAE,MAAM;AACjE,UAAE;AACF,aAAK,SAAS;AAAA,iBACL,iBAAiB,KAAK,EAAE,QAAQ,EAAE,IAAI,WAAW,GAAG;AAC7D,cAAM,WAAW,KAAK,aAAa;AACnC,cAAM,aAAa,aAAa,SAAY,WAAW;AACvD,cAAM,SAAS,KAAK,aAAa,WAAW,YAAY,EAAE;AAC1D,YAAI,UAAU,GAAG;AACf,eAAK,oBAAoB;AAGzB,eAAK,gBAAgB;AACrB,eAAK,aAAa,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,EAUrC,iBAAiB,GAAG;AAClB,QAAI,UAAU,KAAK,EAAE,MAAM;AACzB,WAAK,SAAS;AAAA;AAAA;AAAA,EAKlB,eAAe,QAAQ,WAAW;AAChC,QAAI,QAAQ;AAEV,WAAK,gBAAgB;AAErB,UAAI,CAAC,KAAK,mBAAmB,CAAC,KAAK,gBAAgB,CAAC,KAAK,gBAAgB,KAAK,YAAY,KAAK,UAAU;AACvG,aAAK,SAAS;AACd;AAAA;AAGF,WAAK,gBAAgB,MAAM,YACzB,oCACA,KAAK,gBAAgB,cAAc;AAIrC,YAAM,eAAe,KAAK,aAAa;AACvC,WAAK,uBAAuB;AAG5B,UAAI,cAAc;AAChB,aAAK,gBAAgB;AAAA;AAGvB,WAAK,aAAa;AAAA,eACT,WAAW;AACpB,WAAK;AACL,UAAI,KAAK,sBAAsB;AAC7B,aAAK,aAAa,cAAc;AAAA;AAElC,WAAK;AAAA;AAAA;AAAA,EAKT,oBAAoB,QAAQ;AAC1B,QAAI,KAAK,cAAc;AACrB,WAAK,aAAa,aAAa,iBAAiB,SAAS,SAAS;AAAA;AAAA;AAAA,EAKtE,oBAAoB,UAAU;AAC5B,QAAI,KAAK,cAAc;AACrB,WAAK,aAAa,aAAa,iBAAiB,WAAW,SAAS;AAAA;AAAA;AAAA,EAKxE,gBAAgB,UAAU;AACxB,QAAI,KAAK,cAAc;AACrB,UAAI,UAAU;AACZ,aAAK,aAAa,aAAa,aAAa;AAAA,aACvC;AACL,aAAK,aAAa,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAMxC,qBAAqB,UAAU;AAC7B,QAAI;AAEJ,UAAM,QAAQ,SAAS,aAAa;AACpC,QAAI,OAAO;AACT,kBAAY,KAAK,aAAa;AAAA,WACzB;AACL,kBAAY,SAAS,UAAU;AAAA;AAIjC,cAAU,cAAc;AAExB,SAAK,aAAa;AAGlB,cAAU,WAAW;AAAA;AAAA,EAIvB,aAAa,MAAM;AACjB,UAAM,OAAO,SAAS,cAAc;AACpC,SAAK,cAAc;AACnB,WAAO;AAAA;AAAA,EAIT,aAAa,MAAM;AACjB,SAAK,gBAAgB;AACrB,SAAK,gBAAgB;AACrB,SAAK,aAAa,MAAM,KAAK;AAE7B,SAAK,aAAa,YAAY;AAAA;AAAA,EAIhC,sBAAsB;AACpB,QAAI,CAAC,KAAK,cAAc;AACtB;AAAA;AAGF,SAAK,aAAa,YAAY;AAE9B,UAAM,WAAW,KAAK,OAAO,KAAK,aAAa;AAE/C,SAAK,aAAa,gBAAgB;AAElC,QAAI,CAAC,UAAU;AACb,UAAI,KAAK,aAAa;AACpB,cAAM,OAAO,KAAK,aAAa,KAAK;AACpC,aAAK,aAAa;AAClB,aAAK,aAAa,aAAa,eAAe;AAAA;AAAA,WAE3C;AACL,WAAK,qBAAqB;AAE1B,UAAI,CAAC,KAAK,gBAAgB;AACxB,aAAK,oBAAoB;AACzB,aAAK,QAAQ,SAAS,SAAS;AAC/B,YAAI,KAAK,mBAAmB;AAC1B,eAAK,SAAS;AACd,eAAK,cAAc,IAAI,YAAY,UAAU,EAAE,SAAS;AACxD,eAAK,oBAAoB;AAAA;AAE3B,eAAO,KAAK;AAAA;AAAA;AAAA;AAAA,EAMlB,oBAAoB,OAAO,OAAO;AAChC,QAAI,OAAO;AACT,WAAK,aAAa,WAAW,MAAM,OAAO,CAAC,MAAM,MAAM,QAAQ;AAC7D,eAAO,SAAS,UAAa,KAAK,UAAU,QAAQ,MAAM;AAAA,SACzD;AACH,UAAI,CAAC,KAAK,mBAAmB;AAC3B,aAAK,iBAAiB;AACtB,aAAK;AACL,eAAO,KAAK;AAAA;AAAA;AAAA;AAAA,EAYlB,qBAAqB;AACnB,WAAO,CAAC,KAAK;AAAA;AAAA,EASf,YAAY,SAAS;AACnB,UAAM,YAAY;AAElB,QAAI,CAAC,SAAS;AACZ,WAAK;AAAA;AAAA;AAAA,EAST,WAAW;AACT,WAAO,CAAE,MAAK,UAAU,CAAE,MAAK,YAAY,CAAC,KAAK,YAAY,KAAK;AAAA;AAAA;AAUtE,eAAe,OAAO,OAAO,IAAI;ACzoBjC",
  "names": []
}
