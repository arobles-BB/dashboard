{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/form-layout@22.0.2/node_modules/@vaadin/form-layout/theme/lumo/vaadin-form-item-styles.js", "../.pnpm/@vaadin/form-layout@22.0.2/node_modules/@vaadin/form-layout/src/vaadin-form-item.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport '@vaadin/vaadin-lumo-styles/typography.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-form-item',\n  css`\n    :host {\n      --vaadin-form-item-row-spacing: 0;\n    }\n\n    /* font-weight, margin-bottom, transition and line-height same as for part label in text-field */\n    [part='label'] {\n      color: var(--lumo-secondary-text-color);\n      font-family: var(--lumo-font-family);\n      font-size: var(--lumo-font-size-s);\n      font-weight: 500;\n      margin-top: var(--lumo-space-m);\n      margin-left: calc(var(--lumo-border-radius-m) / 4);\n      margin-bottom: var(--lumo-space-xs);\n      transition: color 0.4s;\n      line-height: 1.333;\n    }\n  `,\n  { moduleId: 'lumo-form-item' }\n);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\n/**\n * `<vaadin-form-item>` is a Web Component providing labelled form item wrapper\n * for using inside `<vaadin-form-layout>`.\n *\n * `<vaadin-form-item>` accepts any number of children as the input content,\n * and also has a separate named `label` slot:\n *\n * ```html\n * <vaadin-form-item>\n *   <label slot=\"label\">Label aside</label>\n *   <input>\n * </vaadin-form-item>\n * ```\n *\n * Any content can be used. For instance, you can have multiple input elements\n * with surrounding text. The label can be an element of any type:\n *\n * ```html\n * <vaadin-form-item>\n *   <span slot=\"label\">Date of Birth</span>\n *   <input placeholder=\"YYYY\" size=\"4\"> -\n *   <input placeholder=\"MM\" size=\"2\"> -\n *   <input placeholder=\"DD\" size=\"2\"><br>\n *   <em>Example: 1900-01-01</em>\n * </vaadin-form-item>\n * ```\n *\n * The label is optional and can be omitted:\n *\n * ```html\n * <vaadin-form-item>\n *   <input type=\"checkbox\"> Subscribe to our Newsletter\n * </vaadin-form-item>\n * ```\n *\n * By default, the `label` slot content is displayed aside of the input content.\n * When `label-position=\"top\"` is set, the `label` slot content is displayed on top:\n *\n * ```html\n * <vaadin-form-item label-position=\"top\">\n *   <label slot=\"label\">Label on top</label>\n *   <input>\n * </vaadin-form-item>\n * ```\n *\n * **Note:** Normally, `<vaadin-form-item>` is used as a child of\n * a `<vaadin-form-layout>` element. Setting `label-position` is unnecessary,\n * because the `label-position` attribute is triggered automatically by the parent\n * `<vaadin-form-layout>`, depending on its width and responsive behavior.\n *\n * ### Input Width\n *\n * By default, `<vaadin-form-item>` does not manipulate the width of the slotted\n * input elements. Optionally you can stretch the child input element to fill\n * the available width for the input content by adding the `full-width` class:\n *\n * ```html\n * <vaadin-form-item>\n *   <label slot=\"label\">Label</label>\n *   <input class=\"full-width\">\n * </vaadin-form-item>\n * ```\n *\n * ### Styling\n *\n * The `label-position` host attribute can be used to target the label on top state:\n *\n * ```\n * :host([label-position=\"top\"]) {\n *   padding-top: 0.5rem;\n * }\n * ```\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ---|---\n * label | The label slot container\n *\n * ### Custom CSS Properties Reference\n *\n * The following custom CSS properties are available on the `<vaadin-form-item>`\n * element:\n *\n * Custom CSS property | Description | Default\n * ---|---|---\n * `--vaadin-form-item-label-width` | Width of the label column when the labels are aside | `8em`\n * `--vaadin-form-item-label-spacing` | Spacing between the label column and the input column when the labels are aside | `1em`\n * `--vaadin-form-item-row-spacing` | Height of the spacing between the form item elements | `1em`\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * @extends HTMLElement\n * @mixes ThemableMixin\n */\nclass FormItem extends ThemableMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-flex;\n          flex-direction: row;\n          align-items: baseline;\n          margin: calc(0.5 * var(--vaadin-form-item-row-spacing, 1em)) 0;\n        }\n\n        :host([label-position='top']) {\n          flex-direction: column;\n          align-items: stretch;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        #label {\n          width: var(--vaadin-form-item-label-width, 8em);\n          flex: 0 0 auto;\n        }\n\n        :host([label-position='top']) #label {\n          width: auto;\n        }\n\n        #spacing {\n          width: var(--vaadin-form-item-label-spacing, 1em);\n          flex: 0 0 auto;\n        }\n\n        #content {\n          flex: 1 1 auto;\n        }\n\n        #content ::slotted(.full-width) {\n          box-sizing: border-box;\n          width: 100%;\n          min-width: 0;\n        }\n      </style>\n      <div id=\"label\" part=\"label\" on-click=\"_onLabelClick\">\n        <slot name=\"label\" id=\"labelSlot\"></slot>\n      </div>\n      <div id=\"spacing\"></div>\n      <div id=\"content\">\n        <slot id=\"contentSlot\"></slot>\n      </div>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-form-item';\n  }\n\n  /** @private */\n  _onLabelClick() {\n    const firstContentElementChild = Array.prototype.find.call(\n      this.$.contentSlot.assignedNodes(),\n      (e) => e.nodeType === Node.ELEMENT_NODE\n    );\n    if (firstContentElementChild) {\n      firstContentElementChild.focus();\n      firstContentElementChild.click();\n    }\n  }\n}\n\ncustomElements.define(FormItem.is, FormItem);\n\nexport { FormItem };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,eACE,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAkBA,EAAE,UAAU;;;AC1Bd,AAuGA,6BAAuB,cAAc,gBAAgB;AAAA,aACxC,WAAW;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAoDE,KAAK;AACd,WAAO;AAAA;AAAA,EAIT,gBAAgB;AACd,UAAM,2BAA2B,MAAM,UAAU,KAAK,KACpD,KAAK,EAAE,YAAY,iBACnB,CAAC,MAAM,EAAE,aAAa,KAAK;AAE7B,QAAI,0BAA0B;AAC5B,+BAAyB;AACzB,+BAAyB;AAAA;AAAA;AAAA;AAK/B,eAAe,OAAO,SAAS,IAAI;",
  "names": []
}
