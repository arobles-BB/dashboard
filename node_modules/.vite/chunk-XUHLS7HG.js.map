{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/combo-box@22.0.2/node_modules/@vaadin/combo-box/theme/lumo/vaadin-combo-box-dropdown-styles.js", "../.pnpm/@vaadin/combo-box@22.0.2/node_modules/@vaadin/combo-box/theme/lumo/vaadin-combo-box-item-styles.js", "../.pnpm/@vaadin/combo-box@22.0.2/node_modules/@vaadin/combo-box/src/vaadin-combo-box-item.js", "../.pnpm/@vaadin/combo-box@22.0.2/node_modules/@vaadin/combo-box/src/vaadin-combo-box-overlay.js", "../.pnpm/@vaadin/combo-box@22.0.2/node_modules/@vaadin/combo-box/src/vaadin-combo-box-scroller.js", "../.pnpm/@vaadin/combo-box@22.0.2/node_modules/@vaadin/combo-box/src/vaadin-combo-box-dropdown.js", "../.pnpm/@vaadin/combo-box@22.0.2/node_modules/@vaadin/combo-box/src/vaadin-combo-box-data-provider-mixin.js", "../.pnpm/@vaadin/combo-box@22.0.2/node_modules/@vaadin/combo-box/src/vaadin-combo-box-mixin.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport '@vaadin/vaadin-overlay/theme/lumo/vaadin-overlay.js';\nimport { menuOverlayCore } from '@vaadin/vaadin-lumo-styles/mixins/menu-overlay.js';\nimport { overlay } from '@vaadin/vaadin-lumo-styles/mixins/overlay.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst comboBoxOverlay = css`\n  [part='content'] {\n    padding: 0;\n  }\n\n  :host {\n    --_vaadin-combo-box-items-container-border-width: var(--lumo-space-xs);\n    --_vaadin-combo-box-items-container-border-style: solid;\n    --_vaadin-combo-box-items-container-border-color: transparent;\n  }\n\n  /* Loading state */\n\n  /* When items are empty, the spinner needs some room */\n  :host(:not([closing])) [part~='content'] {\n    min-height: calc(2 * var(--lumo-space-s) + var(--lumo-icon-size-s));\n  }\n\n  [part~='overlay'] {\n    position: relative;\n  }\n\n  :host([top-aligned]) [part~='overlay'] {\n    margin-top: var(--lumo-space-xs);\n  }\n\n  :host([bottom-aligned]) [part~='overlay'] {\n    margin-bottom: var(--lumo-space-xs);\n  }\n\n  :host([loading]) [part~='loader'] {\n    box-sizing: border-box;\n    width: var(--lumo-icon-size-s);\n    height: var(--lumo-icon-size-s);\n    position: absolute;\n    z-index: 1;\n    left: var(--lumo-space-s);\n    right: var(--lumo-space-s);\n    top: var(--lumo-space-s);\n    margin-left: auto;\n    margin-inline-start: auto;\n    margin-inline-end: 0;\n    border: 2px solid transparent;\n    border-color: var(--lumo-primary-color-50pct) var(--lumo-primary-color-50pct) var(--lumo-primary-color)\n      var(--lumo-primary-color);\n    border-radius: calc(0.5 * var(--lumo-icon-size-s));\n    opacity: 0;\n    animation: 1s linear infinite lumo-combo-box-loader-rotate, 0.3s 0.1s lumo-combo-box-loader-fade-in both;\n    pointer-events: none;\n  }\n\n  @keyframes lumo-combo-box-loader-fade-in {\n    0% {\n      opacity: 0;\n    }\n\n    100% {\n      opacity: 1;\n    }\n  }\n\n  @keyframes lumo-combo-box-loader-rotate {\n    0% {\n      transform: rotate(0deg);\n    }\n\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n\n  /* RTL specific styles */\n\n  :host([loading][dir='rtl']) [part~='loader'] {\n    left: auto;\n    margin-left: 0;\n    margin-right: auto;\n    margin-inline-start: 0;\n    margin-inline-end: auto;\n  }\n`;\n\nregisterStyles('vaadin-combo-box-overlay', [overlay, menuOverlayCore, comboBoxOverlay], {\n  moduleId: 'lumo-combo-box-overlay'\n});\n", "import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport { item } from '@vaadin/item/theme/lumo/vaadin-item-styles.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst comboBoxItem = css`\n  :host {\n    transition: background-color 100ms;\n    overflow: hidden;\n    --_lumo-item-selected-icon-display: block;\n  }\n\n  @media (any-hover: hover) {\n    :host([focused]:not([disabled])) {\n      box-shadow: inset 0 0 0 2px var(--lumo-primary-color-50pct);\n    }\n  }\n`;\n\nregisterStyles('vaadin-combo-box-item', [item, comboBoxItem], {\n  moduleId: 'lumo-combo-box-item'\n});\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\n/**\n * An item element used by the `<vaadin-combo-box>` dropdown.\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name   | Description\n * ------------|--------------\n * `checkmark` | The graphical checkmark shown for a selected item\n * `content`   | The element that wraps the item content\n *\n * The following state attributes are exposed for styling:\n *\n * Attribute    | Description\n * -------------|-------------\n * `selected`   | Set when the item is selected\n * `focused`    | Set when the item is focused\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * @mixes ThemableMixin\n * @mixes DirMixin\n * @private\n */\nexport class ComboBoxItem extends ThemableMixin(DirMixin(PolymerElement)) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n      </style>\n      <span part=\"checkmark\" aria-hidden=\"true\"></span>\n      <div part=\"content\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-combo-box-item';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The index of the item\n       */\n      index: Number,\n\n      /**\n       * The item to render\n       * @type {(String|Object)}\n       */\n      item: Object,\n\n      /**\n       * The text label corresponding to the item\n       */\n      label: String,\n\n      /**\n       * True when item is selected\n       */\n      selected: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n\n      /**\n       * True when item is focused\n       */\n      focused: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n\n      /**\n       * Custom function for rendering the content of the `<vaadin-combo-box-item>` propagated from the combo box element.\n       */\n      renderer: Function,\n\n      /**\n       * Saved instance of a custom renderer function.\n       */\n      _oldRenderer: Function\n    };\n  }\n\n  static get observers() {\n    return ['__rendererOrItemChanged(renderer, index, item.*, selected, focused)', '__updateLabel(label, renderer)'];\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this._comboBox = this.parentNode.comboBox;\n\n    const hostDir = this._comboBox.getAttribute('dir');\n    if (hostDir) {\n      this.setAttribute('dir', hostDir);\n    }\n  }\n\n  /**\n   * Requests an update for the content of the item.\n   * While performing the update, it invokes the renderer passed in the `renderer` property.\n   *\n   * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\n   */\n  requestContentUpdate() {\n    if (!this.renderer) {\n      return;\n    }\n\n    const model = {\n      index: this.index,\n      item: this.item,\n      focused: this.focused,\n      selected: this.selected\n    };\n\n    this.renderer(this, this._comboBox, model);\n  }\n\n  /** @private */\n  __rendererOrItemChanged(renderer, index, item, _selected, _focused) {\n    if (item === undefined || index === undefined) {\n      return;\n    }\n\n    if (this._oldRenderer !== renderer) {\n      this.innerHTML = '';\n      // Whenever a Lit-based renderer is used, it assigns a Lit part to the node it was rendered into.\n      // When clearing the rendered content, this part needs to be manually disposed of.\n      // Otherwise, using a Lit-based renderer on the same node will throw an exception or render nothing afterward.\n      delete this._$litPart$;\n    }\n\n    if (renderer) {\n      this._oldRenderer = renderer;\n      this.requestContentUpdate();\n    }\n  }\n\n  /** @private */\n  __updateLabel(label, renderer) {\n    if (renderer) return;\n\n    this.textContent = label;\n  }\n}\n\ncustomElements.define(ComboBoxItem.is, ComboBoxItem);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { OverlayElement } from '@vaadin/vaadin-overlay/src/vaadin-overlay.js';\nimport { PositionMixin } from '@vaadin/vaadin-overlay/src/vaadin-overlay-position-mixin.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-combo-box-overlay',\n  css`\n    #overlay {\n      width: var(--vaadin-combo-box-overlay-width, var(--_vaadin-combo-box-overlay-default-width, auto));\n    }\n\n    [part='content'] {\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n    }\n  `,\n  { moduleId: 'vaadin-combo-box-overlay-styles' }\n);\n\nlet memoizedTemplate;\n\n/**\n * An element used internally by `<vaadin-combo-box>`. Not intended to be used separately.\n *\n * @extends OverlayElement\n * @private\n */\nexport class ComboBoxOverlay extends PositionMixin(OverlayElement) {\n  static get is() {\n    return 'vaadin-combo-box-overlay';\n  }\n\n  static get template() {\n    if (!memoizedTemplate) {\n      memoizedTemplate = super.template.cloneNode(true);\n      memoizedTemplate.content.querySelector('[part~=\"overlay\"]').removeAttribute('tabindex');\n    }\n\n    return memoizedTemplate;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    const dropdown = this.__dataHost;\n    const comboBox = dropdown && dropdown.getRootNode().host;\n    const hostDir = comboBox && comboBox.getAttribute('dir');\n    if (hostDir) {\n      this.setAttribute('dir', hostDir);\n    }\n  }\n\n  ready() {\n    super.ready();\n    const loader = document.createElement('div');\n    loader.setAttribute('part', 'loader');\n    const content = this.shadowRoot.querySelector('[part~=\"content\"]');\n    content.parentNode.insertBefore(loader, content);\n  }\n\n  _outsideClickListener(event) {\n    const eventPath = event.composedPath();\n    if (!eventPath.includes(this.positionTarget) && !eventPath.includes(this)) {\n      this.close();\n    }\n  }\n}\n\ncustomElements.define(ComboBoxOverlay.is, ComboBoxOverlay);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { Virtualizer } from '@vaadin/component-base/src/virtualizer.js';\nimport { ComboBoxPlaceholder } from './vaadin-combo-box-placeholder.js';\n\n/**\n * Element for internal use only.\n *\n * @extends HTMLElement\n * @private\n */\nexport class ComboBoxScroller extends PolymerElement {\n  static get is() {\n    return 'vaadin-combo-box-scroller';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          min-height: 1px;\n          overflow: auto;\n\n          /* Fixes item background from getting on top of scrollbars on Safari */\n          transform: translate3d(0, 0, 0);\n\n          /* Enable momentum scrolling on iOS */\n          -webkit-overflow-scrolling: touch;\n\n          /* Fixes scrollbar disappearing when 'Show scroll bars: Always' enabled in Safari */\n          box-shadow: 0 0 0 white;\n        }\n\n        #selector {\n          border-width: var(--_vaadin-combo-box-items-container-border-width);\n          border-style: var(--_vaadin-combo-box-items-container-border-style);\n          border-color: var(--_vaadin-combo-box-items-container-border-color);\n        }\n      </style>\n      <div id=\"selector\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * A full set of items to filter the visible options from.\n       * Set to an empty array when combo-box is not opened.\n       */\n      items: {\n        type: Array,\n        observer: '__itemsChanged'\n      },\n\n      /**\n       * Index of an item that has focus outline and is scrolled into view.\n       * The actual focus still remains in the input field.\n       */\n      focusedIndex: {\n        type: Number,\n        observer: '__focusedIndexChanged'\n      },\n\n      /**\n       * Set to true while combo-box fetches new page from the data provider.\n       */\n      loading: {\n        type: Boolean,\n        observer: '__loadingChanged'\n      },\n\n      /**\n       * Whether the combo-box is currently opened or not. If set to false,\n       * calling `scrollIntoView` does not have any effect.\n       */\n      opened: {\n        type: Boolean,\n        observer: '__openedChanged'\n      },\n\n      /**\n       * The selected item from the `items` array.\n       */\n      selectedItem: {\n        type: Object\n      },\n\n      /**\n       * Path for the id of the item, used to detect whether the item is selected.\n       */\n      itemIdPath: {\n        type: String\n      },\n\n      /**\n       * Reference to the combo-box, used by the item elements.\n       */\n      comboBox: {\n        type: Object\n      },\n\n      /**\n       * Function used to set a label for every combo-box item.\n       */\n      getItemLabel: {\n        type: Object\n      },\n\n      /**\n       * Function used to render the content of every combo-box item.\n       */\n      renderer: {\n        type: Object,\n        observer: '__rendererChanged'\n      },\n\n      /**\n       * Used to propagate the `theme` attribute from the host element.\n       */\n      theme: {\n        type: String\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.__boundOnItemClick = this.__onItemClick.bind(this);\n  }\n\n  __openedChanged(opened) {\n    if (this.__virtualizer && opened) {\n      this.__virtualizer.update();\n    }\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    // Allow extensions to customize tag name for the items\n    this.__hostTagName = this.constructor.is.replace('-scroller', '');\n\n    this.setAttribute('role', 'listbox');\n\n    this.addEventListener('click', (e) => e.stopPropagation());\n\n    this.__patchWheelOverScrolling();\n\n    this.__virtualizer = new Virtualizer({\n      createElements: this.__createElements.bind(this),\n      updateElement: this.__updateElement.bind(this),\n      elementsContainer: this,\n      scrollTarget: this,\n      scrollContainer: this.$.selector\n    });\n  }\n\n  scrollIntoView(index) {\n    if (!(this.opened && index >= 0)) {\n      return;\n    }\n\n    const visibleItemsCount = this._visibleItemsCount();\n\n    let targetIndex = index;\n\n    if (index > this.__virtualizer.lastVisibleIndex - 1) {\n      // Index is below the bottom, scrolling down. Make the item appear at the bottom.\n      // First scroll to target (will be at the top of the scroller) to make sure it's rendered.\n      this.__virtualizer.scrollToIndex(index);\n      // Then calculate the index for the following scroll (to get the target to bottom of the scroller).\n      targetIndex = index - visibleItemsCount + 1;\n    } else if (index > this.__virtualizer.firstVisibleIndex) {\n      // The item is already visible, scrolling is unnecessary per se. But we need to trigger iron-list to set\n      // the correct scrollTop on the scrollTarget. Scrolling to firstVisibleIndex.\n      targetIndex = this.__virtualizer.firstVisibleIndex;\n    }\n    this.__virtualizer.scrollToIndex(Math.max(0, targetIndex));\n\n    // Sometimes the item is partly below the bottom edge, detect and adjust.\n    const lastPhysicalItem = [...this.children].find(\n      (el) => !el.hidden && el.index === this.__virtualizer.lastVisibleIndex\n    );\n    if (!lastPhysicalItem || index !== lastPhysicalItem.index) {\n      return;\n    }\n    const lastPhysicalItemRect = lastPhysicalItem.getBoundingClientRect();\n    const scrollerRect = this.getBoundingClientRect();\n    const scrollTopAdjust = lastPhysicalItemRect.bottom - scrollerRect.bottom + this._viewportTotalPaddingBottom;\n    if (scrollTopAdjust > 0) {\n      this.scrollTop += scrollTopAdjust;\n    }\n  }\n\n  /** @private */\n  __getAriaRole(itemIndex) {\n    return itemIndex !== undefined ? 'option' : false;\n  }\n\n  /** @private */\n  __getAriaSelected(focusedIndex, itemIndex) {\n    return this.__isItemFocused(focusedIndex, itemIndex).toString();\n  }\n\n  /** @private */\n  __isItemFocused(focusedIndex, itemIndex) {\n    return focusedIndex == itemIndex;\n  }\n\n  /** @private */\n  __isItemSelected(item, selectedItem, itemIdPath) {\n    if (item instanceof ComboBoxPlaceholder) {\n      return false;\n    } else if (itemIdPath && item !== undefined && selectedItem !== undefined) {\n      return this.get(itemIdPath, item) === this.get(itemIdPath, selectedItem);\n    } else {\n      return item === selectedItem;\n    }\n  }\n\n  /** @private */\n  __itemsChanged(items) {\n    if (this.__virtualizer && items) {\n      this.__virtualizer.size = items.length;\n      this.__virtualizer.flush();\n      // Ensure the total count of items is properly announced.\n      this.setAttribute('aria-setsize', items.length);\n      this.__virtualizer.update();\n    }\n  }\n\n  /** @private */\n  __loadingChanged(loading) {\n    if (this.__virtualizer && !loading) {\n      setTimeout(() => this.__virtualizer.update());\n    }\n  }\n\n  /** @private */\n  __focusedIndexChanged(index) {\n    if (this.__virtualizer && index >= 0) {\n      this.__virtualizer.update();\n      this.scrollIntoView(index);\n    }\n  }\n\n  /** @private */\n  __rendererChanged(renderer, oldRenderer) {\n    if (this.__virtualizer && (renderer || oldRenderer)) {\n      this.__virtualizer.update();\n    }\n  }\n\n  /** @private */\n  __createElements(count) {\n    return [...Array(count)].map(() => {\n      const item = document.createElement(`${this.__hostTagName}-item`);\n      item.addEventListener('click', this.__boundOnItemClick);\n      // Negative tabindex prevents the item content from being focused.\n      item.tabIndex = '-1';\n      item.style.width = '100%';\n      return item;\n    });\n  }\n\n  /** @private */\n  __updateElement(el, index) {\n    const item = this.items[index];\n    const focusedIndex = this.focusedIndex;\n\n    el.setProperties({\n      item,\n      index: this.__requestItemByIndex(item, index),\n      label: this.getItemLabel(item),\n      selected: this.__isItemSelected(item, this.selectedItem, this.itemIdPath),\n      renderer: this.renderer,\n      focused: this.__isItemFocused(focusedIndex, index)\n    });\n\n    el.id = `${this.__hostTagName}-item-${index}`;\n    el.setAttribute('role', this.__getAriaRole(index));\n    el.setAttribute('aria-selected', this.__getAriaSelected(focusedIndex, index));\n    el.setAttribute('aria-posinset', index);\n\n    if (this.theme) {\n      el.setAttribute('theme', this.theme);\n    } else {\n      el.removeAttribute('theme');\n    }\n  }\n\n  /** @private */\n  __onItemClick(e) {\n    this.dispatchEvent(new CustomEvent('selection-changed', { detail: { item: e.currentTarget.item } }));\n  }\n\n  /**\n   * We want to prevent the kinetic scrolling energy from being transferred from the overlay contents over to the parent.\n   * Further improvement ideas: after the contents have been scrolled to the top or bottom and scrolling has stopped, it could allow\n   * scrolling the parent similarly to touch scrolling.\n   */\n  __patchWheelOverScrolling() {\n    this.$.selector.addEventListener('wheel', (e) => {\n      const scrolledToTop = this.scrollTop === 0;\n      const scrolledToBottom = this.scrollHeight - this.scrollTop - this.clientHeight <= 1;\n      if (scrolledToTop && e.deltaY < 0) {\n        e.preventDefault();\n      } else if (scrolledToBottom && e.deltaY > 0) {\n        e.preventDefault();\n      }\n    });\n  }\n\n  get _viewportTotalPaddingBottom() {\n    if (this._cachedViewportTotalPaddingBottom === undefined) {\n      const itemsStyle = window.getComputedStyle(this.$.selector);\n      this._cachedViewportTotalPaddingBottom = [itemsStyle.paddingBottom, itemsStyle.borderBottomWidth]\n        .map((v) => {\n          return parseInt(v, 10);\n        })\n        .reduce((sum, v) => {\n          return sum + v;\n        });\n    }\n\n    return this._cachedViewportTotalPaddingBottom;\n  }\n\n  /**\n   * If dataProvider is used, dispatch a request for the item\u2019s index if\n   * the item is a placeholder object.\n   *\n   * @return {number}\n   */\n  __requestItemByIndex(item, index) {\n    if (item instanceof ComboBoxPlaceholder && index !== undefined) {\n      this.dispatchEvent(\n        new CustomEvent('index-requested', { detail: { index, currentScrollerPos: this._oldScrollerPosition } })\n      );\n    }\n\n    return index;\n  }\n\n  /** @private */\n  _visibleItemsCount() {\n    // Ensure items are positioned\n    this.__virtualizer.scrollToIndex(this.__virtualizer.firstVisibleIndex);\n    const hasItems = this.__virtualizer.size > 0;\n    return hasItems ? this.__virtualizer.lastVisibleIndex - this.__virtualizer.firstVisibleIndex + 1 : 0;\n  }\n}\n\ncustomElements.define(ComboBoxScroller.is, ComboBoxScroller);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './vaadin-combo-box-item.js';\nimport './vaadin-combo-box-overlay.js';\nimport './vaadin-combo-box-scroller.js';\nimport { IronResizableBehavior } from '@polymer/iron-resizable-behavior/iron-resizable-behavior.js';\nimport { mixinBehaviors } from '@polymer/polymer/lib/legacy/class.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\n\n/**\n * Element for internal use only.\n *\n * @extends HTMLElement\n * @private\n */\nexport class ComboBoxDropdown extends mixinBehaviors(IronResizableBehavior, PolymerElement) {\n  static get is() {\n    return 'vaadin-combo-box-dropdown';\n  }\n\n  static get template() {\n    return html`\n      <vaadin-combo-box-overlay\n        id=\"overlay\"\n        hidden$=\"[[_isOverlayHidden(_items.*, loading)]]\"\n        loading$=\"[[loading]]\"\n        opened=\"{{_overlayOpened}}\"\n        theme$=\"[[theme]]\"\n        position-target=\"[[positionTarget]]\"\n        no-vertical-overlap\n      ></vaadin-combo-box-overlay>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * True if the combo-box has been activate by the user.\n       * The actual opened state depends on whether the dropdown has items.\n       */\n      opened: Boolean,\n\n      /**\n       * The element to position/align the dropdown by.\n       */\n      positionTarget: {\n        type: Object,\n        observer: '_positionTargetChanged'\n      },\n\n      /**\n       * Custom function for rendering the content of the `<vaadin-combo-box-item>` propagated from the combo box element.\n       */\n      renderer: Function,\n\n      /**\n       * `true` when new items are being loaded.\n       */\n      loading: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n\n      /**\n       * Used to propagate the `theme` attribute from the host element.\n       */\n      theme: String,\n\n      _selectedItem: {\n        type: Object\n      },\n\n      _items: {\n        type: Array\n      },\n\n      _focusedIndex: {\n        type: Number,\n        value: -1\n      },\n\n      focusedItem: {\n        type: String,\n        computed: '_getFocusedItem(_focusedIndex)'\n      },\n\n      _itemLabelPath: {\n        type: String,\n        value: 'label'\n      },\n\n      _itemValuePath: {\n        type: String,\n        value: 'value'\n      },\n\n      _scroller: Object,\n\n      _itemIdPath: String,\n\n      _overlayOpened: {\n        type: Boolean,\n        observer: '_openedChanged'\n      }\n    };\n  }\n\n  static get observers() {\n    return [\n      '_openedOrItemsChanged(opened, _items, loading)',\n      '__updateScroller(_scroller, _items, opened, loading, _selectedItem, _itemIdPath, _focusedIndex, renderer, theme)'\n    ];\n  }\n\n  constructor() {\n    super();\n\n    // Ensure every instance has unique ID\n    const uniqueId = (ComboBoxDropdown._uniqueId = 1 + ComboBoxDropdown._uniqueId || 0);\n    this.scrollerId = `${this.localName}-scroller-${uniqueId}`;\n  }\n\n  ready() {\n    super.ready();\n\n    // Allow extensions to customize tag name for the items\n    this.__hostTagName = this.constructor.is.replace('-dropdown', '');\n\n    const overlay = this.$.overlay;\n    const scrollerTag = `${this.__hostTagName}-scroller`;\n\n    overlay.renderer = (root) => {\n      if (!root.firstChild) {\n        const scroller = document.createElement(scrollerTag);\n        root.appendChild(scroller);\n      }\n    };\n\n    // Ensure the scroller is rendered\n    overlay.requestContentUpdate();\n\n    this._scroller = overlay.content.querySelector(scrollerTag);\n    this._scroller.id = this.scrollerId;\n\n    this._scroller.getItemLabel = this.getItemLabel.bind(this);\n    this._scroller.comboBox = this.getRootNode().host;\n\n    this._scroller.addEventListener('selection-changed', (e) => this._forwardScrollerEvent(e));\n    this._scroller.addEventListener('index-requested', (e) => this._forwardScrollerEvent(e));\n\n    overlay.addEventListener('touchend', (e) => this._fireTouchAction(e));\n    overlay.addEventListener('touchmove', (e) => this._fireTouchAction(e));\n\n    // Prevent blurring the input when clicking inside the overlay.\n    overlay.addEventListener('mousedown', (e) => e.preventDefault());\n\n    // Preventing the default modal behaviour of the overlay on input clicking\n    overlay.addEventListener('vaadin-overlay-outside-click', (e) => {\n      e.preventDefault();\n    });\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    // Making sure the overlay is closed and removed from DOM after detaching the dropdown.\n    this._overlayOpened = false;\n  }\n\n  notifyResize() {\n    super.notifyResize();\n\n    if (this.positionTarget && this.opened) {\n      this._setOverlayWidth();\n    }\n  }\n\n  _fireTouchAction(sourceEvent) {\n    this.dispatchEvent(\n      new CustomEvent('vaadin-overlay-touch-action', {\n        detail: { sourceEvent: sourceEvent }\n      })\n    );\n  }\n\n  _forwardScrollerEvent(event) {\n    this.dispatchEvent(new CustomEvent(event.type, { detail: event.detail }));\n  }\n\n  _openedChanged(opened, wasOpened) {\n    if (opened) {\n      this._setOverlayWidth();\n\n      this._scroller.style.maxHeight =\n        getComputedStyle(this).getPropertyValue(`--${this.__hostTagName}-overlay-max-height`) || '65vh';\n\n      this.dispatchEvent(new CustomEvent('vaadin-combo-box-dropdown-opened', { bubbles: true, composed: true }));\n    } else if (wasOpened && !this.__emptyItems) {\n      this.dispatchEvent(new CustomEvent('vaadin-combo-box-dropdown-closed', { bubbles: true, composed: true }));\n    }\n  }\n\n  _openedOrItemsChanged(opened, items, loading) {\n    // See https://github.com/vaadin/vaadin-combo-box/pull/964\n    const hasItems = items && items.length;\n    if (!hasItems) {\n      this.__emptyItems = true;\n    }\n    this._overlayOpened = !!(opened && (loading || hasItems));\n    this.__emptyItems = false;\n  }\n\n  _getFocusedItem(focusedIndex) {\n    if (focusedIndex >= 0) {\n      return this._items[focusedIndex];\n    }\n  }\n\n  /**\n   * Gets the index of the item with the provided label.\n   * @return {number}\n   */\n  indexOfLabel(label) {\n    if (this._items && label) {\n      for (let i = 0; i < this._items.length; i++) {\n        if (this.getItemLabel(this._items[i]).toString().toLowerCase() === label.toString().toLowerCase()) {\n          return i;\n        }\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Gets the label string for the item based on the `_itemLabelPath`.\n   * @return {string}\n   */\n  getItemLabel(item, itemLabelPath) {\n    itemLabelPath = itemLabelPath || this._itemLabelPath;\n    let label = item && itemLabelPath ? this.get(itemLabelPath, item) : undefined;\n    if (label === undefined || label === null) {\n      label = item ? item.toString() : '';\n    }\n    return label;\n  }\n\n  _scrollIntoView(index) {\n    if (!this._scroller) {\n      return;\n    }\n    this._scroller.scrollIntoView(index);\n  }\n\n  adjustScrollPosition() {\n    if (this.opened && this._items) {\n      this._scrollIntoView(this._focusedIndex);\n    }\n  }\n\n  __updateScroller(scroller, items, opened, loading, selectedItem, itemIdPath, focusedIndex, renderer, theme) {\n    if (scroller) {\n      scroller.setProperties({\n        items: opened ? items : [],\n        opened,\n        loading,\n        selectedItem,\n        itemIdPath,\n        focusedIndex,\n        renderer,\n        theme\n      });\n    }\n  }\n\n  _isOverlayHidden() {\n    return !this.loading && !(this._items && this._items.length);\n  }\n\n  _positionTargetChanged(target) {\n    // we must update the overlay width when the positionTarget is set (or changes)\n    if (target) {\n      this._setOverlayWidth();\n    }\n  }\n\n  _setOverlayWidth() {\n    if (!this.positionTarget) {\n      return;\n    }\n    const inputWidth = this.positionTarget.clientWidth + 'px';\n    const propPrefix = `${this.__hostTagName}-overlay`;\n    const customWidth = getComputedStyle(this).getPropertyValue(`--${propPrefix}-width`);\n\n    this.$.overlay.style.setProperty(`--_${propPrefix}-default-width`, inputWidth);\n\n    if (customWidth === '') {\n      this.$.overlay.style.removeProperty(`--${propPrefix}-width`);\n    } else {\n      this.$.overlay.style.setProperty(`--${propPrefix}-width`, customWidth);\n    }\n\n    this.$.overlay._updatePosition();\n  }\n\n  /**\n   * Fired after the `vaadin-combo-box-dropdown` opens.\n   *\n   * @event vaadin-combo-box-dropdown-opened\n   */\n\n  /**\n   * Fired after the `vaadin-combo-box-dropdown` closes.\n   *\n   * @event vaadin-combo-box-dropdown-closed\n   */\n}\n\ncustomElements.define(ComboBoxDropdown.is, ComboBoxDropdown);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { ComboBoxPlaceholder } from './vaadin-combo-box-placeholder.js';\n\n/**\n * @polymerMixin\n */\nexport const ComboBoxDataProviderMixin = (superClass) =>\n  class DataProviderMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * Number of items fetched at a time from the dataprovider.\n         * @attr {number} page-size\n         * @type {number}\n         */\n        pageSize: {\n          type: Number,\n          value: 50,\n          observer: '_pageSizeChanged'\n        },\n\n        /**\n         * Total number of items.\n         * @type {number | undefined}\n         */\n        size: {\n          type: Number,\n          observer: '_sizeChanged'\n        },\n\n        /**\n         * Function that provides items lazily. Receives arguments `params`, `callback`\n         *\n         * `params.page` Requested page index\n         *\n         * `params.pageSize` Current page size\n         *\n         * `params.filter` Currently applied filter\n         *\n         * `callback(items, size)` Callback function with arguments:\n         *   - `items` Current page of items\n         *   - `size` Total number of items.\n         * @type {ComboBoxDataProvider | undefined}\n         */\n        dataProvider: {\n          type: Object,\n          observer: '_dataProviderChanged'\n        },\n\n        /** @private */\n        _pendingRequests: {\n          value: () => {\n            return {};\n          }\n        },\n\n        /** @private */\n        __placeHolder: {\n          value: new ComboBoxPlaceholder()\n        }\n      };\n    }\n\n    static get observers() {\n      return [\n        '_dataProviderFilterChanged(filter, dataProvider)',\n        '_dataProviderClearFilter(dataProvider, opened, value)',\n        '_warnDataProviderValue(dataProvider, value)',\n        '_ensureFirstPage(opened)'\n      ];\n    }\n\n    /** @private */\n    _dataProviderClearFilter(dataProvider, opened, value) {\n      // Can't depend on filter in this observer as we don't want\n      // to clear the filter whenever it's set\n      if (dataProvider && !this.loading && this.filter && !(opened && this.autoOpenDisabled && value === this.filter)) {\n        this.size = undefined;\n        this._pendingRequests = {};\n        this.filter = '';\n        this.clearCache();\n      }\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n      this.clearCache();\n      this.$.dropdown.addEventListener('index-requested', (e) => {\n        const index = e.detail.index;\n        const currentScrollerPos = e.detail.currentScrollerPos;\n        const allowedIndexRange = Math.floor(this.pageSize * 1.5);\n\n        // Ignores the indexes, which are being re-sent during scrolling reset,\n        // if the corresponding page is around the current scroller position.\n        // Otherwise, there might be a last pages duplicates, which cause the\n        // loading indicator hanging and blank items\n        if (this._shouldSkipIndex(index, allowedIndexRange, currentScrollerPos)) {\n          return;\n        }\n\n        if (index !== undefined) {\n          const page = this._getPageForIndex(index);\n          if (this._shouldLoadPage(page)) {\n            this._loadPage(page);\n          }\n        }\n      });\n    }\n\n    /** @private */\n    _dataProviderFilterChanged() {\n      if (!this._shouldFetchData()) {\n        return;\n      }\n\n      this.size = undefined;\n      this._pendingRequests = {};\n      this.clearCache();\n    }\n\n    /** @private */\n    _shouldFetchData() {\n      if (!this.dataProvider) {\n        return false;\n      }\n\n      return this.opened || (this.filter && this.filter.length);\n    }\n\n    /** @private */\n    _ensureFirstPage(opened) {\n      if (opened && this._shouldLoadPage(0)) {\n        this._loadPage(0);\n      }\n    }\n\n    /** @private */\n    _shouldSkipIndex(index, allowedIndexRange, currentScrollerPos) {\n      return (\n        currentScrollerPos !== 0 &&\n        index >= currentScrollerPos - allowedIndexRange &&\n        index <= currentScrollerPos + allowedIndexRange\n      );\n    }\n\n    /** @private */\n    _shouldLoadPage(page) {\n      if (!this.filteredItems || this._forceNextRequest) {\n        this._forceNextRequest = false;\n        return true;\n      }\n\n      const loadedItem = this.filteredItems[page * this.pageSize];\n      if (loadedItem !== undefined) {\n        return loadedItem instanceof ComboBoxPlaceholder;\n      } else {\n        return this.size === undefined;\n      }\n    }\n\n    /** @private */\n    _loadPage(page) {\n      // make sure same page isn't requested multiple times.\n      if (!this._pendingRequests[page] && this.dataProvider) {\n        this.loading = true;\n\n        const params = {\n          page,\n          pageSize: this.pageSize,\n          filter: this.filter\n        };\n\n        const callback = (items, size) => {\n          if (this._pendingRequests[page] === callback) {\n            if (!this.filteredItems) {\n              const filteredItems = [];\n              filteredItems.splice(params.page * params.pageSize, items.length, ...items);\n              this.filteredItems = filteredItems;\n            } else {\n              this.splice('filteredItems', params.page * params.pageSize, items.length, ...items);\n            }\n            // Update selectedItem from filteredItems if value is set\n            if (this._isValidValue(this.value) && this._getItemValue(this.selectedItem) !== this.value) {\n              this._selectItemForValue(this.value);\n            }\n            if (!this.opened && !this.hasAttribute('focused')) {\n              this._commitValue();\n            }\n            this.size = size;\n\n            delete this._pendingRequests[page];\n\n            if (Object.keys(this._pendingRequests).length === 0) {\n              this.loading = false;\n            }\n          }\n        };\n\n        if (!this._pendingRequests[page]) {\n          // Don't request page if it's already being requested\n          this._pendingRequests[page] = callback;\n          this.dataProvider(params, callback);\n        }\n      }\n    }\n\n    /** @private */\n    _getPageForIndex(index) {\n      return Math.floor(index / this.pageSize);\n    }\n\n    /**\n     * Clears the cached pages and reloads data from dataprovider when needed.\n     */\n    clearCache() {\n      if (!this.dataProvider) {\n        return;\n      }\n      this._pendingRequests = {};\n      const filteredItems = [];\n      for (let i = 0; i < (this.size || 0); i++) {\n        filteredItems.push(this.__placeHolder);\n      }\n      this.filteredItems = filteredItems;\n      if (this._shouldFetchData()) {\n        this._loadPage(0);\n      } else {\n        this._forceNextRequest = true;\n      }\n    }\n\n    /** @private */\n    _sizeChanged(size = 0) {\n      const filteredItems = (this.filteredItems || []).slice(0, size);\n      for (let i = 0; i < size; i++) {\n        filteredItems[i] = filteredItems[i] !== undefined ? filteredItems[i] : this.__placeHolder;\n      }\n      this.filteredItems = filteredItems;\n\n      // Cleans up the redundant pending requests for pages > size\n      // Refers to https://github.com/vaadin/vaadin-flow-components/issues/229\n      this._flushPendingRequests(size);\n    }\n\n    /** @private */\n    _pageSizeChanged(pageSize, oldPageSize) {\n      if (Math.floor(pageSize) !== pageSize || pageSize < 1) {\n        this.pageSize = oldPageSize;\n        throw new Error('`pageSize` value must be an integer > 0');\n      }\n      this.clearCache();\n    }\n\n    /** @private */\n    _dataProviderChanged(dataProvider, oldDataProvider) {\n      this._ensureItemsOrDataProvider(() => {\n        this.dataProvider = oldDataProvider;\n      });\n    }\n\n    /** @private */\n    _ensureItemsOrDataProvider(restoreOldValueCallback) {\n      if (this.items !== undefined && this.dataProvider !== undefined) {\n        restoreOldValueCallback();\n        throw new Error('Using `items` and `dataProvider` together is not supported');\n      } else if (this.dataProvider && !this.filteredItems) {\n        this.filteredItems = [];\n      }\n    }\n\n    /** @private */\n    _warnDataProviderValue(dataProvider, value) {\n      if (dataProvider && value !== '' && (this.selectedItem === undefined || this.selectedItem === null)) {\n        const valueIndex = this._indexOfValue(value, this.filteredItems);\n        if (valueIndex < 0 || !this._getItemLabel(this.filteredItems[valueIndex])) {\n          console.warn(\n            'Warning: unable to determine the label for the provided `value`. ' +\n              'Nothing to display in the text field. This usually happens when ' +\n              'setting an initial `value` before any items are returned from ' +\n              'the `dataProvider` callback. Consider setting `selectedItem` ' +\n              'instead of `value`'\n          );\n        }\n      }\n    }\n\n    /**\n     * This method cleans up the page callbacks which refers to the\n     * non-existing pages, i.e. which item indexes are greater than the\n     * changed size.\n     * This case is basically happens when:\n     * 1. Users scroll fast to the bottom and combo box generates the\n     * redundant page request/callback\n     * 2. Server side uses undefined size lazy loading and suddenly reaches\n     * the exact size which is on the range edge\n     * (for default page size = 50, it will be 100, 200, 300, ...).\n     * @param size the new size of items\n     * @private\n     */\n    _flushPendingRequests(size) {\n      if (this._pendingRequests) {\n        const lastPage = Math.ceil(size / this.pageSize);\n        const pendingRequestsKeys = Object.keys(this._pendingRequests);\n        for (let reqIdx = 0; reqIdx < pendingRequestsKeys.length; reqIdx++) {\n          const page = parseInt(pendingRequestsKeys[reqIdx]);\n          if (page >= lastPage) {\n            this._pendingRequests[page]([], size);\n          }\n        }\n      }\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { isTouch } from '@vaadin/component-base/src/browser-utils.js';\nimport { DisabledMixin } from '@vaadin/component-base/src/disabled-mixin.js';\nimport { KeyboardMixin } from '@vaadin/component-base/src/keyboard-mixin.js';\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\nimport { InputMixin } from '@vaadin/field-base/src/input-mixin.js';\nimport { ComboBoxPlaceholder } from './vaadin-combo-box-placeholder.js';\n\n/**\n * @polymerMixin\n */\nexport const ComboBoxMixin = (subclass) =>\n  class VaadinComboBoxMixinElement extends KeyboardMixin(InputMixin(DisabledMixin(subclass))) {\n    static get properties() {\n      return {\n        /**\n         * True if the dropdown is open, false otherwise.\n         * @type {boolean}\n         */\n        opened: {\n          type: Boolean,\n          notify: true,\n          value: false,\n          reflectToAttribute: true,\n          observer: '_openedChanged'\n        },\n\n        /**\n         * Set true to prevent the overlay from opening automatically.\n         * @attr {boolean} auto-open-disabled\n         */\n        autoOpenDisabled: {\n          type: Boolean\n        },\n\n        /**\n         * When present, it specifies that the field is read-only.\n         * @type {boolean}\n         */\n        readonly: {\n          type: Boolean,\n          value: false,\n          reflectToAttribute: true\n        },\n\n        /**\n         * Custom function for rendering the content of every item.\n         * Receives three arguments:\n         *\n         * - `root` The `<vaadin-combo-box-item>` internal container DOM element.\n         * - `comboBox` The reference to the `<vaadin-combo-box>` element.\n         * - `model` The object with the properties related with the rendered\n         *   item, contains:\n         *   - `model.index` The index of the rendered item.\n         *   - `model.item` The item.\n         * @type {ComboBoxRenderer | undefined}\n         */\n        renderer: Function,\n\n        /**\n         * A full set of items to filter the visible options from.\n         * The items can be of either `String` or `Object` type.\n         * @type {!Array<!ComboBoxItem | string> | undefined}\n         */\n        items: {\n          type: Array,\n          observer: '_itemsChanged'\n        },\n\n        /**\n         * If `true`, the user can input a value that is not present in the items list.\n         * `value` property will be set to the input value in this case.\n         * Also, when `value` is set programmatically, the input value will be set\n         * to reflect that value.\n         * @attr {boolean} allow-custom-value\n         * @type {boolean}\n         */\n        allowCustomValue: {\n          type: Boolean,\n          value: false\n        },\n\n        /**\n         * A subset of items, filtered based on the user input. Filtered items\n         * can be assigned directly to omit the internal filtering functionality.\n         * The items can be of either `String` or `Object` type.\n         * @type {!Array<!ComboBoxItem | string> | undefined}\n         */\n        filteredItems: {\n          type: Array\n        },\n\n        /**\n         * Used to detect user value changes and fire `change` events.\n         * @private\n         */\n        _lastCommittedValue: String,\n\n        /**\n         * When set to `true`, \"loading\" attribute is added to host and the overlay element.\n         * @type {boolean}\n         */\n        loading: {\n          type: Boolean,\n          value: false,\n          reflectToAttribute: true,\n          observer: '_loadingChanged'\n        },\n\n        /**\n         * @type {number}\n         * @protected\n         */\n        _focusedIndex: {\n          type: Number,\n          observer: '_focusedIndexChanged',\n          value: -1\n        },\n\n        /**\n         * Filtering string the user has typed into the input field.\n         * @type {string}\n         */\n        filter: {\n          type: String,\n          value: '',\n          notify: true\n        },\n\n        /**\n         * The selected item from the `items` array.\n         * @type {ComboBoxItem | string | undefined}\n         */\n        selectedItem: {\n          type: Object,\n          notify: true\n        },\n\n        /**\n         * Path for label of the item. If `items` is an array of objects, the\n         * `itemLabelPath` is used to fetch the displayed string label for each\n         * item.\n         *\n         * The item label is also used for matching items when processing user\n         * input, i.e., for filtering and selecting items.\n         * @attr {string} item-label-path\n         * @type {string}\n         */\n        itemLabelPath: {\n          type: String,\n          value: 'label',\n          observer: '_itemLabelPathChanged'\n        },\n\n        /**\n         * Path for the value of the item. If `items` is an array of objects, the\n         * `itemValuePath:` is used to fetch the string value for the selected\n         * item.\n         *\n         * The item value is used in the `value` property of the combo box,\n         * to provide the form value.\n         * @attr {string} item-value-path\n         * @type {string}\n         */\n        itemValuePath: {\n          type: String,\n          value: 'value'\n        },\n\n        /**\n         * Path for the id of the item. If `items` is an array of objects,\n         * the `itemIdPath` is used to compare and identify the same item\n         * in `selectedItem` and `filteredItems` (items given by the\n         * `dataProvider` callback).\n         * @attr {string} item-id-path\n         */\n        itemIdPath: String,\n\n        /**\n         * @type {!HTMLElement | undefined}\n         * @protected\n         */\n        _toggleElement: {\n          type: Object,\n          observer: '_toggleElementChanged'\n        },\n\n        /** @private */\n        _closeOnBlurIsPrevented: Boolean\n      };\n    }\n\n    static get observers() {\n      return [\n        '_filterChanged(filter, itemValuePath, itemLabelPath)',\n        '_itemsOrPathsChanged(items.*, itemValuePath, itemLabelPath)',\n        '_filteredItemsChanged(filteredItems.*, itemValuePath, itemLabelPath)',\n        '_selectedItemChanged(selectedItem, itemValuePath, itemLabelPath)'\n      ];\n    }\n\n    constructor() {\n      super();\n      this._boundOnFocusout = this._onFocusout.bind(this);\n      this._boundOverlaySelectedItemChanged = this._overlaySelectedItemChanged.bind(this);\n      this._boundOnClearButtonMouseDown = this.__onClearButtonMouseDown.bind(this);\n      this._boundClose = this.close.bind(this);\n      this._boundOnOpened = this._onOpened.bind(this);\n      this._boundOnClick = this._onClick.bind(this);\n      this._boundOnOverlayTouchAction = this._onOverlayTouchAction.bind(this);\n      this._boundOnTouchend = this._onTouchend.bind(this);\n    }\n\n    /**\n     * @return {string | undefined}\n     * @protected\n     */\n    get _inputElementValue() {\n      return this.inputElement ? this.inputElement[this._propertyForValue] : undefined;\n    }\n\n    /**\n     * @param {string} value\n     * @protected\n     */\n    set _inputElementValue(value) {\n      if (this.inputElement) {\n        this.inputElement[this._propertyForValue] = value;\n      }\n    }\n\n    /**\n     * Override method inherited from `InputMixin`\n     * to customize the input element.\n     * @protected\n     * @override\n     */\n    _inputElementChanged(input) {\n      super._inputElementChanged(input);\n\n      if (input) {\n        input.autocomplete = 'off';\n        input.autocapitalize = 'off';\n\n        input.setAttribute('role', 'combobox');\n        input.setAttribute('aria-autocomplete', 'list');\n        input.setAttribute('aria-expanded', !!this.opened);\n\n        // Disable the macOS Safari spell check auto corrections.\n        input.setAttribute('spellcheck', 'false');\n\n        // Disable iOS autocorrect suggestions.\n        input.setAttribute('autocorrect', 'off');\n\n        this._revertInputValueToValue();\n\n        if (this.clearElement) {\n          this.clearElement.addEventListener('mousedown', this._boundOnClearButtonMouseDown);\n        }\n      }\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this.addEventListener('focusout', this._boundOnFocusout);\n\n      this._lastCommittedValue = this.value;\n\n      this.$.dropdown.addEventListener('selection-changed', this._boundOverlaySelectedItemChanged);\n\n      this.addEventListener('vaadin-combo-box-dropdown-closed', this._boundClose);\n      this.addEventListener('vaadin-combo-box-dropdown-opened', this._boundOnOpened);\n      this.addEventListener('click', this._boundOnClick);\n\n      this.$.dropdown.addEventListener('vaadin-overlay-touch-action', this._boundOnOverlayTouchAction);\n\n      this.addEventListener('touchend', this._boundOnTouchend);\n\n      const bringToFrontListener = () => {\n        requestAnimationFrame(() => {\n          this.$.dropdown.$.overlay.bringToFront();\n        });\n      };\n\n      this.addEventListener('mousedown', bringToFrontListener);\n      this.addEventListener('touchstart', bringToFrontListener);\n\n      processTemplates(this);\n    }\n\n    /**\n     * Requests an update for the content of items.\n     * While performing the update, it invokes the renderer (passed in the `renderer` property) once an item.\n     *\n     * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\n     */\n    requestContentUpdate() {\n      if (!this.$.dropdown._scroller) {\n        return;\n      }\n\n      this._getItemElements().forEach((item) => {\n        item.requestContentUpdate();\n      });\n    }\n\n    /**\n     * Opens the dropdown list.\n     */\n    open() {\n      // Prevent _open() being called when input is disabled or read-only\n      if (!this.disabled && !this.readonly) {\n        this.opened = true;\n      }\n    }\n\n    /**\n     * Closes the dropdown list.\n     */\n    close() {\n      this.opened = false;\n    }\n\n    /** @private */\n    _focusedIndexChanged(index, oldIndex) {\n      if (oldIndex === undefined) {\n        return;\n      }\n      this._updateActiveDescendant(index);\n    }\n\n    /** @private */\n    _updateActiveDescendant(index) {\n      const input = this.inputElement;\n      if (!input) {\n        return;\n      }\n\n      const item = this._getItemElements().find((el) => el.index === index);\n      if (item) {\n        input.setAttribute('aria-activedescendant', item.id);\n      } else {\n        input.removeAttribute('aria-activedescendant');\n      }\n    }\n\n    /** @private */\n    _openedChanged(opened, wasOpened) {\n      // Prevent _close() being called when opened is set to its default value (false).\n      if (wasOpened === undefined) {\n        return;\n      }\n\n      if (opened) {\n        this._openedWithFocusRing = this.hasAttribute('focus-ring');\n        // For touch devices, we don't want to popup virtual keyboard\n        // unless input element is explicitly focused by the user.\n        if (!this.hasAttribute('focused') && !isTouch) {\n          this.focus();\n        }\n      } else {\n        this._onClosed();\n        if (this._openedWithFocusRing && this.hasAttribute('focused')) {\n          this.setAttribute('focus-ring', '');\n        }\n      }\n\n      const input = this.inputElement;\n      if (input) {\n        input.setAttribute('aria-expanded', !!opened);\n\n        if (opened) {\n          input.setAttribute('aria-controls', this.$.dropdown.scrollerId);\n        } else {\n          input.removeAttribute('aria-controls');\n        }\n      }\n    }\n\n    /** @private */\n    _onOverlayTouchAction() {\n      // On touch devices, blur the input on touch start inside the overlay, in order to hide\n      // the virtual keyboard. But don't close the overlay on this blur.\n      this._closeOnBlurIsPrevented = true;\n      this.inputElement.blur();\n      this._closeOnBlurIsPrevented = false;\n    }\n\n    /** @protected */\n    _isClearButton(event) {\n      return event.composedPath()[0] === this.clearElement;\n    }\n\n    /**\n     * @param {Event} event\n     * @protected\n     */\n    _handleClearButtonClick(event) {\n      event.preventDefault();\n      this._clear();\n    }\n\n    /** @private */\n    _onClick(e) {\n      this._closeOnBlurIsPrevented = true;\n\n      const path = e.composedPath();\n\n      if (this._isClearButton(e)) {\n        this._handleClearButtonClick(e);\n      } else if (path.indexOf(this._toggleElement) > -1) {\n        if (this.opened) {\n          this.close();\n        } else {\n          this.open();\n        }\n      } else if (!this.autoOpenDisabled) {\n        this.open();\n      }\n\n      this._closeOnBlurIsPrevented = false;\n    }\n\n    /**\n     * Override an event listener from `KeyboardMixin`.\n     * Do not call `super` to also override a listener\n     * for Esc key defined in `ClearButtonMixin`.\n     * @protected\n     * @override\n     */\n    _onKeyDown(e) {\n      if (e.keyCode === 40) {\n        this._closeOnBlurIsPrevented = true;\n        this._onArrowDown();\n        this._closeOnBlurIsPrevented = false;\n\n        // prevent caret from moving\n        e.preventDefault();\n      } else if (e.keyCode === 38) {\n        this._closeOnBlurIsPrevented = true;\n        this._onArrowUp();\n        this._closeOnBlurIsPrevented = false;\n\n        // prevent caret from moving\n        e.preventDefault();\n      } else if (e.keyCode === 13) {\n        this._onEnter(e);\n      } else if (e.keyCode === 27) {\n        this._onEscape(e);\n      }\n    }\n\n    /** @private */\n    _getItemLabel(item) {\n      return this.$.dropdown.getItemLabel(item);\n    }\n\n    /** @private */\n    _getItemValue(item) {\n      let value = item && this.itemValuePath ? this.get(this.itemValuePath, item) : undefined;\n      if (value === undefined) {\n        value = item ? item.toString() : '';\n      }\n      return value;\n    }\n\n    /** @private */\n    _onArrowDown() {\n      if (this.opened) {\n        const items = this._getOverlayItems();\n        if (items) {\n          this._focusedIndex = Math.min(items.length - 1, this._focusedIndex + 1);\n          this._prefillFocusedItemLabel();\n        }\n      } else {\n        this.open();\n      }\n    }\n\n    /** @private */\n    _onArrowUp() {\n      if (this.opened) {\n        if (this._focusedIndex > -1) {\n          this._focusedIndex = Math.max(0, this._focusedIndex - 1);\n        } else {\n          const items = this._getOverlayItems();\n          if (items) {\n            this._focusedIndex = items.length - 1;\n          }\n        }\n\n        this._prefillFocusedItemLabel();\n      } else {\n        this.open();\n      }\n    }\n\n    /** @private */\n    _prefillFocusedItemLabel() {\n      if (this._focusedIndex > -1) {\n        this._inputElementValue = this._getItemLabel(this.$.dropdown.focusedItem);\n        this._markAllSelectionRange();\n      }\n    }\n\n    /** @private */\n    _setSelectionRange(start, end) {\n      // Setting selection range focuses and/or moves the caret in some browsers,\n      // and there's no need to modify the selection range if the input isn't focused anyway.\n      // This affects Safari. When the overlay is open, and then hitting tab, browser should focus\n      // the next focusable element instead of the combo-box itself.\n      // Checking the focused property here is enough instead of checking the activeElement.\n      if (this.hasAttribute('focused')) {\n        this.inputElement.setSelectionRange(start, end);\n      }\n    }\n\n    /** @private */\n    _markAllSelectionRange() {\n      if (this._inputElementValue !== undefined) {\n        this._setSelectionRange(0, this._inputElementValue.length);\n      }\n    }\n\n    /** @private */\n    _clearSelectionRange() {\n      if (this._inputElementValue !== undefined) {\n        const pos = this._inputElementValue ? this._inputElementValue.length : 0;\n        this._setSelectionRange(pos, pos);\n      }\n    }\n\n    /** @private */\n    _closeOrCommit() {\n      if (!this.opened && !this.loading) {\n        this._commitValue();\n      } else {\n        this.close();\n      }\n    }\n\n    /** @private */\n    _onEnter(e) {\n      // should close on enter when custom values are allowed, input field is cleared, or when an existing\n      // item is focused with keyboard. If auto open is disabled, under the same conditions, commit value.\n      if (\n        (this.opened || this.autoOpenDisabled) &&\n        (this.allowCustomValue || this._inputElementValue === '' || this._focusedIndex > -1)\n      ) {\n        this._closeOrCommit();\n\n        // Do not submit the surrounding form.\n        e.preventDefault();\n\n        // Do not trigger global listeners\n        e.stopPropagation();\n      }\n    }\n\n    /**\n     * @param {!KeyboardEvent} e\n     * @protected\n     */\n    _onEscape(e) {\n      if (this.autoOpenDisabled) {\n        // Auto-open is disabled\n        if (this.opened || (this.value !== this._inputElementValue && this._inputElementValue.length > 0)) {\n          // The overlay is open or\n          // The input value has changed but the change hasn't been committed, so cancel it.\n          e.stopPropagation();\n          this._focusedIndex = -1;\n          this.cancel();\n        } else if (this.clearButtonVisible && !this.opened && !!this.value) {\n          e.stopPropagation();\n          // The clear button is visible and the overlay is closed, so clear the value.\n          this._clear();\n        }\n      } else {\n        // Auto-open is enabled\n        if (this.opened) {\n          // The overlay is open\n          e.stopPropagation();\n\n          if (this._focusedIndex > -1) {\n            // An item is focused, revert the input to the filtered value\n            this._focusedIndex = -1;\n            this._revertInputValue();\n          } else {\n            // No item is focused, cancel the change and close the overlay\n            this.cancel();\n          }\n        } else if (this.clearButtonVisible && !!this.value) {\n          e.stopPropagation();\n          // The clear button is visible and the overlay is closed, so clear the value.\n          this._clear();\n        }\n      }\n    }\n\n    /** @private */\n    _toggleElementChanged(toggleElement) {\n      if (toggleElement) {\n        // Don't blur the input on toggle mousedown\n        toggleElement.addEventListener('mousedown', (e) => e.preventDefault());\n        // Unfocus previously focused element if focus is not inside combo box (on touch devices)\n        toggleElement.addEventListener('click', () => {\n          if (isTouch && !this.hasAttribute('focused')) {\n            document.activeElement.blur();\n          }\n        });\n      }\n    }\n\n    /**\n     * Clears the current value.\n     * @protected\n     */\n    _clear() {\n      this.selectedItem = null;\n\n      if (this.allowCustomValue) {\n        this.value = '';\n      }\n\n      this._detectAndDispatchChange();\n    }\n\n    /**\n     * Reverts back to original value.\n     */\n    cancel() {\n      this._revertInputValueToValue();\n      // In the next _detectAndDispatchChange() call, the change detection should not pass\n      this._lastCommittedValue = this.value;\n      this._closeOrCommit();\n    }\n\n    /** @private */\n    _onOpened() {\n      setTimeout(() => this._resizeDropdown(), 1);\n\n      // Defer scroll position adjustment to improve performance.\n      requestAnimationFrame(() => {\n        this.$.dropdown.adjustScrollPosition();\n\n        // Set attribute after the items are rendered when overlay is opened for the first time.\n        this._updateActiveDescendant(this._focusedIndex);\n      });\n\n      // _detectAndDispatchChange() should not consider value changes done before opening\n      this._lastCommittedValue = this.value;\n    }\n\n    /** @private */\n    _onClosed() {\n      // Happens when the overlay is closed by clicking outside\n      if (this.opened) {\n        this.close();\n      }\n\n      if (!this.loading || this.allowCustomValue) {\n        this._commitValue();\n      }\n    }\n\n    /** @private */\n    _commitValue() {\n      const items = this._getOverlayItems();\n      if (items && this._focusedIndex > -1) {\n        const focusedItem = items[this._focusedIndex];\n        if (this.selectedItem !== focusedItem) {\n          this.selectedItem = focusedItem;\n        }\n        // make sure input field is updated in case value doesn't change (i.e. FOO -> foo)\n        this._inputElementValue = this._getItemLabel(this.selectedItem);\n      } else if (this._inputElementValue === '' || this._inputElementValue === undefined) {\n        this.selectedItem = null;\n\n        if (this.allowCustomValue) {\n          this.value = '';\n        }\n      } else {\n        const toLowerCase = (item) => item && item.toLowerCase && item.toLowerCase();\n        const itemsMatchedByLabel =\n          (this.filteredItems &&\n            this.filteredItems.filter(\n              (item) => toLowerCase(this._getItemLabel(item)) === toLowerCase(this._inputElementValue)\n            )) ||\n          [];\n        if (\n          this.allowCustomValue &&\n          // to prevent a repetitive input value being saved after pressing ESC and Tab.\n          !itemsMatchedByLabel.length\n        ) {\n          const e = new CustomEvent('custom-value-set', {\n            detail: this._inputElementValue,\n            composed: true,\n            cancelable: true,\n            bubbles: true\n          });\n          this.dispatchEvent(e);\n          if (!e.defaultPrevented) {\n            const customValue = this._inputElementValue;\n            this._selectItemForValue(customValue);\n            this.value = customValue;\n          }\n        } else if (!this.allowCustomValue && !this.opened && itemsMatchedByLabel.length > 0) {\n          this.value = this._getItemValue(itemsMatchedByLabel[0]);\n        } else {\n          this._inputElementValue = this.selectedItem ? this._getItemLabel(this.selectedItem) : this.value || '';\n        }\n      }\n\n      this._detectAndDispatchChange();\n\n      this._clearSelectionRange();\n\n      if (!this.dataProvider) {\n        this.filter = '';\n      }\n    }\n\n    /**\n     * @return {string}\n     * @protected\n     */\n    get _propertyForValue() {\n      return 'value';\n    }\n\n    /**\n     * Override an event listener from `InputMixin`.\n     * @param {!Event} event\n     * @protected\n     * @override\n     */\n    _onInput(event) {\n      if (!this.opened && !this._isClearButton(event) && !this.autoOpenDisabled) {\n        this.open();\n      }\n\n      const value = this._inputElementValue;\n      if (this.filter === value) {\n        // Filter and input value might get out of sync, while keyboard navigating for example.\n        // Afterwards, input value might be changed to the same value as used in filtering.\n        // In situation like these, we need to make sure all the filter changes handlers are run.\n        this._filterChanged(this.filter, this.itemValuePath, this.itemLabelPath);\n      } else {\n        this.filter = value;\n      }\n    }\n\n    /**\n     * Override an event listener from `InputMixin`.\n     * @param {!Event} event\n     * @protected\n     * @override\n     */\n    _onChange(event) {\n      // Suppress the native change event fired on the native input.\n      // We use `_detectAndDispatchChange` to fire a custom event.\n      event.stopPropagation();\n    }\n\n    /** @private */\n    _itemLabelPathChanged(itemLabelPath) {\n      if (typeof itemLabelPath !== 'string') {\n        console.error('You should set itemLabelPath to a valid string');\n      }\n    }\n\n    /** @private */\n    _filterChanged(filter, itemValuePath, itemLabelPath) {\n      if (filter === undefined) {\n        return;\n      }\n\n      // Scroll to the top of the list whenever the filter changes.\n      this.$.dropdown._scrollIntoView(0);\n\n      if (this.items) {\n        this.filteredItems = this._filterItems(this.items, filter);\n      } else {\n        // With certain use cases (e. g., external filtering), `items` are\n        // undefined. Filtering is unnecessary per se, but the filteredItems\n        // observer should still be invoked to update focused item.\n        this._filteredItemsChanged({ path: 'filteredItems', value: this.filteredItems }, itemValuePath, itemLabelPath);\n      }\n    }\n\n    /** @private */\n    _loadingChanged(loading) {\n      if (loading) {\n        this._focusedIndex = -1;\n      }\n    }\n\n    /** @protected */\n    _revertInputValue() {\n      if (this.filter !== '') {\n        this._inputElementValue = this.filter;\n      } else {\n        this._revertInputValueToValue();\n      }\n      this._clearSelectionRange();\n    }\n\n    /** @private */\n    _revertInputValueToValue() {\n      if (this.allowCustomValue && !this.selectedItem) {\n        this._inputElementValue = this.value;\n      } else {\n        this._inputElementValue = this._getItemLabel(this.selectedItem);\n      }\n    }\n\n    /** @private */\n    _resizeDropdown() {\n      this.$.dropdown.notifyResize();\n    }\n\n    /** @private */\n    _selectedItemChanged(selectedItem) {\n      if (selectedItem === null || selectedItem === undefined) {\n        if (this.filteredItems) {\n          if (!this.allowCustomValue) {\n            this.value = '';\n          }\n\n          this._toggleHasValue(this.value !== '');\n          this._inputElementValue = this.value;\n        }\n      } else {\n        const value = this._getItemValue(selectedItem);\n        if (this.value !== value) {\n          this.value = value;\n          if (this.value !== value) {\n            // The value was changed to something else in value-changed listener,\n            // so prevent from resetting it to the previous value.\n            return;\n          }\n        }\n\n        this._toggleHasValue(true);\n        this._inputElementValue = this._getItemLabel(selectedItem);\n      }\n\n      this.$.dropdown._selectedItem = selectedItem;\n      const items = this._getOverlayItems();\n      if (this.filteredItems && items) {\n        this._focusedIndex = this.filteredItems.indexOf(selectedItem);\n      }\n    }\n\n    /**\n     * Override an observer from `InputMixin`.\n     * @protected\n     * @override\n     */\n    _valueChanged(value, oldVal) {\n      if (value === '' && oldVal === undefined) {\n        // Initializing, no need to do anything\n        // See https://github.com/vaadin/vaadin-combo-box/issues/554\n        return;\n      }\n\n      if (this._isValidValue(value)) {\n        let item;\n        if (this._getItemValue(this.selectedItem) !== value) {\n          this._selectItemForValue(value);\n        } else {\n          item = this.selectedItem;\n        }\n\n        if (!item && this.allowCustomValue) {\n          this._inputElementValue = value;\n        }\n\n        this._toggleHasValue(this.value !== '');\n      } else {\n        this.selectedItem = null;\n      }\n      // In the next _detectAndDispatchChange() call, the change detection should pass\n      this._lastCommittedValue = undefined;\n    }\n\n    /** @private */\n    _detectAndDispatchChange() {\n      if (this.value !== this._lastCommittedValue) {\n        this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\n        this._lastCommittedValue = this.value;\n      }\n    }\n\n    /** @private */\n    _itemsChanged(items, oldItems) {\n      this._ensureItemsOrDataProvider(() => {\n        this.items = oldItems;\n      });\n    }\n\n    /** @private */\n    _itemsOrPathsChanged(e) {\n      if (e.path === 'items' || e.path === 'items.splices') {\n        if (this.items) {\n          this.filteredItems = this.items.slice(0);\n        } else if (this.__previousItems) {\n          // Only clear filteredItems if the component had items previously but got cleared\n          this.filteredItems = null;\n        }\n\n        const valueIndex = this._indexOfValue(this.value, this.items);\n        this._focusedIndex = valueIndex;\n\n        const item = valueIndex > -1 && this.items[valueIndex];\n        if (item) {\n          this.selectedItem = item;\n        }\n      }\n      this.__previousItems = e.value;\n    }\n\n    /** @private */\n    _filteredItemsChanged(e) {\n      if (e.path === 'filteredItems' || e.path === 'filteredItems.splices') {\n        this._setOverlayItems(this.filteredItems);\n\n        this._focusedIndex =\n          this.opened || this.autoOpenDisabled\n            ? this.$.dropdown.indexOfLabel(this.filter)\n            : this._indexOfValue(this.value, this.filteredItems);\n\n        // see https://github.com/vaadin/web-components/issues/2615\n        if (this.selectedItem === null && this._focusedIndex >= 0) {\n          const filteredItem = this.filteredItems[this._focusedIndex];\n          if (this._getItemValue(filteredItem) === this.value) {\n            this._selectItemForValue(this.value);\n          }\n        }\n      }\n    }\n\n    /** @private */\n    _filterItems(arr, filter) {\n      if (!arr) {\n        return arr;\n      }\n\n      const filteredItems = arr.filter((item) => {\n        filter = filter ? filter.toString().toLowerCase() : '';\n        // Check if item contains input value.\n        return this._getItemLabel(item).toString().toLowerCase().indexOf(filter) > -1;\n      });\n\n      return filteredItems;\n    }\n\n    /** @private */\n    _selectItemForValue(value) {\n      const valueIndex = this._indexOfValue(value, this.filteredItems);\n      const previouslySelectedItem = this.selectedItem;\n\n      this.selectedItem =\n        valueIndex >= 0\n          ? this.filteredItems[valueIndex]\n          : this.dataProvider && this.selectedItem === undefined\n          ? undefined\n          : null;\n\n      if (this.selectedItem === null && previouslySelectedItem === null) {\n        this._selectedItemChanged(this.selectedItem);\n      }\n    }\n\n    /** @protected */\n    _getItemElements() {\n      return Array.from(this.$.dropdown._scroller.querySelectorAll('vaadin-combo-box-item'));\n    }\n\n    /** @private */\n    _getOverlayItems() {\n      return this.$.dropdown._items;\n    }\n\n    /** @private */\n    _setOverlayItems(items) {\n      this.$.dropdown.set('_items', items);\n    }\n\n    /** @private */\n    _indexOfValue(value, items) {\n      if (items && this._isValidValue(value)) {\n        for (let i = 0; i < items.length; i++) {\n          if (items[i] !== this.__placeHolder && this._getItemValue(items[i]) === value) {\n            return i;\n          }\n        }\n      }\n\n      return -1;\n    }\n\n    /**\n     * Checks if the value is supported as an item value in this control.\n     * @private\n     */\n    _isValidValue(value) {\n      return value !== undefined && value !== null;\n    }\n\n    /** @private */\n    _overlaySelectedItemChanged(e) {\n      // stop this private event from leaking outside.\n      e.stopPropagation();\n\n      if (e.detail.item instanceof ComboBoxPlaceholder) {\n        // Placeholder items should not be selectable.\n        return;\n      }\n\n      if (this.opened) {\n        this._focusedIndex = this.filteredItems.indexOf(e.detail.item);\n        this.close();\n      } else if (this.selectedItem !== e.detail.item) {\n        this.selectedItem = e.detail.item;\n        this._detectAndDispatchChange();\n      }\n    }\n\n    /** @private */\n    __onClearButtonMouseDown(event) {\n      event.preventDefault(); // Prevent native focusout event\n      this.inputElement.focus();\n    }\n\n    /** @private */\n    _onFocusout(event) {\n      // Fixes the problem with `focusout` happening when clicking on the scroll bar on Edge\n      if (event.relatedTarget === this.$.dropdown.$.overlay) {\n        event.composedPath()[0].focus();\n        return;\n      }\n      if (!this.readonly && !this._closeOnBlurIsPrevented) {\n        this._closeOrCommit();\n      }\n    }\n\n    /** @private */\n    _onTouchend(event) {\n      if (!this.clearElement || event.composedPath()[0] !== this.clearElement) {\n        return;\n      }\n\n      event.preventDefault();\n      this._clear();\n    }\n\n    /**\n     * Returns true if `value` is valid, and sets the `invalid` flag appropriately.\n     *\n     * @return {boolean} True if the value is valid and sets the `invalid` flag appropriately\n     */\n    validate() {\n      return !(this.invalid = !this.checkValidity());\n    }\n\n    /**\n     * Returns true if the current input value satisfies all constraints (if any).\n     * You can override this method for custom validations.\n     *\n     * @return {boolean}\n     */\n    checkValidity() {\n      if (super.checkValidity) {\n        return super.checkValidity();\n      }\n\n      return !this.required || !!this.value;\n    }\n\n    /**\n     * Fired when the value changes.\n     *\n     * @event value-changed\n     * @param {Object} detail\n     *  @param {String} detail.value the combobox value\n     */\n\n    /**\n     * Fired when selected item changes.\n     *\n     * @event selected-item-changed\n     * @param {Object} detail\n     *  @param {Object|String} detail.value the selected item. Type is the same as the type of `items`.\n     */\n\n    /**\n     * Fired when the user sets a custom value.\n     * @event custom-value-set\n     * @param {String} detail the custom value\n     */\n\n    /**\n     * Fired when value changes.\n     * To comply with https://developer.mozilla.org/en-US/docs/Web/Events/change\n     * @event change\n     */\n  };\n"],
  "mappings": "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",
  "names": []
}
