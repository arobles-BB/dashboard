{
  "version": 3,
  "sources": ["../.pnpm/@polymer/polymer@3.2.0/node_modules/@polymer/polymer/lib/elements/dom-module.js", "../.pnpm/@polymer/polymer@3.2.0/node_modules/@polymer/polymer/lib/utils/style-gather.js"],
  "sourcesContent": ["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\n\nlet modules = {};\nlet lcModules = {};\n/**\n * Sets a dom-module into the global registry by id.\n *\n * @param {string} id dom-module id\n * @param {DomModule} module dom-module instance\n * @return {void}\n */\nfunction setModule(id, module) {\n  // store id separate from lowercased id so that\n  // in all cases mixedCase id will stored distinctly\n  // and lowercase version is a fallback\n  modules[id] = lcModules[id.toLowerCase()] = module;\n}\n/**\n * Retrieves a dom-module from the global registry by id.\n *\n * @param {string} id dom-module id\n * @return {DomModule!} dom-module instance\n */\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nexport class DomModule extends HTMLElement {\n\n  static get observedAttributes() { return ['id']; }\n\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   *\n   * @export\n   * @nocollapse Referred to indirectly in style-gather.js\n   */\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n      return m;\n    }\n    return null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @param {string} name Name of attribute.\n   * @param {?string} old Old value of attribute.\n   * @param {?string} value Current value of attribute.\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   * @override\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n  /* eslint-enable no-unused-args */\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accomodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(\n        this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n    return this.__assetpath;\n  }\n\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   * @return {void}\n   */\n  register(id) {\n    id = id || this.id;\n    if (id) {\n      // Under strictTemplatePolicy, reject and null out any re-registered\n      // dom-module since it is ambiguous whether first-in or last-in is trusted\n      if (strictTemplatePolicy && findModule(id) !== undefined) {\n        setModule(id, null);\n        throw new Error(`strictTemplatePolicy: dom-module ${id} re-registered`);\n      }\n      this.id = id;\n      setModule(id, this);\n      styleOutsideTemplateCheck(this);\n    }\n  }\n}\n\nDomModule.prototype['modules'] = modules;\n\ncustomElements.define('dom-module', DomModule);\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module with utilities for collection CSS text from `<templates>`, external\n * stylesheets, and `dom-module`s.\n *\n * @summary Module with utilities for collection CSS text from various sources.\n */\n\nimport { DomModule } from '../elements/dom-module.js';\nimport { resolveCss } from './resolve-url.js';\n\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\nconst SHADY_UNSCOPED_ATTR = 'shady-unscoped';\n\n/**\n * @param {string} moduleId .\n * @return {?DomModule} .\n */\nfunction importModule(moduleId) {\n  return /** @type {?DomModule} */(DomModule.import(moduleId));\n}\n\nfunction styleForImport(importDoc) {\n  // NOTE: polyfill affordance.\n  // under the HTMLImports polyfill, there will be no 'body',\n  // but the import pseudo-doc can be used directly.\n  let container = importDoc.body ? importDoc.body : importDoc;\n  const importCss = resolveCss(container.textContent,\n    importDoc.baseURI);\n  const style = document.createElement('style');\n  style.textContent = importCss;\n  return style;\n}\n\n/** @typedef {{assetpath: string}} */\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n\n/**\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\n *\n * @function\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\n */\nexport function stylesFromModules(moduleIds) {\n const modules = moduleIds.trim().split(/\\s+/);\n const styles = [];\n for (let i=0; i < modules.length; i++) {\n   styles.push(...stylesFromModule(modules[i]));\n }\n return styles;\n}\n\n/**\n * Returns a list of <style> elements in a given `dom-module`.\n * Styles in a `dom-module` can come either from `<style>`s within the\n * first `<template>`, or else from one or more\n * `<link rel=\"import\" type=\"css\">` links outside the template.\n *\n * @param {string} moduleId dom-module id to gather styles from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModule(moduleId) {\n  const m = importModule(moduleId);\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n    return [];\n  }\n\n  if (m._styles === undefined) {\n    const styles = [];\n    // module imports: <link rel=\"import\" type=\"css\">\n    styles.push(..._stylesFromModuleImports(m));\n    // include css from the first template in the module\n    const template = /** @type {?HTMLTemplateElement} */(\n        m.querySelector('template'));\n    if (template) {\n      styles.push(...stylesFromTemplate(template,\n        /** @type {templateWithAssetPath} */(m).assetpath));\n    }\n\n    m._styles = styles;\n  }\n\n  return m._styles;\n}\n\n/**\n * Returns the `<style>` elements within a given template.\n *\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string=} baseURI baseURI for style content\n * @return {!Array<!HTMLStyleElement>} Array of styles\n */\nexport function stylesFromTemplate(template, baseURI) {\n  if (!template._styles) {\n    const styles = [];\n    // if element is a template, get content from its .content\n    const e$ = template.content.querySelectorAll('style');\n    for (let i=0; i < e$.length; i++) {\n      let e = e$[i];\n      // support style sharing by allowing styles to \"include\"\n      // other dom-modules that contain styling\n      let include = e.getAttribute(INCLUDE_ATTR);\n      if (include) {\n        styles.push(...stylesFromModules(include).filter(function(item, index, self) {\n          return self.indexOf(item) === index;\n        }));\n      }\n      if (baseURI) {\n        e.textContent =\n            resolveCss(e.textContent, /** @type {string} */ (baseURI));\n      }\n      styles.push(e);\n    }\n    template._styles = styles;\n  }\n  return template._styles;\n}\n\n/**\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModuleImports(moduleId) {\n let m = importModule(moduleId);\n return m ? _stylesFromModuleImports(m) : [];\n}\n\n/**\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\n */\nfunction _stylesFromModuleImports(module) {\n  const styles = [];\n  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (let i=0; i < p$.length; i++) {\n    let p = p$[i];\n    if (p.import) {\n      const importDoc = p.import;\n      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\n      if (unscoped && !importDoc._unscopedStyle) {\n        const style = styleForImport(importDoc);\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\n        importDoc._unscopedStyle = style;\n      } else if (!importDoc._style) {\n        importDoc._style = styleForImport(importDoc);\n      }\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\n    }\n  }\n  return styles;\n}\n\n/**\n *\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\n * Note: This method is deprecated, use `stylesFromModules` instead.\n *\n * @deprecated\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {string} Concatenated CSS content from specified `dom-module`s\n */\nexport function cssFromModules(moduleIds) {\n let modules = moduleIds.trim().split(/\\s+/);\n let cssText = '';\n for (let i=0; i < modules.length; i++) {\n   cssText += cssFromModule(modules[i]);\n }\n return cssText;\n}\n\n/**\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n * can come either from `<style>`s within the first `<template>`, or else\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n * template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromModule` instead.\n *\n * @deprecated\n * @param {string} moduleId dom-module id to gather styles from\n * @return {string} Concatenated CSS content from specified `dom-module`\n */\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    let t = /** @type {?HTMLTemplateElement} */(m.querySelector('template'));\n    if (t) {\n      cssText += cssFromTemplate(t,\n        /** @type {templateWithAssetPath} */(m).assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\n/**\n * Returns CSS text of `<styles>` within a given template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromTemplate` instead.\n *\n * @deprecated\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Concatenated CSS content from specified template\n */\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  const e$ = stylesFromTemplate(template, baseURI);\n  // if element is a template, get content from its .content\n  for (let i=0; i < e$.length; i++) {\n    let e = e$[i];\n    if (e.parentNode) {\n      e.parentNode.removeChild(e);\n    }\n    cssText += e.textContent;\n  }\n  return cssText;\n}\n\n/**\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n * links within the specified `dom-module`.\n *\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\n *\n * @deprecated\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {string} Concatenated CSS content from links in specified `dom-module`\n */\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\n/**\n * @deprecated\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {string} Concatenated CSS content from links in the dom-module\n */\nfunction _cssFromModuleImports(module) {\n  let cssText = '';\n  let styles = _stylesFromModuleImports(module);\n  for (let i=0; i < styles.length; i++) {\n    cssText += styles[i].textContent;\n  }\n  return cssText;\n}\n"],
  "mappings": "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",
  "names": []
}
