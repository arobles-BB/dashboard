import {
  InputFieldMixin
} from "./chunk-5FEZHQWO.js";
import {
  PatternMixin
} from "./chunk-43QNQDZ4.js";
import {
  inputFieldShared as inputFieldShared2
} from "./chunk-W64WW7UW.js";
import {
  inputFieldShared
} from "./chunk-LXLTQWPM.js";
import {
  InputController
} from "./chunk-YXC7JNSV.js";
import {
  LabelledInputController
} from "./chunk-PXVMLDOO.js";
import {
  ElementMixin
} from "./chunk-QS3SH3AF.js";
import {
  ThemableMixin,
  registerStyles
} from "./chunk-FZIWHSOX.js";
import {
  PolymerElement
} from "./chunk-RZW6ORFJ.js";
import {
  html
} from "./chunk-5VJMXRGB.js";

// node_modules/.pnpm/@vaadin/text-field@22.0.2/node_modules/@vaadin/text-field/theme/lumo/vaadin-text-field-styles.js
registerStyles("vaadin-text-field", inputFieldShared, {
  moduleId: "lumo-text-field-styles"
});

// node_modules/.pnpm/@vaadin/text-field@22.0.2/node_modules/@vaadin/text-field/src/vaadin-text-field.js
registerStyles("vaadin-text-field", inputFieldShared2, { moduleId: "vaadin-text-field-styles" });
var TextField = class extends PatternMixin(InputFieldMixin(ThemableMixin(ElementMixin(PolymerElement)))) {
  static get is() {
    return "vaadin-text-field";
  }
  static get template() {
    return html`
      <style>
        [part='input-field'] {
          flex-grow: 0;
        }
      </style>

      <div class="vaadin-field-container">
        <div part="label">
          <slot name="label"></slot>
          <span part="required-indicator" aria-hidden="true" on-click="focus"></span>
        </div>

        <vaadin-input-container
          part="input-field"
          readonly="[[readonly]]"
          disabled="[[disabled]]"
          invalid="[[invalid]]"
          theme$="[[theme]]"
        >
          <slot name="prefix" slot="prefix"></slot>
          <slot name="input"></slot>
          <slot name="suffix" slot="suffix"></slot>
          <div id="clearButton" part="clear-button" slot="suffix"></div>
        </vaadin-input-container>

        <div part="helper-text">
          <slot name="helper"></slot>
        </div>

        <div part="error-message">
          <slot name="error-message"></slot>
        </div>
      </div>
    `;
  }
  static get properties() {
    return {
      maxlength: {
        type: Number
      },
      minlength: {
        type: Number
      }
    };
  }
  static get delegateAttrs() {
    return [...super.delegateAttrs, "maxlength", "minlength"];
  }
  static get constraints() {
    return [...super.constraints, "maxlength", "minlength"];
  }
  constructor() {
    super();
    this._setType("text");
  }
  get clearElement() {
    return this.$.clearButton;
  }
  ready() {
    super.ready();
    this.addController(new InputController(this, (input) => {
      this._setInputElement(input);
      this._setFocusElement(input);
      this.stateTarget = input;
      this.ariaTarget = input;
    }));
    this.addController(new LabelledInputController(this.inputElement, this._labelNode));
  }
};
customElements.define(TextField.is, TextField);

export {
  TextField
};
/**
 * @license
 * Copyright (c) 2021 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=chunk-QPENG2F2.js.map
