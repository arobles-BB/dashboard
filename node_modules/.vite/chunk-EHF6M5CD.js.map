{
  "version": 3,
  "sources": ["../.pnpm/@polymer/polymer@3.2.0/node_modules/@polymer/polymer/lib/elements/dom-repeat.js"],
  "sourcesContent": ["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement } from '../../polymer-element.js';\n\nimport { TemplateInstanceBase, templatize, modelForElement } from '../utils/templatize.js'; // eslint-disable-line no-unused-vars\nimport { Debouncer } from '../utils/debounce.js';\nimport { enqueueDebouncer, flush } from '../utils/flush.js';\nimport { OptionalMutableData } from '../mixins/mutable-data.js';\nimport { matches, translate } from '../utils/path.js';\nimport { timeOut, microTask } from '../utils/async.js';\nimport { wrap } from '../utils/wrap.js';\n\n/**\n * @constructor\n * @implements {Polymer_OptionalMutableData}\n * @extends {PolymerElement}\n * @private\n */\nconst domRepeatBase = OptionalMutableData(PolymerElement);\n\n/**\n * The `<dom-repeat>` element will automatically stamp and binds one instance\n * of template content to each object in a user-provided array.\n * `dom-repeat` accepts an `items` property, and one instance of the template\n * is stamped for each item into the DOM at the location of the `dom-repeat`\n * element.  The `item` property will be set on each instance's binding\n * scope, thus templates should bind to sub-properties of `item`.\n *\n * Example:\n *\n * ```html\n * <dom-module id=\"employee-list\">\n *\n *   <template>\n *\n *     <div> Employee list: </div>\n *     <dom-repeat items=\"{{employees}}\">\n *       <template>\n *         <div>First name: <span>{{item.first}}</span></div>\n *         <div>Last name: <span>{{item.last}}</span></div>\n *       </template>\n *     </dom-repeat>\n *\n *   </template>\n *\n * </dom-module>\n * ```\n *\n * With the following custom element definition:\n *\n * ```js\n * class EmployeeList extends PolymerElement {\n *   static get is() { return 'employee-list'; }\n *   static get properties() {\n *     return {\n *       employees: {\n *         value() {\n *           return [\n *             {first: 'Bob', last: 'Smith'},\n *             {first: 'Sally', last: 'Johnson'},\n *             ...\n *           ];\n *         }\n *       }\n *     };\n *   }\n * }\n * ```\n *\n * Notifications for changes to items sub-properties will be forwarded to template\n * instances, which will update via the normal structured data notification system.\n *\n * Mutations to the `items` array itself should be made using the Array\n * mutation API's on the PropertyEffects mixin (`push`, `pop`, `splice`,\n * `shift`, `unshift`), and template instances will be kept in sync with the\n * data in the array.\n *\n * Events caught by event handlers within the `dom-repeat` template will be\n * decorated with a `model` property, which represents the binding scope for\n * each template instance.  The model should be used to manipulate data on the\n * instance, for example `event.model.set('item.checked', true);`.\n *\n * Alternatively, the model for a template instance for an element stamped by\n * a `dom-repeat` can be obtained using the `modelForElement` API on the\n * `dom-repeat` that stamped it, for example\n * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.\n * This may be useful for manipulating instance data of event targets obtained\n * by event handlers on parents of the `dom-repeat` (event delegation).\n *\n * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a\n * `filter` and/or `sort` property.  This may be a string that names a function on\n * the host, or a function may be assigned to the property directly.  The functions\n * should implemented following the standard `Array` filter/sort API.\n *\n * In order to re-run the filter or sort functions based on changes to sub-fields\n * of `items`, the `observe` property may be set as a space-separated list of\n * `item` sub-fields that should cause a re-filter/sort when modified.  If\n * the filter or sort function depends on properties not contained in `items`,\n * the user should observe changes to those properties and call `render` to update\n * the view based on the dependency change.\n *\n * For example, for an `dom-repeat` with a filter of the following:\n *\n * ```js\n * isEngineer(item) {\n *   return item.type == 'engineer' || item.manager.type == 'engineer';\n * }\n * ```\n *\n * Then the `observe` property should be configured as follows:\n *\n * ```html\n * <dom-repeat items=\"{{employees}}\" filter=\"isEngineer\" observe=\"type manager.type\">\n * ```\n *\n * @customElement\n * @polymer\n * @extends {domRepeatBase}\n * @appliesMixin OptionalMutableData\n * @summary Custom element for stamping instance of a template bound to\n *   items in an array.\n */\nexport class DomRepeat extends domRepeatBase {\n\n  // Not needed to find template; can be removed once the analyzer\n  // can find the tag name from customElements.define call\n  static get is() { return 'dom-repeat'; }\n\n  static get template() { return null; }\n\n  static get properties() {\n\n    /**\n     * Fired whenever DOM is added or removed by this template (by\n     * default, rendering occurs lazily).  To force immediate rendering, call\n     * `render`.\n     *\n     * @event dom-change\n     */\n    return {\n\n      /**\n       * An array containing items determining how many instances of the template\n       * to stamp and that that each template instance should bind to.\n       */\n      items: {\n        type: Array\n      },\n\n      /**\n       * The name of the variable to add to the binding scope for the array\n       * element associated with a given template instance.\n       */\n      as: {\n        type: String,\n        value: 'item'\n      },\n\n      /**\n       * The name of the variable to add to the binding scope with the index\n       * of the instance in the sorted and filtered list of rendered items.\n       * Note, for the index in the `this.items` array, use the value of the\n       * `itemsIndexAs` property.\n       */\n      indexAs: {\n        type: String,\n        value: 'index'\n      },\n\n      /**\n       * The name of the variable to add to the binding scope with the index\n       * of the instance in the `this.items` array. Note, for the index of\n       * this instance in the sorted and filtered list of rendered items,\n       * use the value of the `indexAs` property.\n       */\n      itemsIndexAs: {\n        type: String,\n        value: 'itemsIndex'\n      },\n\n      /**\n       * A function that should determine the sort order of the items.  This\n       * property should either be provided as a string, indicating a method\n       * name on the element's host, or else be an actual function.  The\n       * function should match the sort function passed to `Array.sort`.\n       * Using a sort function has no effect on the underlying `items` array.\n       */\n      sort: {\n        type: Function,\n        observer: '__sortChanged'\n      },\n\n      /**\n       * A function that can be used to filter items out of the view.  This\n       * property should either be provided as a string, indicating a method\n       * name on the element's host, or else be an actual function.  The\n       * function should match the sort function passed to `Array.filter`.\n       * Using a filter function has no effect on the underlying `items` array.\n       */\n      filter: {\n        type: Function,\n        observer: '__filterChanged'\n      },\n\n      /**\n       * When using a `filter` or `sort` function, the `observe` property\n       * should be set to a space-separated list of the names of item\n       * sub-fields that should trigger a re-sort or re-filter when changed.\n       * These should generally be fields of `item` that the sort or filter\n       * function depends on.\n       */\n      observe: {\n        type: String,\n        observer: '__observeChanged'\n      },\n\n      /**\n       * When using a `filter` or `sort` function, the `delay` property\n       * determines a debounce time in ms after a change to observed item\n       * properties that must pass before the filter or sort is re-run.\n       * This is useful in rate-limiting shuffling of the view when\n       * item changes may be frequent.\n       */\n      delay: Number,\n\n      /**\n       * Count of currently rendered items after `filter` (if any) has been applied.\n       * If \"chunking mode\" is enabled, `renderedItemCount` is updated each time a\n       * set of template instances is rendered.\n       *\n       */\n      renderedItemCount: {\n        type: Number,\n        notify: true,\n        readOnly: true\n      },\n\n      /**\n       * Defines an initial count of template instances to render after setting\n       * the `items` array, before the next paint, and puts the `dom-repeat`\n       * into \"chunking mode\".  The remaining items will be created and rendered\n       * incrementally at each animation frame therof until all instances have\n       * been rendered.\n       */\n      initialCount: {\n        type: Number,\n        observer: '__initializeChunking'\n      },\n\n      /**\n       * When `initialCount` is used, this property defines a frame rate (in\n       * fps) to target by throttling the number of instances rendered each\n       * frame to not exceed the budget for the target frame rate.  The\n       * framerate is effectively the number of `requestAnimationFrame`s that\n       * it tries to allow to actually fire in a given second. It does this\n       * by measuring the time between `rAF`s and continuously adjusting the\n       * number of items created each `rAF` to maintain the target framerate.\n       * Setting this to a higher number allows lower latency and higher\n       * throughput for event handlers and other tasks, but results in a\n       * longer time for the remaining items to complete rendering.\n       */\n      targetFramerate: {\n        type: Number,\n        value: 20\n      },\n\n      _targetFrameTime: {\n        type: Number,\n        computed: '__computeFrameTime(targetFramerate)'\n      }\n\n    };\n\n  }\n\n  static get observers() {\n    return [ '__itemsChanged(items.*)' ];\n  }\n\n  constructor() {\n    super();\n    this.__instances = [];\n    this.__limit = Infinity;\n    this.__pool = [];\n    this.__renderDebouncer = null;\n    this.__itemsIdxToInstIdx = {};\n    this.__chunkCount = null;\n    this.__lastChunkTime = null;\n    this.__sortFn = null;\n    this.__filterFn = null;\n    this.__observePaths = null;\n    /** @type {?function(new:Polymer.TemplateInstanceBase, *)} */\n    this.__ctor = null;\n    this.__isDetached = true;\n    this.template = null;\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__isDetached = true;\n    for (let i=0; i<this.__instances.length; i++) {\n      this.__detachInstance(i);\n    }\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.style.display = 'none';\n    // only perform attachment if the element was previously detached.\n    if (this.__isDetached) {\n      this.__isDetached = false;\n      let wrappedParent = wrap(wrap(this).parentNode);\n      for (let i=0; i<this.__instances.length; i++) {\n        this.__attachInstance(i, wrappedParent);\n      }\n    }\n  }\n\n  __ensureTemplatized() {\n    // Templatizing (generating the instance constructor) needs to wait\n    // until ready, since won't have its template content handed back to\n    // it until then\n    if (!this.__ctor) {\n      let template = this.template = /** @type {HTMLTemplateElement} */(this.querySelector('template'));\n      if (!template) {\n        // // Wait until childList changes and template should be there by then\n        let observer = new MutationObserver(() => {\n          if (this.querySelector('template')) {\n            observer.disconnect();\n            this.__render();\n          } else {\n            throw new Error('dom-repeat requires a <template> child');\n          }\n        });\n        observer.observe(this, {childList: true});\n        return false;\n      }\n      // Template instance props that should be excluded from forwarding\n      let instanceProps = {};\n      instanceProps[this.as] = true;\n      instanceProps[this.indexAs] = true;\n      instanceProps[this.itemsIndexAs] = true;\n      this.__ctor = templatize(template, this, {\n        mutableData: this.mutableData,\n        parentModel: true,\n        instanceProps: instanceProps,\n        /**\n         * @this {DomRepeat}\n         * @param {string} prop Property to set\n         * @param {*} value Value to set property to\n         */\n        forwardHostProp: function(prop, value) {\n          let i$ = this.__instances;\n          for (let i=0, inst; (i<i$.length) && (inst=i$[i]); i++) {\n            inst.forwardHostProp(prop, value);\n          }\n        },\n        /**\n         * @this {DomRepeat}\n         * @param {Object} inst Instance to notify\n         * @param {string} prop Property to notify\n         * @param {*} value Value to notify\n         */\n        notifyInstanceProp: function(inst, prop, value) {\n          if (matches(this.as, prop)) {\n            let idx = inst[this.itemsIndexAs];\n            if (prop == this.as) {\n              this.items[idx] = value;\n            }\n            let path = translate(this.as, `${JSCompiler_renameProperty('items', this)}.${idx}`, prop);\n            this.notifyPath(path, value);\n          }\n        }\n      });\n    }\n    return true;\n  }\n\n  __getMethodHost() {\n    // Technically this should be the owner of the outermost template.\n    // In shadow dom, this is always getRootNode().host, but we can\n    // approximate this via cooperation with our dataHost always setting\n    // `_methodHost` as long as there were bindings (or id's) on this\n    // instance causing it to get a dataHost.\n    return this.__dataHost._methodHost || this.__dataHost;\n  }\n\n  __functionFromPropertyValue(functionOrMethodName) {\n    if (typeof functionOrMethodName === 'string') {\n      let methodName = functionOrMethodName;\n      let obj = this.__getMethodHost();\n      return function() { return obj[methodName].apply(obj, arguments); };\n    }\n\n    return functionOrMethodName;\n  }\n\n  __sortChanged(sort) {\n    this.__sortFn = this.__functionFromPropertyValue(sort);\n    if (this.items) { this.__debounceRender(this.__render); }\n  }\n\n  __filterChanged(filter) {\n    this.__filterFn = this.__functionFromPropertyValue(filter);\n    if (this.items) { this.__debounceRender(this.__render); }\n  }\n\n  __computeFrameTime(rate) {\n    return Math.ceil(1000/rate);\n  }\n\n  __initializeChunking() {\n    if (this.initialCount) {\n      this.__limit = this.initialCount;\n      this.__chunkCount = this.initialCount;\n      this.__lastChunkTime = performance.now();\n    }\n  }\n\n  __tryRenderChunk() {\n    // Debounced so that multiple calls through `_render` between animation\n    // frames only queue one new rAF (e.g. array mutation & chunked render)\n    if (this.items && this.__limit < this.items.length) {\n      this.__debounceRender(this.__requestRenderChunk);\n    }\n  }\n\n  __requestRenderChunk() {\n    requestAnimationFrame(()=>this.__renderChunk());\n  }\n\n  __renderChunk() {\n    // Simple auto chunkSize throttling algorithm based on feedback loop:\n    // measure actual time between frames and scale chunk count by ratio\n    // of target/actual frame time\n    let currChunkTime = performance.now();\n    let ratio = this._targetFrameTime / (currChunkTime - this.__lastChunkTime);\n    this.__chunkCount = Math.round(this.__chunkCount * ratio) || 1;\n    this.__limit += this.__chunkCount;\n    this.__lastChunkTime = currChunkTime;\n    this.__debounceRender(this.__render);\n  }\n\n  __observeChanged() {\n    this.__observePaths = this.observe &&\n      this.observe.replace('.*', '.').split(' ');\n  }\n\n  __itemsChanged(change) {\n    if (this.items && !Array.isArray(this.items)) {\n      console.warn('dom-repeat expected array for `items`, found', this.items);\n    }\n    // If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the\n    // path to that instance synchronously (returns false for non-item paths)\n    if (!this.__handleItemPath(change.path, change.value)) {\n      // Otherwise, the array was reset ('items') or spliced ('items.splices'),\n      // so queue a full refresh\n      this.__initializeChunking();\n      this.__debounceRender(this.__render);\n    }\n  }\n\n  __handleObservedPaths(path) {\n    // Handle cases where path changes should cause a re-sort/filter\n    if (this.__sortFn || this.__filterFn) {\n      if (!path) {\n        // Always re-render if the item itself changed\n        this.__debounceRender(this.__render, this.delay);\n      } else if (this.__observePaths) {\n        // Otherwise, re-render if the path changed matches an observed path\n        let paths = this.__observePaths;\n        for (let i=0; i<paths.length; i++) {\n          if (path.indexOf(paths[i]) === 0) {\n            this.__debounceRender(this.__render, this.delay);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {function(this:DomRepeat)} fn Function to debounce.\n   * @param {number=} delay Delay in ms to debounce by.\n   */\n  __debounceRender(fn, delay = 0) {\n    this.__renderDebouncer = Debouncer.debounce(\n          this.__renderDebouncer\n        , delay > 0 ? timeOut.after(delay) : microTask\n        , fn.bind(this));\n    enqueueDebouncer(this.__renderDebouncer);\n  }\n\n  /**\n   * Forces the element to render its content. Normally rendering is\n   * asynchronous to a provoking change. This is done for efficiency so\n   * that multiple changes trigger only a single render. The render method\n   * should be called if, for example, template rendering is required to\n   * validate application state.\n   * @return {void}\n   */\n  render() {\n    // Queue this repeater, then flush all in order\n    this.__debounceRender(this.__render);\n    flush();\n  }\n\n  __render() {\n    if (!this.__ensureTemplatized()) {\n      // No template found yet\n      return;\n    }\n    this.__applyFullRefresh();\n    // Reset the pool\n    // TODO(kschaaf): Reuse pool across turns and nested templates\n    // Now that objects/arrays are re-evaluated when set, we can safely\n    // reuse pooled instances across turns, however we still need to decide\n    // semantics regarding how long to hold, how many to hold, etc.\n    this.__pool.length = 0;\n    // Set rendered item count\n    this._setRenderedItemCount(this.__instances.length);\n    // Notify users\n    this.dispatchEvent(new CustomEvent('dom-change', {\n      bubbles: true,\n      composed: true\n    }));\n    // Check to see if we need to render more items\n    this.__tryRenderChunk();\n  }\n\n  __applyFullRefresh() {\n    let items = this.items || [];\n    let isntIdxToItemsIdx = new Array(items.length);\n    for (let i=0; i<items.length; i++) {\n      isntIdxToItemsIdx[i] = i;\n    }\n    // Apply user filter\n    if (this.__filterFn) {\n      isntIdxToItemsIdx = isntIdxToItemsIdx.filter((i, idx, array) =>\n        this.__filterFn(items[i], idx, array));\n    }\n    // Apply user sort\n    if (this.__sortFn) {\n      isntIdxToItemsIdx.sort((a, b) => this.__sortFn(items[a], items[b]));\n    }\n    // items->inst map kept for item path forwarding\n    const itemsIdxToInstIdx = this.__itemsIdxToInstIdx = {};\n    let instIdx = 0;\n    // Generate instances and assign items\n    const limit = Math.min(isntIdxToItemsIdx.length, this.__limit);\n    for (; instIdx<limit; instIdx++) {\n      let inst = this.__instances[instIdx];\n      let itemIdx = isntIdxToItemsIdx[instIdx];\n      let item = items[itemIdx];\n      itemsIdxToInstIdx[itemIdx] = instIdx;\n      if (inst) {\n        inst._setPendingProperty(this.as, item);\n        inst._setPendingProperty(this.indexAs, instIdx);\n        inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n        inst._flushProperties();\n      } else {\n        this.__insertInstance(item, instIdx, itemIdx);\n      }\n    }\n    // Remove any extra instances from previous state\n    for (let i=this.__instances.length-1; i>=instIdx; i--) {\n      this.__detachAndRemoveInstance(i);\n    }\n  }\n\n  __detachInstance(idx) {\n    let inst = this.__instances[idx];\n    const wrappedRoot = wrap(inst.root);\n    for (let i=0; i<inst.children.length; i++) {\n      let el = inst.children[i];\n      wrappedRoot.appendChild(el);\n    }\n    return inst;\n  }\n\n  __attachInstance(idx, parent) {\n    let inst = this.__instances[idx];\n    // Note, this is pre-wrapped as an optimization\n    parent.insertBefore(inst.root, this);\n  }\n\n  __detachAndRemoveInstance(idx) {\n    let inst = this.__detachInstance(idx);\n    if (inst) {\n      this.__pool.push(inst);\n    }\n    this.__instances.splice(idx, 1);\n  }\n\n  __stampInstance(item, instIdx, itemIdx) {\n    let model = {};\n    model[this.as] = item;\n    model[this.indexAs] = instIdx;\n    model[this.itemsIndexAs] = itemIdx;\n    return new this.__ctor(model);\n  }\n\n  __insertInstance(item, instIdx, itemIdx) {\n    let inst = this.__pool.pop();\n    if (inst) {\n      // TODO(kschaaf): If the pool is shared across turns, hostProps\n      // need to be re-set to reused instances in addition to item\n      inst._setPendingProperty(this.as, item);\n      inst._setPendingProperty(this.indexAs, instIdx);\n      inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n      inst._flushProperties();\n    } else {\n      inst = this.__stampInstance(item, instIdx, itemIdx);\n    }\n    let beforeRow = this.__instances[instIdx + 1];\n    let beforeNode = beforeRow ? beforeRow.children[0] : this;\n    wrap(wrap(this).parentNode).insertBefore(inst.root, beforeNode);\n    this.__instances[instIdx] = inst;\n    return inst;\n  }\n\n  // Implements extension point from Templatize mixin\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hidden Set to true to hide the children;\n   * set to false to show them.\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren(hidden) {\n    for (let i=0; i<this.__instances.length; i++) {\n      this.__instances[i]._showHideChildren(hidden);\n    }\n  }\n\n  // Called as a side effect of a host items.<key>.<path> path change,\n  // responsible for notifying item.<path> changes to inst for key\n  __handleItemPath(path, value) {\n    let itemsPath = path.slice(6); // 'items.'.length == 6\n    let dot = itemsPath.indexOf('.');\n    let itemsIdx = dot < 0 ? itemsPath : itemsPath.substring(0, dot);\n    // If path was index into array...\n    if (itemsIdx == parseInt(itemsIdx, 10)) {\n      let itemSubPath = dot < 0 ? '' : itemsPath.substring(dot+1);\n      // If the path is observed, it will trigger a full refresh\n      this.__handleObservedPaths(itemSubPath);\n      // Note, even if a rull refresh is triggered, always do the path\n      // notification because unless mutableData is used for dom-repeat\n      // and all elements in the instance subtree, a full refresh may\n      // not trigger the proper update.\n      let instIdx = this.__itemsIdxToInstIdx[itemsIdx];\n      let inst = this.__instances[instIdx];\n      if (inst) {\n        let itemPath = this.as + (itemSubPath ? '.' + itemSubPath : '');\n        // This is effectively `notifyPath`, but avoids some of the overhead\n        // of the public API\n        inst._setPendingPropertyOrPath(itemPath, value, false, true);\n        inst._flushProperties();\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Returns the item associated with a given element stamped by\n   * this `dom-repeat`.\n   *\n   * Note, to modify sub-properties of the item,\n   * `modelForElement(el).set('item.<sub-prop>', value)`\n   * should be used.\n   *\n   * @param {!HTMLElement} el Element for which to return the item.\n   * @return {*} Item associated with the element.\n   */\n  itemForElement(el) {\n    let instance = this.modelForElement(el);\n    return instance && instance[this.as];\n  }\n\n  /**\n   * Returns the inst index for a given element stamped by this `dom-repeat`.\n   * If `sort` is provided, the index will reflect the sorted order (rather\n   * than the original array order).\n   *\n   * @param {!HTMLElement} el Element for which to return the index.\n   * @return {?number} Row index associated with the element (note this may\n   *   not correspond to the array index if a user `sort` is applied).\n   */\n  indexForElement(el) {\n    let instance = this.modelForElement(el);\n    return instance && instance[this.indexAs];\n  }\n\n  /**\n   * Returns the template \"model\" associated with a given element, which\n   * serves as the binding scope for the template instance the element is\n   * contained in. A template model\n   * should be used to manipulate data associated with this template instance.\n   *\n   * Example:\n   *\n   *   let model = modelForElement(el);\n   *   if (model.index < 10) {\n   *     model.set('item.checked', true);\n   *   }\n   *\n   * @param {!HTMLElement} el Element for which to return a template model.\n   * @return {TemplateInstanceBase} Model representing the binding scope for\n   *   the element.\n   */\n  modelForElement(el) {\n    return modelForElement(this.template, el);\n  }\n\n}\n\ncustomElements.define(DomRepeat.is, DomRepeat);\n"],
  "mappings": "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",
  "names": []
}
