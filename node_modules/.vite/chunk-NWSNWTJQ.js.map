{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/field-base@22.0.2/node_modules/@vaadin/field-base/src/delegate-focus-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\nimport { DisabledMixin } from '@vaadin/component-base/src/disabled-mixin.js';\nimport { FocusMixin } from '@vaadin/component-base/src/focus-mixin.js';\n\n/**\n * A mixin to forward focus to an element in the light DOM.\n *\n * @polymerMixin\n * @mixes DisabledMixin\n * @mixes FocusMixin\n */\nexport const DelegateFocusMixin = dedupingMixin(\n  (superclass) =>\n    class DelegateFocusMixinClass extends FocusMixin(DisabledMixin(superclass)) {\n      static get properties() {\n        return {\n          /**\n           * Specify that this control should have input focus when the page loads.\n           */\n          autofocus: {\n            type: Boolean\n          },\n\n          /**\n           * A reference to the focusable element controlled by the mixin.\n           * It can be an input, textarea, button or any element with tabindex > -1.\n           *\n           * Any component implementing this mixin is expected to provide it\n           * by using `this._setFocusElement(input)` Polymer API.\n           *\n           * @protected\n           * @type {!HTMLElement}\n           */\n          focusElement: {\n            type: Object,\n            readOnly: true,\n            observer: '_focusElementChanged'\n          }\n        };\n      }\n\n      constructor() {\n        super();\n\n        this._boundOnBlur = this._onBlur.bind(this);\n        this._boundOnFocus = this._onFocus.bind(this);\n      }\n\n      /** @protected */\n      ready() {\n        super.ready();\n\n        if (this.autofocus && !this.disabled) {\n          requestAnimationFrame(() => {\n            this.focus();\n            this.setAttribute('focus-ring', '');\n          });\n        }\n      }\n\n      /**\n       * @protected\n       * @override\n       */\n      focus() {\n        if (!this.focusElement || this.disabled) {\n          return;\n        }\n\n        this.focusElement.focus();\n        this._setFocused(true);\n      }\n\n      /**\n       * @protected\n       * @override\n       */\n      blur() {\n        if (!this.focusElement) {\n          return;\n        }\n        this.focusElement.blur();\n        this._setFocused(false);\n      }\n\n      /**\n       * @protected\n       * @override\n       */\n      click() {\n        if (this.focusElement && !this.disabled) {\n          this.focusElement.click();\n        }\n      }\n\n      /** @protected */\n      _focusElementChanged(element, oldElement) {\n        if (element) {\n          element.disabled = this.disabled;\n          this._addFocusListeners(element);\n        } else if (oldElement) {\n          this._removeFocusListeners(oldElement);\n        }\n      }\n\n      /**\n       * @param {HTMLElement} element\n       * @protected\n       */\n      _addFocusListeners(element) {\n        element.addEventListener('blur', this._boundOnBlur);\n        element.addEventListener('focus', this._boundOnFocus);\n      }\n\n      /**\n       * @param {HTMLElement} element\n       * @protected\n       */\n      _removeFocusListeners(element) {\n        element.removeEventListener('blur', this._boundOnBlur);\n        element.removeEventListener('focus', this._boundOnFocus);\n      }\n\n      /**\n       * Focus event does not bubble, so we dispatch it manually\n       * on the host element to support adding focus listeners\n       * when the focusable element is placed in light DOM.\n       * @param {FocusEvent} event\n       * @protected\n       */\n      _onFocus(event) {\n        event.stopPropagation();\n        this.dispatchEvent(new Event('focus'));\n      }\n\n      /**\n       * Blur event does not bubble, so we dispatch it manually\n       * on the host element to support adding blur listeners\n       * when the focusable element is placed in light DOM.\n       * @param {FocusEvent} event\n       * @protected\n       */\n      _onBlur(event) {\n        event.stopPropagation();\n        this.dispatchEvent(new Event('blur'));\n      }\n\n      /**\n       * @param {Event} event\n       * @return {boolean}\n       * @protected\n       * @override\n       */\n      _shouldSetFocus(event) {\n        return event.target === this.focusElement;\n      }\n\n      /**\n       * @param {boolean} disabled\n       * @protected\n       */\n      _disabledChanged(disabled) {\n        super._disabledChanged(disabled);\n\n        if (this.focusElement) {\n          this.focusElement.disabled = disabled;\n        }\n\n        if (disabled) {\n          this.blur();\n        }\n      }\n    }\n);\n"],
  "mappings": ";;;;;;;;;;;AAAA,AAgBO,IAAM,qBAAqB,cAChC,CAAC,eACC,sCAAsC,WAAW,cAAc,aAAa;AAAA,aAC/D,aAAa;AACtB,WAAO;AAAA,MAIL,WAAW;AAAA,QACT,MAAM;AAAA;AAAA,MAaR,cAAc;AAAA,QACZ,MAAM;AAAA,QACN,UAAU;AAAA,QACV,UAAU;AAAA;AAAA;AAAA;AAAA,EAKhB,cAAc;AACZ;AAEA,SAAK,eAAe,KAAK,QAAQ,KAAK;AACtC,SAAK,gBAAgB,KAAK,SAAS,KAAK;AAAA;AAAA,EAI1C,QAAQ;AACN,UAAM;AAEN,QAAI,KAAK,aAAa,CAAC,KAAK,UAAU;AACpC,4BAAsB,MAAM;AAC1B,aAAK;AACL,aAAK,aAAa,cAAc;AAAA;AAAA;AAAA;AAAA,EAStC,QAAQ;AACN,QAAI,CAAC,KAAK,gBAAgB,KAAK,UAAU;AACvC;AAAA;AAGF,SAAK,aAAa;AAClB,SAAK,YAAY;AAAA;AAAA,EAOnB,OAAO;AACL,QAAI,CAAC,KAAK,cAAc;AACtB;AAAA;AAEF,SAAK,aAAa;AAClB,SAAK,YAAY;AAAA;AAAA,EAOnB,QAAQ;AACN,QAAI,KAAK,gBAAgB,CAAC,KAAK,UAAU;AACvC,WAAK,aAAa;AAAA;AAAA;AAAA,EAKtB,qBAAqB,SAAS,YAAY;AACxC,QAAI,SAAS;AACX,cAAQ,WAAW,KAAK;AACxB,WAAK,mBAAmB;AAAA,eACf,YAAY;AACrB,WAAK,sBAAsB;AAAA;AAAA;AAAA,EAQ/B,mBAAmB,SAAS;AAC1B,YAAQ,iBAAiB,QAAQ,KAAK;AACtC,YAAQ,iBAAiB,SAAS,KAAK;AAAA;AAAA,EAOzC,sBAAsB,SAAS;AAC7B,YAAQ,oBAAoB,QAAQ,KAAK;AACzC,YAAQ,oBAAoB,SAAS,KAAK;AAAA;AAAA,EAU5C,SAAS,OAAO;AACd,UAAM;AACN,SAAK,cAAc,IAAI,MAAM;AAAA;AAAA,EAU/B,QAAQ,OAAO;AACb,UAAM;AACN,SAAK,cAAc,IAAI,MAAM;AAAA;AAAA,EAS/B,gBAAgB,OAAO;AACrB,WAAO,MAAM,WAAW,KAAK;AAAA;AAAA,EAO/B,iBAAiB,UAAU;AACzB,UAAM,iBAAiB;AAEvB,QAAI,KAAK,cAAc;AACrB,WAAK,aAAa,WAAW;AAAA;AAG/B,QAAI,UAAU;AACZ,WAAK;AAAA;AAAA;AAAA;",
  "names": []
}
