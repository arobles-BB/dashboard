{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/message-list@22.0.2/node_modules/@vaadin/message-list/theme/lumo/vaadin-message-avatar-styles.js", "../.pnpm/@vaadin/message-list@22.0.2/node_modules/@vaadin/message-list/theme/lumo/vaadin-message-styles.js", "../.pnpm/@vaadin/message-list@22.0.2/node_modules/@vaadin/message-list/theme/lumo/vaadin-message-list-styles.js", "../.pnpm/@vaadin/message-list@22.0.2/node_modules/@vaadin/message-list/src/vaadin-message-avatar.js", "../.pnpm/@vaadin/message-list@22.0.2/node_modules/@vaadin/message-list/src/vaadin-message.js", "../.pnpm/@vaadin/message-list@22.0.2/node_modules/@vaadin/message-list/src/vaadin-message-list.js"],
  "sourcesContent": ["import '@vaadin/avatar/theme/lumo/vaadin-avatar-styles.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-message-avatar',\n  css`\n    :host {\n      margin-right: calc(var(--lumo-space-m) - var(--vaadin-avatar-outline-width));\n      margin-top: calc(var(--lumo-space-s) - var(--vaadin-avatar-outline-width));\n    }\n\n    :host([dir='rtl']) {\n      margin-left: calc(var(--lumo-space-m) - var(--vaadin-avatar-outline-width));\n      margin-right: calc(var(--vaadin-avatar-outline-width) * -1);\n    }\n  `,\n  { moduleId: 'lumo-message-avatar' }\n);\n", "import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport '@vaadin/vaadin-lumo-styles/typography.js';\nimport './vaadin-message-avatar-styles.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-message',\n  css`\n    :host {\n      color: var(--lumo-body-text-color);\n      font-family: var(--lumo-font-family);\n      font-size: var(--lumo-font-size-m);\n      line-height: var(--lumo-line-height-m);\n      padding: var(--lumo-space-s) var(--lumo-space-m);\n      -moz-osx-font-smoothing: grayscale;\n      -webkit-font-smoothing: antialiased;\n      -webkit-text-size-adjust: 100%;\n    }\n\n    :host([focus-ring]) {\n      box-shadow: inset 0 0 0 2px var(--lumo-primary-color-50pct);\n    }\n\n    [part='header'] {\n      min-height: calc(var(--lumo-font-size-m) * var(--lumo-line-height-m));\n    }\n\n    [part='name'] {\n      margin-right: var(--lumo-space-s);\n    }\n\n    [part='name']:empty {\n      margin-right: 0;\n    }\n\n    :host([dir='rtl']) [part='name'] {\n      margin-left: var(--lumo-space-s);\n      margin-right: 0;\n    }\n\n    :host([dir='rtl']) [part='name']:empty {\n      margin-left: 0;\n    }\n\n    [part='time'] {\n      color: var(--lumo-secondary-text-color);\n      font-size: var(--lumo-font-size-s);\n    }\n  `,\n  { moduleId: 'lumo-message' }\n);\n", "import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport './vaadin-message-styles.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles('vaadin-message-list', css``, { moduleId: 'lumo-message-list' });\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { Avatar } from '@vaadin/avatar/src/vaadin-avatar.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-message-avatar',\n  css`\n    :host {\n      --vaadin-avatar-outline-width: 0px; /* stylelint-disable-line length-zero-no-unit */\n      flex-shrink: 0;\n    }\n  `,\n  { moduleId: 'vaadin-message-avatar-styles' }\n);\n\n/**\n * An element used internally by `<vaadin-message>`. Not intended to be used separately.\n *\n * @extends Avatar\n * @private\n */\nclass MessageAvatar extends Avatar {\n  static get is() {\n    return 'vaadin-message-avatar';\n  }\n}\n\ncustomElements.define(MessageAvatar.is, MessageAvatar);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './vaadin-message-avatar.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { FocusMixin } from '@vaadin/component-base/src/focus-mixin.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\n/**\n * `<vaadin-message>` is a Web Component for showing a single message with an author, message and time.\n *\n * ```html\n * <vaadin-message time=\"2021-01-28 10:43\"\n *     user-name = \"Bob Ross\"\n *     user-abbr = \"BR\"\n *     user-img = \"/static/img/avatar.jpg\">There is no real ending. It's just the place where you stop the story.</vaadin-message>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ----------|----------------\n * `avatar`  | The author's avatar\n * `name`    | Author's name\n * `time`    | When the message was posted\n * `content` | The message itself as a slotted content\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description\n * -------------|-------------\n * `focus-ring` | Set when the message is focused using the keyboard.\n * `focused`    | Set when the message is focused.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * ### Internal components\n *\n * In addition to `<vaadin-message>` itself, the following internal\n * components are themable:\n *\n * - `<vaadin-message-avatar>` - has the same API as [`<vaadin-avatar>`](#/elements/vaadin-avatar).\n *\n * @extends HTMLElement\n * @mixes FocusMixin\n * @mixes ThemableMixin\n * @mixes ElementMixin\n */\nclass Message extends FocusMixin(ElementMixin(ThemableMixin(PolymerElement))) {\n  static get properties() {\n    return {\n      /**\n       * Time of sending the message. It is rendered as-is to the part='time' slot,\n       * so the formatting is up to you.\n       */\n      time: {\n        type: String\n      },\n\n      /**\n       * The name of the user posting the message.\n       * It will be placed in the name part to indicate who has sent the message.\n       * It is also used as a tooltip for the avatar.\n       * Example: `message.userName = \"Jessica Jacobs\";`\n       */\n      userName: {\n        type: String\n      },\n\n      /**\n       * The abbreviation of the user.\n       * The abbreviation will be passed on to avatar of the message.\n       * If the user does not have an avatar picture set with `userImg`, `userAbbr` will be shown in the avatar.\n       * Example: `message.userAbbr = \"JJ\";`\n       */\n      userAbbr: {\n        type: String\n      },\n\n      /**\n       * An URL for a user image.\n       * The image will be used in the avatar component to show who has sent the message.\n       * Example: `message.userImg = \"/static/img/avatar.jpg\";`\n       */\n      userImg: {\n        type: String\n      },\n\n      /**\n       * A color index to be used to render the color of the avatar.\n       * With no `userColorIndex` set, the basic avatar color will be used.\n       * By setting a userColorIndex, the component will check if there exists a CSS variable defining the color, and uses it if there is one.\n       * If now CSS variable is found for the color index, the property for the color will not be set.\n       *\n       * Example:\n       * CSS:\n       * ```css\n       * html {\n       *   --vaadin-user-color-1: red;\n       * }\n       * ```\n       *\n       * JavaScript:\n       * ```js\n       * message.userColorIndex = 1;\n       * ```\n       */\n      userColorIndex: {\n        type: Number\n      }\n    };\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: flex;\n          flex-direction: row;\n          outline: none;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        [part='content'] {\n          display: flex;\n          flex-direction: column;\n          flex-grow: 1;\n        }\n\n        [part='header'] {\n          align-items: baseline;\n          display: flex;\n          flex-direction: row;\n          flex-wrap: wrap;\n        }\n\n        [part='name'] {\n          font-weight: 500;\n        }\n\n        [part='message'] {\n          white-space: pre-wrap;\n        }\n      </style>\n      <vaadin-message-avatar\n        part=\"avatar\"\n        name=\"[[userName]]\"\n        abbr=\"[[userAbbr]]\"\n        img=\"[[userImg]]\"\n        color-index=\"[[userColorIndex]]\"\n        tabindex=\"-1\"\n        aria-hidden=\"true\"\n      ></vaadin-message-avatar>\n      <div part=\"content\">\n        <div part=\"header\">\n          <span part=\"name\">[[userName]]</span>\n          <span part=\"time\">[[time]]</span>\n        </div>\n        <div part=\"message\"><slot></slot></div>\n      </div>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-message';\n  }\n}\n\ncustomElements.define(Message.is, Message);\n\nexport { Message };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@polymer/polymer/lib/elements/dom-repeat.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { microTask } from '@vaadin/component-base/src/async.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { Message } from './vaadin-message.js';\n\n/**\n * `<vaadin-message-list>` is a Web Component for showing an ordered list of messages. The messages are rendered as <vaadin-message>\n *\n * ### Example\n * To create a new message list, add the component to the page:\n * ```html\n * <vaadin-message-list></vaadin-message-list>\n * ```\n *\n * Provide the messages to the message list with the `items` property.\n * ```js\n * document.querySelector('vaadin-message-list').items = [\n *   { text: 'Hello list', time: 'yesterday', userName: 'Matt Mambo', userAbbr: 'MM', userColorIndex: 1 },\n *   { text: 'Another message', time: 'right now', userName: 'Linsey Listy', userAbbr: 'LL', userColorIndex: 2, userImg: '/static/img/avatar.jpg' }\n * ];\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ----------|----------------\n * `list`    | The container wrapping messages.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * @extends HTMLElement\n * @mixes ThemableMixin\n * @mixes ElementMixin\n */\nclass MessageList extends ElementMixin(ThemableMixin(PolymerElement)) {\n  static get is() {\n    return 'vaadin-message-list';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * An array of objects which will be rendered as messages.\n       * The message objects can have the following properties:\n       * ```js\n       * Array<{\n       *   text: string,\n       *   time: string,\n       *   userName: string,\n       *   userAbbr: string,\n       *   userImg: string,\n       *   userColorIndex: number,\n       *   theme: string\n       * }>\n       * ```\n       */\n      items: {\n        type: Array,\n        value: function () {\n          return [];\n        },\n        observer: '_itemsChanged'\n      }\n    };\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          overflow: auto;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n      <div part=\"list\" role=\"list\">\n        <template is=\"dom-repeat\" items=\"[[items]]\">\n          <vaadin-message\n            time=\"[[item.time]]\"\n            user-name=\"[[item.userName]]\"\n            user-abbr=\"[[item.userAbbr]]\"\n            user-img=\"[[item.userImg]]\"\n            user-color-index=\"[[item.userColorIndex]]\"\n            theme$=\"[[item.theme]]\"\n            role=\"listitem\"\n            on-focusin=\"_handleFocusEvent\"\n            >[[item.text]]</vaadin-message\n          >\n        </template>\n      </div>\n    `;\n  }\n\n  ready() {\n    super.ready();\n\n    // Make screen readers announce new messages\n    this.setAttribute('aria-relevant', 'additions');\n    this.setAttribute('role', 'log');\n\n    // Keyboard navi\n    this.addEventListener('keydown', (e) => this._onKeydown(e));\n  }\n\n  /** @protected */\n  get _messages() {\n    return Array.from(this.shadowRoot.querySelectorAll('vaadin-message'));\n  }\n\n  _itemsChanged(newVal, oldVal) {\n    const focusedIndex = this._getIndexOfFocusableElement();\n    if (newVal && newVal.length) {\n      const moreItems = !oldVal || newVal.length > oldVal.length;\n      const closeToBottom = this.scrollHeight < this.clientHeight + this.scrollTop + 50;\n      microTask.run(() => {\n        this._setTabIndexesByIndex(focusedIndex);\n        if (moreItems && closeToBottom) {\n          this._scrollToLastMessage();\n        }\n      });\n    }\n  }\n\n  _scrollToLastMessage() {\n    if (this.items.length > 0) {\n      this.scrollTop = this.scrollHeight - this.clientHeight;\n    }\n  }\n\n  /**\n   * @param {!KeyboardEvent} event\n   * @protected\n   */\n  _onKeydown(event) {\n    if (event.metaKey || event.ctrlKey) {\n      return;\n    }\n\n    // get index of the item that was focused when event happened\n    const target = event.composedPath()[0];\n    let currentIndex = this._messages.indexOf(target);\n\n    switch (event.key) {\n      case 'ArrowUp':\n        currentIndex--;\n        break;\n      case 'ArrowDown':\n        currentIndex++;\n        break;\n      case 'Home':\n        currentIndex = 0;\n        break;\n      case 'End':\n        currentIndex = this._messages.length - 1;\n        break;\n      default:\n        return; // nothing to do\n    }\n    if (currentIndex < 0) {\n      currentIndex = this._messages.length - 1;\n    }\n    if (currentIndex > this._messages.length - 1) {\n      currentIndex = 0;\n    }\n    this._focus(currentIndex);\n    event.preventDefault();\n  }\n\n  /**\n   * @param {number} idx\n   * @protected\n   */\n  _focus(idx) {\n    const target = this._messages[idx];\n    target.focus();\n  }\n\n  _handleFocusEvent(e) {\n    const target = e.composedPath().find((node) => node instanceof Message);\n    this._setTabIndexesByMessage(target);\n  }\n\n  /**\n   * @param {number} idx\n   * @protected\n   */\n  _setTabIndexesByIndex(index) {\n    const message = this._messages[index] || this._messages[0];\n    this._setTabIndexesByMessage(message);\n  }\n\n  _setTabIndexesByMessage(message) {\n    this._messages.forEach((e) => (e.tabIndex = e === message ? 0 : -1));\n  }\n\n  _getIndexOfFocusableElement() {\n    const index = this._messages.findIndex((e) => e.tabIndex == 0);\n    return index != -1 ? index : 0;\n  }\n}\n\ncustomElements.define(MessageList.is, MessageList);\n\nexport { MessageList };\n"],
  "mappings": "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",
  "names": []
}
