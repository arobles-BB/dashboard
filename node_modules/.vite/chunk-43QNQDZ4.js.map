{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/field-base@22.0.2/node_modules/@vaadin/field-base/src/pattern-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { timeOut } from '@vaadin/component-base/src/async.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\nimport { InputConstraintsMixin } from './input-constraints-mixin.js';\n\n/**\n * A mixin to provide `pattern` and `preventInvalidInput` properties.\n *\n * @polymerMixin\n * @mixes InputConstraintsMixin\n */\nexport const PatternMixin = (superclass) =>\n  class PatternMixinClass extends InputConstraintsMixin(superclass) {\n    static get properties() {\n      return {\n        /**\n         * A regular expression that the value is checked against.\n         * The pattern must match the entire value, not just some subset.\n         */\n        pattern: {\n          type: String\n        },\n\n        /**\n         * When set to true, user is prevented from typing a value that\n         * conflicts with the given `pattern`.\n         * @attr {boolean} prevent-invalid-input\n         */\n        preventInvalidInput: {\n          type: Boolean\n        }\n      };\n    }\n\n    static get delegateAttrs() {\n      return [...super.delegateAttrs, 'pattern'];\n    }\n\n    static get constraints() {\n      return [...super.constraints, 'pattern'];\n    }\n\n    /** @private */\n    _checkInputValue() {\n      if (this.preventInvalidInput) {\n        const input = this.inputElement;\n        if (input && input.value.length > 0 && !this.checkValidity()) {\n          input.value = this.value || '';\n          // add input-prevented attribute for 200ms\n          this.setAttribute('input-prevented', '');\n          this._inputDebouncer = Debouncer.debounce(this._inputDebouncer, timeOut.after(200), () => {\n            this.removeAttribute('input-prevented');\n          });\n          return;\n        }\n      }\n    }\n\n    /**\n     * @param {Event} event\n     * @protected\n     */\n    _onInput(event) {\n      this._checkInputValue();\n\n      super._onInput(event);\n    }\n  };\n"],
  "mappings": ";;;;;;;;;AAAA,AAeO,IAAM,eAAe,CAAC,eAC3B,gCAAgC,sBAAsB,YAAY;AAAA,aACrD,aAAa;AACtB,WAAO;AAAA,MAKL,SAAS;AAAA,QACP,MAAM;AAAA;AAAA,MAQR,qBAAqB;AAAA,QACnB,MAAM;AAAA;AAAA;AAAA;AAAA,aAKD,gBAAgB;AACzB,WAAO,CAAC,GAAG,MAAM,eAAe;AAAA;AAAA,aAGvB,cAAc;AACvB,WAAO,CAAC,GAAG,MAAM,aAAa;AAAA;AAAA,EAIhC,mBAAmB;AACjB,QAAI,KAAK,qBAAqB;AAC5B,YAAM,QAAQ,KAAK;AACnB,UAAI,SAAS,MAAM,MAAM,SAAS,KAAK,CAAC,KAAK,iBAAiB;AAC5D,cAAM,QAAQ,KAAK,SAAS;AAE5B,aAAK,aAAa,mBAAmB;AACrC,aAAK,kBAAkB,UAAU,SAAS,KAAK,iBAAiB,QAAQ,MAAM,MAAM,MAAM;AACxF,eAAK,gBAAgB;AAAA;AAEvB;AAAA;AAAA;AAAA;AAAA,EASN,SAAS,OAAO;AACd,SAAK;AAEL,UAAM,SAAS;AAAA;AAAA;",
  "names": []
}
