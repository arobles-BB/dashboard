{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/password-field@22.0.2/node_modules/@vaadin/password-field/theme/lumo/vaadin-password-field-styles.js", "../.pnpm/@vaadin/password-field@22.0.2/node_modules/@vaadin/password-field/src/vaadin-password-field.js", "../.pnpm/@vaadin/password-field@22.0.2/node_modules/@vaadin/password-field/theme/lumo/vaadin-password-field.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/vaadin-lumo-styles/font-icons.js';\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst passwordField = css`\n  [part='reveal-button']::before {\n    content: var(--lumo-icons-eye);\n  }\n\n  :host([password-visible]) [part='reveal-button']::before {\n    content: var(--lumo-icons-eye-disabled);\n  }\n\n  /* Make it easy to hide the button across the whole app */\n  [part='reveal-button'] {\n    position: relative;\n    display: var(--lumo-password-field-reveal-button-display, block);\n  }\n\n  [part='reveal-button'][hidden] {\n    display: none !important;\n  }\n\n  ::slotted([slot='reveal']) {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    width: 100%;\n    background: transparent;\n    border: none;\n  }\n\n  ::slotted([slot='reveal']:focus) {\n    border-radius: var(--lumo-border-radius-s);\n    box-shadow: 0 0 0 2px var(--lumo-primary-color-50pct);\n    outline: none;\n  }\n`;\n\nregisterStyles('vaadin-password-field', [inputFieldShared, passwordField], { moduleId: 'lumo-password-field' });\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { SlotStylesMixin } from '@vaadin/field-base/src/slot-styles-mixin.js';\nimport { TextField } from '@vaadin/text-field/src/vaadin-text-field.js';\n\nconst ownTemplate = html`\n  <div part=\"reveal-button\" slot=\"suffix\">\n    <slot name=\"reveal\"></slot>\n  </div>\n`;\n\nlet memoizedTemplate;\n\n/**\n * `<vaadin-password-field>` is an extension of `<vaadin-text-field>` component for entering passwords.\n *\n * ```html\n * <vaadin-password-field label=\"Password\"></vaadin-password-field>\n * ```\n *\n * ### Styling\n *\n * `<vaadin-password-field>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n *\n * Part name       | Description\n * ----------------|----------------------------------------------------\n * `reveal-button` | The eye icon which toggles the password visibility\n *\n * In addition to `<vaadin-text-field>` state attributes, the following state attributes are available for theming:\n *\n * Attribute          | Description\n * -------------------|---------------------------------\n * `password-visible` | Set when the password is visible\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n *\n * @extends TextField\n * @mixes SlotStylesMixin\n */\nexport class PasswordField extends SlotStylesMixin(TextField) {\n  static get is() {\n    return 'vaadin-password-field';\n  }\n\n  static get template() {\n    if (!memoizedTemplate) {\n      // Clone the superclass template\n      memoizedTemplate = super.template.cloneNode(true);\n\n      // Retrieve this element's dom-module template\n      const revealButton = ownTemplate.content.querySelector('[part=\"reveal-button\"]');\n\n      // Append reveal-button and styles to the text-field template\n      const inputField = memoizedTemplate.content.querySelector('[part=\"input-field\"]');\n      inputField.appendChild(revealButton);\n    }\n\n    return memoizedTemplate;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Set to true to hide the eye icon which toggles the password visibility.\n       * @attr {boolean} reveal-button-hidden\n       */\n      revealButtonHidden: {\n        type: Boolean,\n        observer: '_revealButtonHiddenChanged',\n        value: false\n      },\n\n      /**\n       * True if the password is visible ([type=text]).\n       * @attr {boolean} password-visible\n       */\n      passwordVisible: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        observer: '_passwordVisibleChanged',\n        readOnly: true\n      },\n\n      /**\n       * An object with translated strings used for localization.\n       * It has the following structure and default values:\n       *\n       * ```\n       * {\n       *   // Translation of the reveal icon button accessible label\n       *   reveal: 'Show password'\n       * }\n       * ```\n       */\n      i18n: {\n        type: Object,\n        value: () => {\n          return {\n            reveal: 'Show password'\n          };\n        }\n      }\n    };\n  }\n\n  static get observers() {\n    return ['__i18nChanged(i18n.*)'];\n  }\n\n  /** @protected */\n  get slots() {\n    return {\n      ...super.slots,\n      reveal: () => {\n        const btn = document.createElement('button');\n        btn.setAttribute('type', 'button');\n        btn.disabled = this.disabled;\n        return btn;\n      }\n    };\n  }\n\n  /** @protected */\n  get slotStyles() {\n    const tag = this.localName;\n    return [\n      `\n        ${tag} [slot=\"input\"]::-ms-reveal {\n          display: none;\n        }\n      `\n    ];\n  }\n\n  /** @protected */\n  get _revealNode() {\n    return this._getDirectSlotChild('reveal');\n  }\n\n  constructor() {\n    super();\n    this._setType('password');\n    this.__boundRevealButtonClick = this._onRevealButtonClick.bind(this);\n    this.__boundRevealButtonTouchend = this._onRevealButtonTouchend.bind(this);\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this._revealPart = this.shadowRoot.querySelector('[part=\"reveal-button\"]');\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n\n    if (this._revealNode) {\n      this.__updateAriaLabel(this.i18n);\n      this._revealNode.setAttribute('aria-label', 'Show password');\n      this._revealNode.addEventListener('click', this.__boundRevealButtonClick);\n      this._revealNode.addEventListener('touchend', this.__boundRevealButtonTouchend);\n    }\n\n    if (this.inputElement) {\n      this.inputElement.autocapitalize = 'off';\n    }\n\n    this._toggleRevealHidden(this.revealButtonHidden);\n    this._updateToggleState(false);\n  }\n\n  /** @protected */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    if (this._revealNode) {\n      this._revealNode.removeEventListener('click', this.__boundRevealButtonClick);\n      this._revealNode.removeEventListener('touchend', this.__boundRevealButtonTouchend);\n    }\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to mark field as focused\n   * when focus moves to the reveal button using Shift Tab.\n   * @param {Event} event\n   * @return {boolean}\n   * @protected\n   */\n  _shouldSetFocus(event) {\n    return event.target === this.inputElement || event.target === this._revealNode;\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to not hide password\n   * when focus moves to the reveal button or back to the input.\n   * @param {Event} event\n   * @return {boolean}\n   * @protected\n   */\n  _shouldRemoveFocus(event) {\n    return !(\n      event.relatedTarget === this._revealNode ||\n      (event.relatedTarget === this.inputElement && event.target === this._revealNode)\n    );\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to toggle password visibility.\n   * @param {boolean} focused\n   * @protected\n   * @override\n   */\n  _setFocused(focused) {\n    super._setFocused(focused);\n\n    if (!focused) {\n      this._setPasswordVisible(false);\n    } else {\n      const isButtonFocused = this.getRootNode().activeElement === this._revealNode;\n      // Remove focus-ring from the field when the reveal button gets focused\n      this.toggleAttribute('focus-ring', this._keyboardActive && !isButtonFocused);\n    }\n  }\n\n  /** @private */\n  __updateAriaLabel(i18n) {\n    if (i18n.reveal && this._revealNode) {\n      this._revealNode.setAttribute('aria-label', i18n.reveal);\n    }\n  }\n\n  /** @private */\n  __i18nChanged(i18n) {\n    this.__updateAriaLabel(i18n.base);\n  }\n\n  /** @private */\n  _revealButtonHiddenChanged(hidden) {\n    this._toggleRevealHidden(hidden);\n  }\n\n  /** @private */\n  _togglePasswordVisibility() {\n    this._setPasswordVisible(!this.passwordVisible);\n  }\n\n  /** @private */\n  _onRevealButtonClick() {\n    this._togglePasswordVisibility();\n  }\n\n  /** @private */\n  _onRevealButtonTouchend(e) {\n    // Cancel the following click event\n    e.preventDefault();\n    this._togglePasswordVisibility();\n    // Focus the input to avoid problem with password still visible\n    // when user clicks the reveal button and then clicks outside.\n    this.inputElement.focus();\n  }\n\n  /** @private */\n  _toggleRevealHidden(hidden) {\n    if (this._revealNode) {\n      if (hidden) {\n        this._revealPart.setAttribute('hidden', '');\n        this._revealNode.setAttribute('tabindex', '-1');\n        this._revealNode.setAttribute('aria-hidden', 'true');\n      } else {\n        this._revealPart.removeAttribute('hidden');\n        this._revealNode.setAttribute('tabindex', '0');\n        this._revealNode.removeAttribute('aria-hidden');\n      }\n    }\n  }\n\n  /** @private */\n  _updateToggleState(passwordVisible) {\n    if (this._revealNode) {\n      this._revealNode.setAttribute('aria-pressed', passwordVisible ? 'true' : 'false');\n    }\n  }\n\n  /** @private */\n  _passwordVisibleChanged(passwordVisible) {\n    this._setType(passwordVisible ? 'text' : 'password');\n\n    this._updateToggleState(passwordVisible);\n  }\n\n  /**\n   * Override method inherited from `DisabledMixin` to synchronize the reveal button\n   * disabled state with the password field disabled state.\n   * @param {boolean} disabled\n   * @protected\n   */\n  _disabledChanged(disabled) {\n    super._disabledChanged(disabled);\n\n    if (this._revealNode) {\n      this._revealNode.disabled = disabled;\n    }\n  }\n}\n\ncustomElements.define(PasswordField.is, PasswordField);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/text-field/theme/lumo/vaadin-text-field.js';\nimport './vaadin-password-field-styles.js';\nimport '../../src/vaadin-password-field.js';\n"],
  "mappings": "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",
  "names": []
}
