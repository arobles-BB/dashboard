import {
  DisabledMixin
} from "./chunk-O5ESTK6D.js";
import {
  FocusMixin
} from "./chunk-6AKUT5DS.js";
import {
  dedupingMixin
} from "./chunk-GN24F3WZ.js";

// node_modules/.pnpm/@vaadin/field-base@22.0.2/node_modules/@vaadin/field-base/src/delegate-focus-mixin.js
var DelegateFocusMixin = dedupingMixin((superclass) => class DelegateFocusMixinClass extends FocusMixin(DisabledMixin(superclass)) {
  static get properties() {
    return {
      autofocus: {
        type: Boolean
      },
      focusElement: {
        type: Object,
        readOnly: true,
        observer: "_focusElementChanged"
      }
    };
  }
  constructor() {
    super();
    this._boundOnBlur = this._onBlur.bind(this);
    this._boundOnFocus = this._onFocus.bind(this);
  }
  ready() {
    super.ready();
    if (this.autofocus && !this.disabled) {
      requestAnimationFrame(() => {
        this.focus();
        this.setAttribute("focus-ring", "");
      });
    }
  }
  focus() {
    if (!this.focusElement || this.disabled) {
      return;
    }
    this.focusElement.focus();
    this._setFocused(true);
  }
  blur() {
    if (!this.focusElement) {
      return;
    }
    this.focusElement.blur();
    this._setFocused(false);
  }
  click() {
    if (this.focusElement && !this.disabled) {
      this.focusElement.click();
    }
  }
  _focusElementChanged(element, oldElement) {
    if (element) {
      element.disabled = this.disabled;
      this._addFocusListeners(element);
    } else if (oldElement) {
      this._removeFocusListeners(oldElement);
    }
  }
  _addFocusListeners(element) {
    element.addEventListener("blur", this._boundOnBlur);
    element.addEventListener("focus", this._boundOnFocus);
  }
  _removeFocusListeners(element) {
    element.removeEventListener("blur", this._boundOnBlur);
    element.removeEventListener("focus", this._boundOnFocus);
  }
  _onFocus(event) {
    event.stopPropagation();
    this.dispatchEvent(new Event("focus"));
  }
  _onBlur(event) {
    event.stopPropagation();
    this.dispatchEvent(new Event("blur"));
  }
  _shouldSetFocus(event) {
    return event.target === this.focusElement;
  }
  _disabledChanged(disabled) {
    super._disabledChanged(disabled);
    if (this.focusElement) {
      this.focusElement.disabled = disabled;
    }
    if (disabled) {
      this.blur();
    }
  }
});

export {
  DelegateFocusMixin
};
/**
 * @license
 * Copyright (c) 2021 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=chunk-NWSNWTJQ.js.map
