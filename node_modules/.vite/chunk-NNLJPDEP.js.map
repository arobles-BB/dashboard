{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/text-area@22.0.2/node_modules/@vaadin/text-area/theme/lumo/vaadin-text-area-styles.js", "../.pnpm/@vaadin/field-base@22.0.2/node_modules/@vaadin/field-base/src/text-area-controller.js", "../.pnpm/@vaadin/text-area@22.0.2/node_modules/@vaadin/text-area/src/vaadin-text-area.js", "../.pnpm/@vaadin/text-area@22.0.2/node_modules/@vaadin/text-area/theme/lumo/vaadin-text-area.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport '@vaadin/vaadin-lumo-styles/typography.js';\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst textArea = css`\n  [part='input-field'],\n  [part='input-field'] ::slotted(textarea) {\n    height: auto;\n    box-sizing: border-box;\n  }\n\n  [part='input-field'] {\n    /* Equal to the implicit padding in vaadin-text-field */\n    padding-top: calc((var(--lumo-text-field-size) - 1em * var(--lumo-line-height-s)) / 2);\n    padding-bottom: calc((var(--lumo-text-field-size) - 1em * var(--lumo-line-height-s)) / 2);\n    transition: background-color 0.1s;\n    line-height: var(--lumo-line-height-s);\n  }\n\n  :host(:not([readonly])) [part='input-field']::after {\n    display: none;\n  }\n\n  :host([readonly]) [part='input-field'] {\n    border: 1px dashed var(--lumo-contrast-30pct);\n  }\n\n  :host([readonly]) [part='input-field']::after {\n    border: none;\n  }\n\n  :host(:hover:not([readonly]):not([focused]):not([invalid])) [part='input-field'] {\n    background-color: var(--lumo-contrast-20pct);\n  }\n\n  @media (pointer: coarse) {\n    :host(:hover:not([readonly]):not([focused]):not([invalid])) [part='input-field'] {\n      background-color: var(--lumo-contrast-10pct);\n    }\n\n    :host(:active:not([readonly]):not([focused])) [part='input-field'] {\n      background-color: var(--lumo-contrast-20pct);\n    }\n  }\n\n  [part='input-field'] ::slotted(textarea) {\n    white-space: pre-wrap; /* override \"nowrap\" from <vaadin-text-field> */\n    align-self: stretch; /* override \"baseline\" from <vaadin-text-field> */\n    line-height: inherit;\n    --_lumo-text-field-overflow-mask-image: none;\n  }\n\n  /* Vertically align icon prefix/suffix with the first line of text */\n  [part='input-field'] ::slotted(iron-icon),\n  [part='input-field'] ::slotted(vaadin-icon) {\n    margin-top: calc((var(--lumo-icon-size-m) - 1em * var(--lumo-line-height-s)) / -2);\n  }\n`;\n\nregisterStyles('vaadin-text-area', [inputFieldShared, textArea], {\n  moduleId: 'lumo-text-area'\n});\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotController } from '@vaadin/component-base/src/slot-controller.js';\n\n/**\n * A controller to create and initialize slotted `<textarea>` element.\n */\nexport class TextAreaController extends SlotController {\n  constructor(host, callback) {\n    super(\n      host,\n      'textarea',\n      () => document.createElement('textarea'),\n      (host, node) => {\n        const value = host.getAttribute('value');\n        if (value) {\n          node.value = value;\n        }\n\n        const name = host.getAttribute('name');\n        if (name) {\n          node.setAttribute('name', name);\n        }\n\n        // Ensure every instance has unique ID\n        const uniqueId = (TextAreaController._uniqueTextAreaId = 1 + TextAreaController._uniqueTextAreaId || 0);\n        host._textareaId = `${host.localName}-${uniqueId}`;\n        node.id = host._textareaId;\n\n        if (typeof callback == 'function') {\n          callback(node);\n        }\n      }\n    );\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/input-container/src/vaadin-input-container.js';\nimport { html, PolymerElement } from '@polymer/polymer';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { InputFieldMixin } from '@vaadin/field-base/src/input-field-mixin.js';\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\nimport { TextAreaController } from '@vaadin/field-base/src/text-area-controller.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles('vaadin-text-area', inputFieldShared, { moduleId: 'vaadin-text-area-styles' });\n\n/**\n * `<vaadin-text-area>` is a web component for multi-line text input.\n *\n * ```html\n * <vaadin-text-area label=\"Comment\"></vaadin-text-area>\n * ```\n *\n * ### Prefixes and suffixes\n *\n * These are child elements of a `<vaadin-text-area>` that are displayed\n * inline with the input, before or after.\n * In order for an element to be considered as a prefix, it must have the slot\n * attribute set to `prefix` (and similarly for `suffix`).\n *\n * ```html\n * <vaadin-text-area label=\"Description\">\n *   <div slot=\"prefix\">Details:</div>\n *   <div slot=\"suffix\">The end!</div>\n * </vaadin-text-area>\n * ```\n *\n * ### Styling\n *\n * The following custom properties are available for styling:\n *\n * Custom property                | Description                | Default\n * -------------------------------|----------------------------|---------\n * `--vaadin-field-default-width` | Default width of the field | `12em`\n *\n * `<vaadin-text-area>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n *\n * @extends HTMLElement\n * @mixes InputFieldMixin\n * @mixes ElementMixin\n * @mixes ThemableMixin\n */\nexport class TextArea extends InputFieldMixin(ThemableMixin(ElementMixin(PolymerElement))) {\n  static get is() {\n    return 'vaadin-text-area';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          animation: 1ms vaadin-text-area-appear;\n        }\n\n        .vaadin-text-area-container {\n          flex: auto;\n        }\n\n        /* The label, helper text and the error message should neither grow nor shrink. */\n        [part='label'],\n        [part='helper-text'],\n        [part='error-message'] {\n          flex: none;\n        }\n\n        [part='input-field'] {\n          flex: auto;\n          overflow: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        ::slotted(textarea) {\n          -webkit-appearance: none;\n          -moz-appearance: none;\n          flex: auto;\n          overflow: hidden;\n          width: 100%;\n          height: 100%;\n          outline: none;\n          resize: none;\n          margin: 0;\n          padding: 0 0.25em;\n          border: 0;\n          border-radius: 0;\n          min-width: 0;\n          font: inherit;\n          font-size: 1em;\n          line-height: normal;\n          color: inherit;\n          background-color: transparent;\n          /* Disable default invalid style in Firefox */\n          box-shadow: none;\n        }\n\n        [part='input-field'] ::slotted(*) {\n          align-self: flex-start;\n        }\n\n        /* Workaround https://bugzilla.mozilla.org/show_bug.cgi?id=1739079 */\n        :host([disabled]) ::slotted(textarea) {\n          user-select: none;\n        }\n\n        @keyframes vaadin-text-area-appear {\n          to {\n            opacity: 1;\n          }\n        }\n      </style>\n\n      <div class=\"vaadin-text-area-container\">\n        <div part=\"label\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\"></span>\n        </div>\n\n        <vaadin-input-container\n          part=\"input-field\"\n          readonly=\"[[readonly]]\"\n          disabled=\"[[disabled]]\"\n          invalid=\"[[invalid]]\"\n          theme$=\"[[theme]]\"\n        >\n          <slot name=\"prefix\" slot=\"prefix\"></slot>\n          <slot name=\"textarea\"></slot>\n          <slot name=\"suffix\" slot=\"suffix\"></slot>\n          <div id=\"clearButton\" part=\"clear-button\" slot=\"suffix\"></div>\n        </vaadin-input-container>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Maximum number of characters (in Unicode code points) that the user can enter.\n       */\n      maxlength: {\n        type: Number\n      },\n\n      /**\n       * Minimum number of characters (in Unicode code points) that the user can enter.\n       */\n      minlength: {\n        type: Number\n      }\n    };\n  }\n\n  static get delegateAttrs() {\n    return [...super.delegateAttrs, 'maxlength', 'minlength'];\n  }\n\n  static get constraints() {\n    return [...super.constraints, 'maxlength', 'minlength'];\n  }\n\n  /**\n   * Used by `ClearButtonMixin` as a reference to the clear button element.\n   * @protected\n   */\n  get clearElement() {\n    return this.$.clearButton;\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n\n    this._inputField = this.shadowRoot.querySelector('[part=input-field]');\n    this._updateHeight();\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.addController(\n      new TextAreaController(this, (input) => {\n        this._setInputElement(input);\n        this._setFocusElement(input);\n        this.stateTarget = input;\n        this.ariaTarget = input;\n      })\n    );\n    this.addController(new LabelledInputController(this.inputElement, this._labelNode));\n    this.addEventListener('animationend', this._onAnimationEnd);\n  }\n\n  /** @private */\n  _onAnimationEnd(e) {\n    if (e.animationName.indexOf('vaadin-text-area-appear') === 0) {\n      this._updateHeight();\n    }\n  }\n\n  /**\n   * @param {unknown} newVal\n   * @param {unknown} oldVal\n   * @protected\n   * @override\n   */\n  _valueChanged(newVal, oldVal) {\n    super._valueChanged(newVal, oldVal);\n\n    this._updateHeight();\n  }\n\n  /** @private */\n  _updateHeight() {\n    const input = this.inputElement;\n    const inputField = this._inputField;\n\n    if (!input || !inputField) {\n      return;\n    }\n\n    const scrollTop = inputField.scrollTop;\n\n    // Only clear the height when the content shortens to minimize scrollbar flickering.\n    const valueLength = this.value ? this.value.length : 0;\n\n    if (this._oldValueLength >= valueLength) {\n      const inputFieldHeight = getComputedStyle(inputField).height;\n      const inputWidth = getComputedStyle(input).width;\n\n      // Temporarily fix the height of the wrapping input field container to prevent changing the browsers scroll\n      // position while resetting the textareas height. If the textarea had a large height, then removing its height\n      // will reset its height to the default of two rows. That might reduce the height of the page, and the\n      // browser might adjust the scroll position before we can restore the measured height of the textarea.\n      inputField.style.display = 'block';\n      inputField.style.height = inputFieldHeight;\n\n      // Fix the input element width so its scroll height isn't affected by host's disappearing scrollbars\n      input.style.maxWidth = inputWidth;\n\n      // Clear the height of the textarea to allow measuring a reduced scroll height\n      input.style.height = 'auto';\n    }\n    this._oldValueLength = valueLength;\n\n    const inputHeight = input.scrollHeight;\n    if (inputHeight > input.clientHeight) {\n      input.style.height = inputHeight + 'px';\n    }\n\n    // Restore\n    input.style.removeProperty('max-width');\n    inputField.style.removeProperty('display');\n    inputField.style.removeProperty('height');\n    inputField.scrollTop = scrollTop;\n\n    this._dispatchIronResizeEventIfNeeded('InputHeight', inputHeight);\n  }\n}\n\ncustomElements.define(TextArea.is, TextArea);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/input-container/theme/lumo/vaadin-input-container.js';\nimport './vaadin-text-area-styles.js';\nimport '../../src/vaadin-text-area.js';\n"],
  "mappings": "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",
  "names": []
}
