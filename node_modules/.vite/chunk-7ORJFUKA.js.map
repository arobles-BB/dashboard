{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/component-base@22.0.2/node_modules/@vaadin/component-base/src/controller-mixin.js", "../.pnpm/@vaadin/component-base@22.0.2/node_modules/@vaadin/component-base/src/slot-mixin.js", "../.pnpm/@vaadin/field-base@22.0.2/node_modules/@vaadin/field-base/src/label-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin for connecting controllers to the element.\n *\n * @polymerMixin\n */\nexport const ControllerMixin = dedupingMixin(\n  (superClass) =>\n    class ControllerMixinClass extends superClass {\n      constructor() {\n        super();\n\n        /**\n         * @type {Set<import('lit').ReactiveController>}\n         */\n        this.__controllers = new Set();\n      }\n\n      /** @protected */\n      connectedCallback() {\n        super.connectedCallback();\n\n        this.__controllers.forEach((c) => {\n          c.hostConnected && c.hostConnected();\n        });\n      }\n\n      /** @protected */\n      disconnectedCallback() {\n        super.disconnectedCallback();\n\n        this.__controllers.forEach((c) => {\n          c.hostDisconnected && c.hostDisconnected();\n        });\n      }\n\n      /**\n       * Registers a controller to participate in the element update cycle.\n       *\n       * @param {import('lit').ReactiveController} controller\n       * @protected\n       */\n      addController(controller) {\n        this.__controllers.add(controller);\n        // Call hostConnected if a controller is added after the element is attached.\n        if (this.$ !== undefined && this.isConnected && controller.hostConnected) {\n          controller.hostConnected();\n        }\n      }\n\n      /**\n       * Removes a controller from the element.\n       *\n       * @param {import('lit').ReactiveController} controller\n       * @protected\n       */\n      removeController(controller) {\n        this.__controllers.delete(controller);\n      }\n    }\n);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin to provide content for named slots defined by component.\n *\n * @polymerMixin\n */\nexport const SlotMixin = dedupingMixin(\n  (superclass) =>\n    class SlotMixinClass extends superclass {\n      /**\n       * List of named slots to initialize.\n       * @protected\n       */\n      get slots() {\n        return {};\n      }\n\n      /** @protected */\n      ready() {\n        super.ready();\n        this._connectSlotMixin();\n      }\n\n      /** @private */\n      _connectSlotMixin() {\n        Object.keys(this.slots).forEach((slotName) => {\n          // Ignore labels of nested components, if any\n          const hasContent = this._getDirectSlotChild(slotName) !== undefined;\n\n          if (!hasContent) {\n            const slotFactory = this.slots[slotName];\n            const slotContent = slotFactory();\n            if (slotContent instanceof Element) {\n              slotContent.setAttribute('slot', slotName);\n              this.appendChild(slotContent);\n            }\n          }\n        });\n      }\n\n      /** @protected */\n      _getDirectSlotChild(slotName) {\n        return Array.from(this.children).find((el) => el.slot === slotName);\n      }\n    }\n);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\nimport { SlotMixin } from '@vaadin/component-base/src/slot-mixin.js';\n\n/**\n * A mixin to provide label via corresponding property or named slot.\n *\n * @polymerMixin\n * @mixes SlotMixin\n */\nexport const LabelMixin = dedupingMixin(\n  (superclass) =>\n    class LabelMixinClass extends SlotMixin(superclass) {\n      static get properties() {\n        return {\n          /**\n           * The label text for the input node.\n           * When no light dom defined via [slot=label], this value will be used.\n           */\n          label: {\n            type: String,\n            observer: '_labelChanged'\n          }\n        };\n      }\n\n      /** @protected */\n      get slots() {\n        return {\n          ...super.slots,\n          label: () => {\n            const label = document.createElement('label');\n            label.textContent = this.label;\n            return label;\n          }\n        };\n      }\n\n      /** @protected */\n      get _labelNode() {\n        return this._getDirectSlotChild('label');\n      }\n\n      constructor() {\n        super();\n\n        // Ensure every instance has unique ID\n        const uniqueId = (LabelMixinClass._uniqueLabelId = 1 + LabelMixinClass._uniqueLabelId || 0);\n        this._labelId = `label-${this.localName}-${uniqueId}`;\n\n        /**\n         * @type {MutationObserver}\n         * @private\n         */\n        this.__labelNodeObserver = new MutationObserver(() => {\n          this._toggleHasLabelAttribute();\n        });\n      }\n\n      /** @protected */\n      ready() {\n        super.ready();\n\n        if (this._labelNode) {\n          this._labelNode.id = this._labelId;\n          this._toggleHasLabelAttribute();\n\n          this.__labelNodeObserver.observe(this._labelNode, { childList: true, subtree: true, characterData: true });\n        }\n      }\n\n      /** @protected */\n      _labelChanged(label) {\n        if (this._labelNode) {\n          this._labelNode.textContent = label;\n          this._toggleHasLabelAttribute();\n        }\n      }\n\n      /** @protected */\n      _toggleHasLabelAttribute() {\n        if (this._labelNode) {\n          const hasLabel = this._labelNode.children.length > 0 || this._labelNode.textContent.trim() !== '';\n\n          this.toggleAttribute('has-label', hasLabel);\n        }\n      }\n    }\n);\n"],
  "mappings": ";;;;;;;;;AAAA,AAYO,IAAM,kBAAkB,cAC7B,CAAC,eACC,mCAAmC,WAAW;AAAA,EAC5C,cAAc;AACZ;AAKA,SAAK,gBAAgB,IAAI;AAAA;AAAA,EAI3B,oBAAoB;AAClB,UAAM;AAEN,SAAK,cAAc,QAAQ,CAAC,MAAM;AAChC,QAAE,iBAAiB,EAAE;AAAA;AAAA;AAAA,EAKzB,uBAAuB;AACrB,UAAM;AAEN,SAAK,cAAc,QAAQ,CAAC,MAAM;AAChC,QAAE,oBAAoB,EAAE;AAAA;AAAA;AAAA,EAU5B,cAAc,YAAY;AACxB,SAAK,cAAc,IAAI;AAEvB,QAAI,KAAK,MAAM,UAAa,KAAK,eAAe,WAAW,eAAe;AACxE,iBAAW;AAAA;AAAA;AAAA,EAUf,iBAAiB,YAAY;AAC3B,SAAK,cAAc,OAAO;AAAA;AAAA;;;AC/DlC,AAYO,IAAM,YAAY,cACvB,CAAC,eACC,6BAA6B,WAAW;AAAA,MAKlC,QAAQ;AACV,WAAO;AAAA;AAAA,EAIT,QAAQ;AACN,UAAM;AACN,SAAK;AAAA;AAAA,EAIP,oBAAoB;AAClB,WAAO,KAAK,KAAK,OAAO,QAAQ,CAAC,aAAa;AAE5C,YAAM,aAAa,KAAK,oBAAoB,cAAc;AAE1D,UAAI,CAAC,YAAY;AACf,cAAM,cAAc,KAAK,MAAM;AAC/B,cAAM,cAAc;AACpB,YAAI,uBAAuB,SAAS;AAClC,sBAAY,aAAa,QAAQ;AACjC,eAAK,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,EAOzB,oBAAoB,UAAU;AAC5B,WAAO,MAAM,KAAK,KAAK,UAAU,KAAK,CAAC,OAAO,GAAG,SAAS;AAAA;AAAA;;;AChDlE,AAcO,IAAM,aAAa,cACxB,CAAC,eACC,8BAA8B,UAAU,YAAY;AAAA,aACvC,aAAa;AACtB,WAAO;AAAA,MAKL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,UAAU;AAAA;AAAA;AAAA;AAAA,MAMZ,QAAQ;AACV,WAAO,iCACF,MAAM,QADJ;AAAA,MAEL,OAAO,MAAM;AACX,cAAM,QAAQ,SAAS,cAAc;AACrC,cAAM,cAAc,KAAK;AACzB,eAAO;AAAA;AAAA;AAAA;AAAA,MAMT,aAAa;AACf,WAAO,KAAK,oBAAoB;AAAA;AAAA,EAGlC,cAAc;AACZ;AAGA,UAAM,WAAY,gBAAgB,iBAAiB,IAAI,gBAAgB,kBAAkB;AACzF,SAAK,WAAW,SAAS,KAAK,aAAa;AAM3C,SAAK,sBAAsB,IAAI,iBAAiB,MAAM;AACpD,WAAK;AAAA;AAAA;AAAA,EAKT,QAAQ;AACN,UAAM;AAEN,QAAI,KAAK,YAAY;AACnB,WAAK,WAAW,KAAK,KAAK;AAC1B,WAAK;AAEL,WAAK,oBAAoB,QAAQ,KAAK,YAAY,EAAE,WAAW,MAAM,SAAS,MAAM,eAAe;AAAA;AAAA;AAAA,EAKvG,cAAc,OAAO;AACnB,QAAI,KAAK,YAAY;AACnB,WAAK,WAAW,cAAc;AAC9B,WAAK;AAAA;AAAA;AAAA,EAKT,2BAA2B;AACzB,QAAI,KAAK,YAAY;AACnB,YAAM,WAAW,KAAK,WAAW,SAAS,SAAS,KAAK,KAAK,WAAW,YAAY,WAAW;AAE/F,WAAK,gBAAgB,aAAa;AAAA;AAAA;AAAA;",
  "names": []
}
