import {
  NumberField
} from "./chunk-XVZC4T6C.js";
import "./chunk-5VFPLFWD.js";
import "./chunk-5FEZHQWO.js";
import "./chunk-W64WW7UW.js";
import "./chunk-LXLTQWPM.js";
import "./chunk-YXC7JNSV.js";
import "./chunk-PXVMLDOO.js";
import "./chunk-VTG563PB.js";
import "./chunk-7ORJFUKA.js";
import "./chunk-KXJXXHGH.js";
import "./chunk-4JKHCVK2.js";
import "./chunk-NWSNWTJQ.js";
import "./chunk-WAPH3RCZ.js";
import "./chunk-O5ESTK6D.js";
import "./chunk-7TGUML2V.js";
import "./chunk-6AKUT5DS.js";
import "./chunk-QLGGGSH6.js";
import "./chunk-3MLIVFGU.js";
import "./chunk-AHAAGCFC.js";
import "./chunk-LAGIZBPC.js";
import "./chunk-QS3SH3AF.js";
import "./chunk-4CGZWSB2.js";
import "./chunk-235CFYIT.js";
import "./chunk-FZIWHSOX.js";
import "./chunk-MQRWSCDX.js";
import "./chunk-JZ7X4XI4.js";
import "./chunk-TZPBKG4Y.js";
import "./chunk-EWT3K5KQ.js";
import "./chunk-RZW6ORFJ.js";
import "./chunk-5VJMXRGB.js";
import "./chunk-XALJ24ZG.js";
import "./chunk-GN24F3WZ.js";
import "./chunk-HDWYYSVS.js";
import "./chunk-PN57JW3E.js";
import "./chunk-FHJNRKKV.js";
import "./chunk-PHKVH5MM.js";
import "./chunk-GWBPVOL2.js";

// node_modules/.pnpm/@vaadin/integer-field@22.0.2/node_modules/@vaadin/integer-field/src/vaadin-integer-field.js
var IntegerField = class extends NumberField {
  static get is() {
    return "vaadin-integer-field";
  }
  static get properties() {
    return {
      _enabledCharPattern: {
        value: "[-+\\d]"
      }
    };
  }
  _valueChanged(newVal, oldVal) {
    if (newVal !== "" && !this.__isInteger(newVal)) {
      console.warn(`Trying to set non-integer value "${newVal}" to <vaadin-integer-field>. Clearing the value.`);
      this.value = "";
      return;
    }
    super._valueChanged(newVal, oldVal);
  }
  _stepChanged(newVal, oldVal) {
    if (!this.__hasOnlyDigits(newVal)) {
      console.warn(`Trying to set invalid step size "${newVal}", which is not a positive integer, to <vaadin-integer-field>. Resetting the default value 1.`);
      this.step = 1;
      return;
    }
    super._stepChanged(newVal, oldVal);
  }
  __isInteger(value) {
    return /^(-\d)?\d*$/.test(String(value));
  }
  __hasOnlyDigits(value) {
    return /^\d*$/.test(String(value));
  }
};
customElements.define(IntegerField.is, IntegerField);
/**
 * @license
 * Copyright (c) 2021 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=@vaadin_integer-field_theme_lumo_vaadin-integer-field_js.js.map
