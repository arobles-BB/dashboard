import {
  SlotStylesMixin
} from "./chunk-5VFPLFWD.js";
import {
  TextField
} from "./chunk-QPENG2F2.js";
import {
  inputFieldShared
} from "./chunk-LXLTQWPM.js";
import {
  registerStyles
} from "./chunk-FZIWHSOX.js";
import {
  css
} from "./chunk-TZPBKG4Y.js";
import {
  html
} from "./chunk-5VJMXRGB.js";
import {
  __spreadProps,
  __spreadValues
} from "./chunk-GWBPVOL2.js";

// node_modules/.pnpm/@vaadin/password-field@22.0.2/node_modules/@vaadin/password-field/theme/lumo/vaadin-password-field-styles.js
var passwordField = css`
  [part='reveal-button']::before {
    content: var(--lumo-icons-eye);
  }

  :host([password-visible]) [part='reveal-button']::before {
    content: var(--lumo-icons-eye-disabled);
  }

  /* Make it easy to hide the button across the whole app */
  [part='reveal-button'] {
    position: relative;
    display: var(--lumo-password-field-reveal-button-display, block);
  }

  [part='reveal-button'][hidden] {
    display: none !important;
  }

  ::slotted([slot='reveal']) {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    width: 100%;
    background: transparent;
    border: none;
  }

  ::slotted([slot='reveal']:focus) {
    border-radius: var(--lumo-border-radius-s);
    box-shadow: 0 0 0 2px var(--lumo-primary-color-50pct);
    outline: none;
  }
`;
registerStyles("vaadin-password-field", [inputFieldShared, passwordField], { moduleId: "lumo-password-field" });

// node_modules/.pnpm/@vaadin/password-field@22.0.2/node_modules/@vaadin/password-field/src/vaadin-password-field.js
var ownTemplate = html`
  <div part="reveal-button" slot="suffix">
    <slot name="reveal"></slot>
  </div>
`;
var memoizedTemplate;
var PasswordField = class extends SlotStylesMixin(TextField) {
  static get is() {
    return "vaadin-password-field";
  }
  static get template() {
    if (!memoizedTemplate) {
      memoizedTemplate = super.template.cloneNode(true);
      const revealButton = ownTemplate.content.querySelector('[part="reveal-button"]');
      const inputField = memoizedTemplate.content.querySelector('[part="input-field"]');
      inputField.appendChild(revealButton);
    }
    return memoizedTemplate;
  }
  static get properties() {
    return {
      revealButtonHidden: {
        type: Boolean,
        observer: "_revealButtonHiddenChanged",
        value: false
      },
      passwordVisible: {
        type: Boolean,
        value: false,
        reflectToAttribute: true,
        observer: "_passwordVisibleChanged",
        readOnly: true
      },
      i18n: {
        type: Object,
        value: () => {
          return {
            reveal: "Show password"
          };
        }
      }
    };
  }
  static get observers() {
    return ["__i18nChanged(i18n.*)"];
  }
  get slots() {
    return __spreadProps(__spreadValues({}, super.slots), {
      reveal: () => {
        const btn = document.createElement("button");
        btn.setAttribute("type", "button");
        btn.disabled = this.disabled;
        return btn;
      }
    });
  }
  get slotStyles() {
    const tag = this.localName;
    return [
      `
        ${tag} [slot="input"]::-ms-reveal {
          display: none;
        }
      `
    ];
  }
  get _revealNode() {
    return this._getDirectSlotChild("reveal");
  }
  constructor() {
    super();
    this._setType("password");
    this.__boundRevealButtonClick = this._onRevealButtonClick.bind(this);
    this.__boundRevealButtonTouchend = this._onRevealButtonTouchend.bind(this);
  }
  ready() {
    super.ready();
    this._revealPart = this.shadowRoot.querySelector('[part="reveal-button"]');
  }
  connectedCallback() {
    super.connectedCallback();
    if (this._revealNode) {
      this.__updateAriaLabel(this.i18n);
      this._revealNode.setAttribute("aria-label", "Show password");
      this._revealNode.addEventListener("click", this.__boundRevealButtonClick);
      this._revealNode.addEventListener("touchend", this.__boundRevealButtonTouchend);
    }
    if (this.inputElement) {
      this.inputElement.autocapitalize = "off";
    }
    this._toggleRevealHidden(this.revealButtonHidden);
    this._updateToggleState(false);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    if (this._revealNode) {
      this._revealNode.removeEventListener("click", this.__boundRevealButtonClick);
      this._revealNode.removeEventListener("touchend", this.__boundRevealButtonTouchend);
    }
  }
  _shouldSetFocus(event) {
    return event.target === this.inputElement || event.target === this._revealNode;
  }
  _shouldRemoveFocus(event) {
    return !(event.relatedTarget === this._revealNode || event.relatedTarget === this.inputElement && event.target === this._revealNode);
  }
  _setFocused(focused) {
    super._setFocused(focused);
    if (!focused) {
      this._setPasswordVisible(false);
    } else {
      const isButtonFocused = this.getRootNode().activeElement === this._revealNode;
      this.toggleAttribute("focus-ring", this._keyboardActive && !isButtonFocused);
    }
  }
  __updateAriaLabel(i18n) {
    if (i18n.reveal && this._revealNode) {
      this._revealNode.setAttribute("aria-label", i18n.reveal);
    }
  }
  __i18nChanged(i18n) {
    this.__updateAriaLabel(i18n.base);
  }
  _revealButtonHiddenChanged(hidden) {
    this._toggleRevealHidden(hidden);
  }
  _togglePasswordVisibility() {
    this._setPasswordVisible(!this.passwordVisible);
  }
  _onRevealButtonClick() {
    this._togglePasswordVisibility();
  }
  _onRevealButtonTouchend(e) {
    e.preventDefault();
    this._togglePasswordVisibility();
    this.inputElement.focus();
  }
  _toggleRevealHidden(hidden) {
    if (this._revealNode) {
      if (hidden) {
        this._revealPart.setAttribute("hidden", "");
        this._revealNode.setAttribute("tabindex", "-1");
        this._revealNode.setAttribute("aria-hidden", "true");
      } else {
        this._revealPart.removeAttribute("hidden");
        this._revealNode.setAttribute("tabindex", "0");
        this._revealNode.removeAttribute("aria-hidden");
      }
    }
  }
  _updateToggleState(passwordVisible) {
    if (this._revealNode) {
      this._revealNode.setAttribute("aria-pressed", passwordVisible ? "true" : "false");
    }
  }
  _passwordVisibleChanged(passwordVisible) {
    this._setType(passwordVisible ? "text" : "password");
    this._updateToggleState(passwordVisible);
  }
  _disabledChanged(disabled) {
    super._disabledChanged(disabled);
    if (this._revealNode) {
      this._revealNode.disabled = disabled;
    }
  }
};
customElements.define(PasswordField.is, PasswordField);
/**
 * @license
 * Copyright (c) 2021 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=chunk-U322TVOH.js.map
