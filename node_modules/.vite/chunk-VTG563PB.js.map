{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/vaadin-lumo-styles@22.0.2/node_modules/@vaadin/vaadin-lumo-styles/mixins/helper.js", "../.pnpm/@vaadin/field-base@22.0.2/node_modules/@vaadin/field-base/src/field-aria-controller.js", "../.pnpm/@vaadin/field-base@22.0.2/node_modules/@vaadin/field-base/src/validate-mixin.js", "../.pnpm/@vaadin/field-base@22.0.2/node_modules/@vaadin/field-base/src/field-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '../color.js';\nimport '../sizing.js';\nimport '../style.js';\nimport '../typography.js';\nimport { css } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nexport const helper = css`\n  :host([has-helper]) [part='helper-text']::before {\n    content: '';\n    display: block;\n    height: 0.4em;\n  }\n\n  [part='helper-text'] {\n    display: block;\n    color: var(--lumo-secondary-text-color);\n    font-size: var(--lumo-font-size-xs);\n    line-height: var(--lumo-line-height-xs);\n    margin-left: calc(var(--lumo-border-radius-m) / 4);\n    transition: color 0.2s;\n  }\n\n  :host(:hover:not([readonly])) [part='helper-text'] {\n    color: var(--lumo-body-text-color);\n  }\n\n  :host([disabled]) [part='helper-text'] {\n    color: var(--lumo-disabled-text-color);\n    -webkit-text-fill-color: var(--lumo-disabled-text-color);\n  }\n\n  :host([has-helper][theme~='helper-above-field']) [part='helper-text']::before {\n    display: none;\n  }\n\n  :host([has-helper][theme~='helper-above-field']) [part='helper-text']::after {\n    content: '';\n    display: block;\n    height: 0.4em;\n  }\n\n  :host([has-helper][theme~='helper-above-field']) [part='label'] {\n    order: 0;\n    padding-bottom: 0.4em;\n  }\n\n  :host([has-helper][theme~='helper-above-field']) [part='helper-text'] {\n    order: 1;\n  }\n\n  :host([has-helper][theme~='helper-above-field']) [part='label'] + * {\n    order: 2;\n  }\n\n  :host([has-helper][theme~='helper-above-field']) [part='error-message'] {\n    order: 3;\n  }\n`;\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * A controller for managing ARIA attributes for a field element:\n * either the component itself or slotted `<input>` element.\n */\nexport class FieldAriaController {\n  constructor(host) {\n    this.host = host;\n    this.__required = false;\n  }\n\n  /**\n   * Sets a target element to which ARIA attributes are added.\n   *\n   * @param {HTMLElement} target\n   */\n  setTarget(target) {\n    this.__target = target;\n    this.__setAriaRequiredAttribute(this.__required);\n    this.__setLabelIdToAriaAttribute(this.__labelId);\n    this.__setErrorIdToAriaAttribute(this.__errorId);\n    this.__setHelperIdToAriaAttribute(this.__helperId);\n  }\n\n  /**\n   * Toggles the `aria-required` attribute on the target element\n   * if the target is the host component (e.g. a field group).\n   * Otherwise, it does nothing.\n   *\n   * @param {boolean} required\n   */\n  setRequired(required) {\n    this.__setAriaRequiredAttribute(required);\n    this.__required = required;\n  }\n\n  /**\n   * Links the target element with a slotted label element\n   * via the target's attribute `aria-labelledby`.\n   *\n   * To unlink the previous slotted label element, pass `null` as `labelId`.\n   *\n   * @param {string | null} labelId\n   */\n  setLabelId(labelId) {\n    this.__setLabelIdToAriaAttribute(labelId, this.__labelId);\n    this.__labelId = labelId;\n  }\n\n  /**\n   * Links the target element with a slotted error element via the target's attribute:\n   * - `aria-labelledby` if the target is the host component (e.g a field group).\n   * - `aria-describedby` otherwise.\n   *\n   * To unlink the previous slotted error element, pass `null` as `errorId`.\n   *\n   * @param {string | null} errorId\n   */\n  setErrorId(errorId) {\n    this.__setErrorIdToAriaAttribute(errorId, this.__errorId);\n    this.__errorId = errorId;\n  }\n\n  /**\n   * Links the target element with a slotted helper element via the target's attribute:\n   * - `aria-labelledby` if the target is the host component (e.g a field group).\n   * - `aria-describedby` otherwise.\n   *\n   * To unlink the previous slotted helper element, pass `null` as `helperId`.\n   *\n   * @param {string | null} helperId\n   */\n  setHelperId(helperId) {\n    this.__setHelperIdToAriaAttribute(helperId, this.__helperId);\n    this.__helperId = helperId;\n  }\n\n  /**\n   * `true` if the target element is the host component itself, `false` otherwise.\n   *\n   * @return {boolean}\n   * @private\n   */\n  get __isGroupField() {\n    return this.__target === this.host;\n  }\n\n  /**\n   * @param {string | null | undefined} labelId\n   * @param {string | null | undefined} oldLabelId\n   * @private\n   */\n  __setLabelIdToAriaAttribute(labelId, oldLabelId) {\n    this.__setAriaAttributeId('aria-labelledby', labelId, oldLabelId);\n  }\n\n  /**\n   * @param {string | null | undefined} errorId\n   * @param {string | null | undefined} oldErrorId\n   * @private\n   */\n  __setErrorIdToAriaAttribute(errorId, oldErrorId) {\n    // For groups, add all IDs to aria-labelledby rather than aria-describedby -\n    // that should guarantee that it's announced when the group is entered.\n    if (this.__isGroupField) {\n      this.__setAriaAttributeId('aria-labelledby', errorId, oldErrorId);\n    } else {\n      this.__setAriaAttributeId('aria-describedby', errorId, oldErrorId);\n    }\n  }\n\n  /**\n   * @param {string | null | undefined} helperId\n   * @param {string | null | undefined} oldHelperId\n   * @private\n   */\n  __setHelperIdToAriaAttribute(helperId, oldHelperId) {\n    // For groups, add all IDs to aria-labelledby rather than aria-describedby -\n    // that should guarantee that it's announced when the group is entered.\n    if (this.__isGroupField) {\n      this.__setAriaAttributeId('aria-labelledby', helperId, oldHelperId);\n    } else {\n      this.__setAriaAttributeId('aria-describedby', helperId, oldHelperId);\n    }\n  }\n\n  /**\n   * @param {boolean} required\n   * @private\n   */\n  __setAriaRequiredAttribute(required) {\n    if (!this.__target) {\n      return;\n    }\n\n    if (!this.__isGroupField) {\n      // native <input> or <textarea>, required is enough\n      return;\n    }\n\n    if (required) {\n      this.__target.setAttribute('aria-required', 'true');\n    } else {\n      this.__target.removeAttribute('aria-required');\n    }\n  }\n\n  /**\n   * @param {string | null | undefined} newId\n   * @param {string | null | undefined} oldId\n   * @private\n   */\n  __setAriaAttributeId(attr, newId, oldId) {\n    if (!this.__target) {\n      return;\n    }\n\n    const value = this.__target.getAttribute(attr);\n    const ids = value ? new Set(value.split(' ')) : new Set();\n\n    if (oldId) {\n      ids.delete(oldId);\n    }\n    if (newId) {\n      ids.add(newId);\n    }\n\n    this.__target.setAttribute(attr, [...ids].join(' '));\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin to provide required state and validation logic.\n *\n * @polymerMixin\n */\nexport const ValidateMixin = dedupingMixin(\n  (superclass) =>\n    class ValidateMixinClass extends superclass {\n      static get properties() {\n        return {\n          /**\n           * Set to true when the field is invalid.\n           */\n          invalid: {\n            type: Boolean,\n            reflectToAttribute: true,\n            notify: true,\n            value: false\n          },\n\n          /**\n           * Specifies that the user must fill in a value.\n           */\n          required: {\n            type: Boolean,\n            reflectToAttribute: true\n          }\n        };\n      }\n\n      /**\n       * Returns true if field is valid, and sets `invalid` based on the field validity.\n       *\n       * @return {boolean} True if the value is valid.\n       */\n      validate() {\n        return !(this.invalid = !this.checkValidity());\n      }\n\n      /**\n       * Returns true if the field value satisfies all constraints (if any).\n       *\n       * @return {boolean}\n       */\n      checkValidity() {\n        return !this.required || !!this.value;\n      }\n    }\n);\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { FlattenedNodesObserver } from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';\nimport { animationFrame } from '@vaadin/component-base/src/async.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\nimport { FieldAriaController } from './field-aria-controller.js';\nimport { LabelMixin } from './label-mixin.js';\nimport { ValidateMixin } from './validate-mixin.js';\n\n/**\n * A mixin to provide common field logic: label, error message and helper text.\n *\n * @polymerMixin\n * @mixes ControllerMixin\n * @mixes LabelMixin\n * @mixes ValidateMixin\n */\nexport const FieldMixin = (superclass) =>\n  class FieldMixinClass extends ValidateMixin(LabelMixin(ControllerMixin(superclass))) {\n    static get properties() {\n      return {\n        /**\n         * A target element to which ARIA attributes are set.\n         * @protected\n         */\n        ariaTarget: {\n          type: Object,\n          observer: '_ariaTargetChanged'\n        },\n\n        /**\n         * Error to show when the field is invalid.\n         *\n         * @attr {string} error-message\n         */\n        errorMessage: {\n          type: String\n        },\n\n        /**\n         * String used for the helper text.\n         * @attr {string} helper-text\n         */\n        helperText: {\n          type: String,\n          observer: '_helperTextChanged'\n        },\n\n        /** @protected */\n        _helperId: String\n      };\n    }\n\n    /** @protected */\n    get slots() {\n      return {\n        ...super.slots,\n        'error-message': () => {\n          const error = document.createElement('div');\n          error.textContent = this.errorMessage;\n          return error;\n        }\n      };\n    }\n\n    static get observers() {\n      return [\n        '__observeOffsetHeight(errorMessage, invalid, label, helperText)',\n        '_updateErrorMessage(invalid, errorMessage)',\n        '_invalidChanged(invalid)',\n        '_requiredChanged(required)',\n        '_helperIdChanged(_helperId)'\n      ];\n    }\n\n    /**\n     * @protected\n     * @return {HTMLElement}\n     */\n    get _errorNode() {\n      return this._getDirectSlotChild('error-message');\n    }\n\n    /**\n     * @protected\n     * @return {HTMLElement}\n     */\n    get _helperNode() {\n      return this._getDirectSlotChild('helper');\n    }\n\n    constructor() {\n      super();\n\n      // Ensure every instance has unique ID\n      const uniqueId = (FieldMixinClass._uniqueFieldId = 1 + FieldMixinClass._uniqueFieldId || 0);\n      this._errorId = `error-${this.localName}-${uniqueId}`;\n      this._helperId = `helper-${this.localName}-${uniqueId}`;\n\n      // Save generated ID to restore later\n      this.__savedHelperId = this._helperId;\n\n      this._fieldAriaController = new FieldAriaController(this);\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      const error = this._errorNode;\n      if (error) {\n        error.id = this._errorId;\n\n        this.__applyCustomError();\n\n        this._updateErrorMessage(this.invalid, this.errorMessage);\n      }\n\n      const helper = this._helperNode;\n      if (helper) {\n        this.__applyCustomHelper(helper);\n      }\n\n      this.__helperSlot = this.shadowRoot.querySelector('[name=\"helper\"]');\n\n      this.__helperSlotObserver = new FlattenedNodesObserver(this.__helperSlot, (info) => {\n        const helper = this._currentHelper;\n\n        const newHelper = info.addedNodes.find((node) => node !== helper);\n        const oldHelper = info.removedNodes.find((node) => node === helper);\n\n        if (newHelper) {\n          // Custom helper is added, remove the previous one.\n          if (helper && helper.isConnected) {\n            this.removeChild(helper);\n          }\n\n          this.__applyCustomHelper(newHelper);\n\n          this.__helperIdObserver = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n              // only handle helper nodes\n              if (\n                mutation.type === 'attributes' &&\n                mutation.attributeName === 'id' &&\n                mutation.target === this._currentHelper &&\n                mutation.target.id !== this.__savedHelperId\n              ) {\n                this.__updateHelperId(mutation.target);\n              }\n            });\n          });\n\n          this.__helperIdObserver.observe(newHelper, { attributes: true });\n        } else if (oldHelper) {\n          // The observer does not exist when default helper is removed.\n          if (this.__helperIdObserver) {\n            this.__helperIdObserver.disconnect();\n          }\n\n          this.__applyDefaultHelper(this.helperText);\n        }\n      });\n\n      this.addController(this._fieldAriaController);\n    }\n\n    /** @private */\n    __applyCustomError() {\n      const error = this.__errorMessage;\n      if (error && error !== this.errorMessage) {\n        this.errorMessage = error;\n        delete this.__errorMessage;\n      }\n    }\n\n    /**\n     * @param {HTMLElement} helper\n     * @private\n     */\n    __applyCustomHelper(helper) {\n      this.__updateHelperId(helper);\n      this._currentHelper = helper;\n      this.__toggleHasHelper(helper.children.length > 0 || this.__isNotEmpty(helper.textContent));\n    }\n\n    /**\n     * @param {string} helperText\n     * @private\n     */\n    __isNotEmpty(helperText) {\n      return helperText && helperText.trim() !== '';\n    }\n\n    /** @private */\n    __attachDefaultHelper() {\n      let helper = this.__defaultHelper;\n\n      if (!helper) {\n        helper = document.createElement('div');\n        helper.setAttribute('slot', 'helper');\n        this.__defaultHelper = helper;\n      }\n\n      helper.id = this.__savedHelperId;\n      this._helperId = helper.id;\n      this.appendChild(helper);\n      this._currentHelper = helper;\n\n      return helper;\n    }\n\n    /**\n     * @param {string} helperText\n     * @private\n     */\n    __applyDefaultHelper(helperText) {\n      let helper = this._helperNode;\n\n      const hasHelperText = this.__isNotEmpty(helperText);\n      if (hasHelperText && !helper) {\n        // Create helper lazily\n        helper = this.__attachDefaultHelper();\n      }\n\n      // Only set text content for default helper\n      if (helper && helper === this.__defaultHelper) {\n        helper.textContent = helperText;\n      }\n\n      this.__toggleHasHelper(hasHelperText);\n    }\n\n    /**\n     * @param {boolean} hasHelper\n     * @private\n     */\n    __toggleHasHelper(hasHelper) {\n      this.toggleAttribute('has-helper', hasHelper);\n    }\n\n    /**\n     * Dispatch an event if a specific size measurement property has changed.\n     * Supporting multiple properties here is needed for `vaadin-text-area`.\n     * @protected\n     */\n    _dispatchIronResizeEventIfNeeded(prop, value) {\n      const oldSize = '__old' + prop;\n      if (this[oldSize] !== undefined && this[oldSize] !== value) {\n        this.dispatchEvent(new CustomEvent('iron-resize', { bubbles: true, composed: true }));\n      }\n\n      this[oldSize] = value;\n    }\n\n    /** @private */\n    __observeOffsetHeight() {\n      this.__observeOffsetHeightDebouncer = Debouncer.debounce(\n        this.__observeOffsetHeightDebouncer,\n        animationFrame,\n        () => {\n          this._dispatchIronResizeEventIfNeeded('Height', this.offsetHeight);\n        }\n      );\n    }\n\n    /**\n     * @protected\n     * @override\n     */\n    _toggleHasLabelAttribute() {\n      super._toggleHasLabelAttribute();\n\n      // Label ID should be only added when the label content is present.\n      // Otherwise, it may conflict with an `aria-label` attribute possibly added by the user.\n      if (this.hasAttribute('has-label')) {\n        this._fieldAriaController.setLabelId(this._labelId);\n      } else {\n        this._fieldAriaController.setLabelId(null);\n      }\n    }\n\n    /**\n     * @param {boolean} invalid\n     * @param {string | null | undefined} errorMessage\n     * @protected\n     */\n    _updateErrorMessage(invalid, errorMessage) {\n      const error = this._errorNode;\n      if (!error) {\n        return;\n      }\n\n      // save the custom error message content\n      if (error.textContent && !errorMessage) {\n        this.__errorMessage = error.textContent.trim();\n      }\n      const hasError = Boolean(invalid && errorMessage);\n      error.textContent = hasError ? errorMessage : '';\n      error.hidden = !hasError;\n      this.toggleAttribute('has-error-message', hasError);\n\n      // Role alert will make the error message announce immediately\n      // as the field becomes invalid\n      if (hasError) {\n        error.setAttribute('role', 'alert');\n      } else {\n        error.removeAttribute('role');\n      }\n    }\n\n    /**\n     * @param {HTMLElement} customHelper\n     * @private\n     */\n    __updateHelperId(customHelper) {\n      let newId;\n\n      if (customHelper.id) {\n        newId = customHelper.id;\n      } else {\n        newId = this.__savedHelperId;\n        customHelper.id = newId;\n      }\n\n      this._helperId = newId;\n    }\n\n    /**\n     * @param {string} helperText\n     * @protected\n     */\n    _helperTextChanged(helperText) {\n      this.__applyDefaultHelper(helperText);\n    }\n\n    /**\n     * @param {HTMLElement | null | undefined} target\n     * @protected\n     */\n    _ariaTargetChanged(target) {\n      if (target) {\n        this._fieldAriaController.setTarget(target);\n      }\n    }\n\n    /**\n     * @param {boolean} required\n     * @protected\n     */\n    _requiredChanged(required) {\n      this._fieldAriaController.setRequired(required);\n    }\n\n    /**\n     * @param {string} helperId\n     * @protected\n     */\n    _helperIdChanged(helperId) {\n      this._fieldAriaController.setHelperId(helperId);\n    }\n\n    /**\n     * @param {boolean} required\n     * @protected\n     */\n    _invalidChanged(invalid) {\n      // This timeout is needed to prevent NVDA from announcing the error message twice:\n      // 1. Once adding the `[role=alert]` attribute by the `_updateErrorMessage` method (OK).\n      // 2. Once linking the error ID with the ARIA target here (unwanted).\n      // Related issue: https://github.com/vaadin/web-components/issues/3061.\n      setTimeout(() => {\n        // Error message ID needs to be dynamically added / removed based on the validity\n        // Otherwise assistive technologies would announce the error, even if we hide it.\n        if (invalid) {\n          this._fieldAriaController.setErrorId(this._errorId);\n        } else {\n          this._fieldAriaController.setErrorId(null);\n        }\n      });\n    }\n  };\n"],
  "mappings": "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",
  "names": []
}
