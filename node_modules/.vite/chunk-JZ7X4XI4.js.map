{
  "version": 3,
  "sources": ["../.pnpm/@vaadin/component-base@22.0.2/node_modules/@vaadin/component-base/src/dir-helper.js", "../.pnpm/@vaadin/component-base@22.0.2/node_modules/@vaadin/component-base/src/dir-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * Helper that provides a set of functions for RTL.\n */\nclass DirHelper {\n  /**\n   * Get the scroll type in the current browser view.\n   *\n   * @return {string} the scroll type. Possible values are `default|reverse|negative`\n   */\n  static detectScrollType() {\n    const dummy = document.createElement('div');\n    dummy.textContent = 'ABCD';\n    dummy.dir = 'rtl';\n    dummy.style.fontSize = '14px';\n    dummy.style.width = '4px';\n    dummy.style.height = '1px';\n    dummy.style.position = 'absolute';\n    dummy.style.top = '-1000px';\n    dummy.style.overflow = 'scroll';\n    document.body.appendChild(dummy);\n\n    let cachedType = 'reverse';\n    if (dummy.scrollLeft > 0) {\n      cachedType = 'default';\n    } else {\n      dummy.scrollLeft = 2;\n      if (dummy.scrollLeft < 2) {\n        cachedType = 'negative';\n      }\n    }\n    document.body.removeChild(dummy);\n    return cachedType;\n  }\n\n  /**\n   * Get the scrollLeft value of the element relative to the direction\n   *\n   * @param {string} scrollType type of the scroll detected with `detectScrollType`\n   * @param {string} direction current direction of the element\n   * @param {Element} element\n   * @return {number} the scrollLeft value.\n   */\n  static getNormalizedScrollLeft(scrollType, direction, element) {\n    const { scrollLeft } = element;\n    if (direction !== 'rtl' || !scrollType) {\n      return scrollLeft;\n    }\n\n    switch (scrollType) {\n      case 'negative':\n        return element.scrollWidth - element.clientWidth + scrollLeft;\n      case 'reverse':\n        return element.scrollWidth - element.clientWidth - scrollLeft;\n    }\n    return scrollLeft;\n  }\n\n  /**\n   * Set the scrollLeft value of the element relative to the direction\n   *\n   * @param {string} scrollType type of the scroll detected with `detectScrollType`\n   * @param {string} direction current direction of the element\n   * @param {Element} element\n   * @param {number} scrollLeft the scrollLeft value to be set\n   */\n  static setNormalizedScrollLeft(scrollType, direction, element, scrollLeft) {\n    if (direction !== 'rtl' || !scrollType) {\n      element.scrollLeft = scrollLeft;\n      return;\n    }\n\n    switch (scrollType) {\n      case 'negative':\n        element.scrollLeft = element.clientWidth - element.scrollWidth + scrollLeft;\n        break;\n      case 'reverse':\n        element.scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;\n        break;\n      default:\n        element.scrollLeft = scrollLeft;\n        break;\n    }\n  }\n}\n\nexport { DirHelper };\n", "/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { DirHelper } from './dir-helper.js';\n\n/**\n * Array of Vaadin custom element classes that have been subscribed to the dir changes.\n */\nconst directionSubscribers = [];\nconst directionUpdater = function () {\n  const documentDir = getDocumentDir();\n  directionSubscribers.forEach((element) => {\n    alignDirs(element, documentDir);\n  });\n};\n\nlet scrollType;\n\nconst directionObserver = new MutationObserver(directionUpdater);\ndirectionObserver.observe(document.documentElement, { attributes: true, attributeFilter: ['dir'] });\n\nconst alignDirs = function (element, documentDir, elementDir = element.getAttribute('dir')) {\n  if (documentDir) {\n    element.setAttribute('dir', documentDir);\n  } else if (elementDir != null) {\n    element.removeAttribute('dir');\n  }\n};\n\nconst getDocumentDir = function () {\n  return document.documentElement.getAttribute('dir');\n};\n\n/**\n * A mixin to handle `dir` attribute based on the one set on the `<html>` element.\n *\n * @polymerMixin\n */\nexport const DirMixin = (superClass) =>\n  class VaadinDirMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * @protected\n         */\n        dir: {\n          type: String,\n          value: '',\n          reflectToAttribute: true\n        }\n      };\n    }\n\n    /** @protected */\n    static finalize() {\n      super.finalize();\n\n      if (!scrollType) {\n        scrollType = DirHelper.detectScrollType();\n      }\n    }\n\n    /** @protected */\n    connectedCallback() {\n      super.connectedCallback();\n\n      if (!this.hasAttribute('dir')) {\n        this.__subscribe();\n        alignDirs(this, getDocumentDir(), null);\n      }\n    }\n\n    /** @protected */\n    attributeChangedCallback(name, oldValue, newValue) {\n      super.attributeChangedCallback(name, oldValue, newValue);\n      if (name !== 'dir') {\n        return;\n      }\n\n      const documentDir = getDocumentDir();\n\n      // New value equals to the document direction and the element is not subscribed to the changes\n      const newValueEqlDocDir = newValue === documentDir && directionSubscribers.indexOf(this) === -1;\n      // Value was emptied and the element is not subscribed to the changes\n      const newValueEmptied = !newValue && oldValue && directionSubscribers.indexOf(this) === -1;\n      // New value is different and the old equals to document direction and the element is not subscribed to the changes\n      const newDiffValue = newValue !== documentDir && oldValue === documentDir;\n\n      if (newValueEqlDocDir || newValueEmptied) {\n        this.__subscribe();\n        alignDirs(this, documentDir, newValue);\n      } else if (newDiffValue) {\n        this.__subscribe(false);\n      }\n    }\n\n    /** @protected */\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.__subscribe(false);\n      this.removeAttribute('dir');\n    }\n\n    /** @protected */\n    _valueToNodeAttribute(node, value, attribute) {\n      // Override default Polymer attribute reflection to match native behavior of HTMLElement.dir property\n      // If the property contains an empty string then it should not create an empty attribute\n      if (attribute === 'dir' && value === '' && !node.hasAttribute('dir')) {\n        return;\n      }\n      super._valueToNodeAttribute(node, value, attribute);\n    }\n\n    /** @protected */\n    _attributeToProperty(attribute, value, type) {\n      // Override default Polymer attribute reflection to match native behavior of HTMLElement.dir property\n      // If the attribute is removed, then the dir property should contain an empty string instead of null\n      if (attribute === 'dir' && !value) {\n        this.dir = '';\n      } else {\n        super._attributeToProperty(attribute, value, type);\n      }\n    }\n\n    /** @private */\n    __subscribe(push = true) {\n      if (push) {\n        directionSubscribers.indexOf(this) === -1 && directionSubscribers.push(this);\n      } else {\n        directionSubscribers.indexOf(this) > -1 && directionSubscribers.splice(directionSubscribers.indexOf(this), 1);\n      }\n    }\n\n    /**\n     * @param {Element} element\n     * @return {number}\n     * @protected\n     */\n    __getNormalizedScrollLeft(element) {\n      return DirHelper.getNormalizedScrollLeft(scrollType, this.getAttribute('dir') || 'ltr', element);\n    }\n\n    /**\n     * @param {Element} element\n     * @param {number} scrollLeft\n     * @protected\n     */\n    __setNormalizedScrollLeft(element, scrollLeft) {\n      return DirHelper.setNormalizedScrollLeft(scrollType, this.getAttribute('dir') || 'ltr', element, scrollLeft);\n    }\n  };\n"],
  "mappings": "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",
  "names": []
}
